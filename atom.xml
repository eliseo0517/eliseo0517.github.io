<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eliseo的小屋</title>
  
  
  <link href="https://eliseo.top/atom.xml" rel="self"/>
  
  <link href="https://eliseo.top/"/>
  <updated>2022-05-18T03:35:25.862Z</updated>
  <id>https://eliseo.top/</id>
  
  <author>
    <name>Mr.Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字序列中某一位的数字</title>
    <link href="https://eliseo.top/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://eliseo.top/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-05-18T03:34:04.000Z</published>
    <updated>2022-05-18T03:35:25.862Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/image-20220518113457587.png" alt="数字序列中某一位的数字"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findNthDigit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 前十位每个占一格  总共有10个位子除去0还有9个</span><br>        <span class="hljs-comment">// 10-99 占2格      总共有90 * 2 = 180个位子</span><br>        <span class="hljs-comment">// 100 -999 占3格   总共有 900 * 3 = 2700个位子</span><br>        <span class="hljs-comment">// 所以知道n可以知道是几位数，第几个</span><br><br>        <span class="hljs-comment">//占了几位</span><br>        <span class="hljs-keyword">int</span> digit = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//在第几个数字中</span><br>        <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//目前占了多少个数字。因为n&lt; 2e31,所以count是可能越int的</span><br>        <span class="hljs-keyword">long</span> count = <span class="hljs-number">9</span>;<br>        <span class="hljs-comment">//例如1，10，100，1000</span><br>        <span class="hljs-keyword">long</span> start = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (n &gt; count) &#123;<br><br>            n -= count;<br><br>            digit++;<br><br>            start *= <span class="hljs-number">10</span>;<br><br>            count = digit * start * <span class="hljs-number">9</span>;<br><br>        &#125;<br>        <span class="hljs-comment">//在第res个数字中</span><br>        res = start + (n - <span class="hljs-number">1</span>)/digit;<br><br>        <span class="hljs-comment">//这个数的第几位</span><br>        <span class="hljs-keyword">return</span> Long.toString(res).charAt((n - <span class="hljs-number">1</span>) % digit) - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/image-202205181</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>1~n整数中1出现的次数</title>
    <link href="https://eliseo.top/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</id>
    <published>2022-05-18T02:25:38.000Z</published>
    <updated>2022-05-18T02:26:41.806Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/image-20220518102620979.png" alt="1~n整数中1出现的次数"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">// 对于这道题而言 1出现的个数取决于 1在每一位上出现的次数</span><br>    <span class="hljs-comment">// 当前位为0的时候 1出现的次数由高位决定 也就是 res = 高位 * 10</span><br>    <span class="hljs-comment">// 当前位为1的时候 1出现的次数由高位与低位决定 也就是 res = 高位 * 10 + 低位 + 1</span><br>    <span class="hljs-comment">// 当前位为2~9的时候 1出现的次数由高位决定 也就是 res = (高位 + 1) * 10</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countDigitOne</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// 结果</span><br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 高位</span><br>        <span class="hljs-keyword">int</span> high = n / <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 当前位,从个位开始</span><br>        <span class="hljs-keyword">int</span> cur = n % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 低位</span><br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 位因子</span><br>        <span class="hljs-keyword">int</span> digit = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (high != <span class="hljs-number">0</span> || cur != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当高位与当前位有一个不是0的时候</span><br>            <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 高位 * 位因子</span><br>                res += high * digit;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>) &#123;<br>                res += high * digit + low + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                res +=(high + <span class="hljs-number">1</span>) * digit;<br>            &#125;<br>            <span class="hljs-comment">// 更新low  cur  hight  dight</span><br>            low +=cur * digit;<br>            <span class="hljs-comment">// cur是high的最后一位</span><br>            cur = high % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 高位上升</span><br>            high /= <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 位因子乘10</span><br>            digit *= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/image-20220518102620979.png&quot; alt=&quot;1~n整</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剪绳子Ⅱ</title>
    <link href="https://eliseo.top/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/"/>
    <id>https://eliseo.top/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/</id>
    <published>2022-05-18T01:23:08.000Z</published>
    <updated>2022-05-18T01:37:05.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/image-20220518092413253.png" alt="剪绳子Ⅱ"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cuttingRope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// 由剪绳子Ⅰ可以得出 剪绳子剪成3的倍数 为最理想状态</span><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">long</span> res = <span class="hljs-number">1L</span>;<br>        <span class="hljs-keyword">long</span> p = (<span class="hljs-keyword">int</span>) <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">4</span>) &#123;<br>            res = res * <span class="hljs-number">3</span> % p;<br>            n -= <span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-comment">// 乘3以后 将剩下的数字也乘进去</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) (res * n % p);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/image-20220518092413253.png&quot; alt=&quot;剪绳子Ⅱ&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="https://eliseo.top/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>https://eliseo.top/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</id>
    <published>2022-05-17T07:49:53.000Z</published>
    <updated>2022-05-18T01:29:21.435Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/image-20220517155231958.png" alt="数组中的逆序对"></p><p><strong>解法一：</strong></p><p>暴力递归（双指针一个一个进行比较，发现符合的情况则res++），题目所给的数组长度在0~500之间，暴力递归会出现超时</p><p><strong>解法二：归并排序的时候进行对逆序对的统计</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] nums, tmp;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.nums = nums;<br>        tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>        <span class="hljs-keyword">return</span> mergeSort(<span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>        <span class="hljs-comment">// 终止条件</span><br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 递归划分</span><br>        <span class="hljs-keyword">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> res = mergeSort(l, m) + mergeSort(m + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-comment">// 合并阶段</span><br>        <span class="hljs-keyword">int</span> i = l, j = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 在每次比较大小的时候顺便进行对逆序对的统计</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = l; k &lt;= r; k++)<br>            tmp[k] = nums[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = l; k &lt;= r; k++) &#123;<br>            <span class="hljs-keyword">if</span> (i == m + <span class="hljs-number">1</span>)<br>                nums[k] = tmp[j++];<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == r + <span class="hljs-number">1</span> || tmp[i] &lt;= tmp[j])<br>                nums[k] = tmp[i++];<br>            <span class="hljs-keyword">else</span> &#123;<br>                nums[k] = tmp[j++];<br>                res += m - i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 统计逆序对</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/image-20220517155231958.png&quot; alt=&quot;数组中的逆序对&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>打印从1到最大的n位数</title>
    <link href="https://eliseo.top/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</id>
    <published>2022-05-16T03:32:52.000Z</published>
    <updated>2022-05-18T01:29:00.522Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/image-20220516113408866.png" alt="打印从1到最大的n位数"></p><p><strong>解法一：（不考虑大数）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] printNumbers(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">int</span> max = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            max *= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[max - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; max; i++) &#123;<br>            res[i - <span class="hljs-number">1</span>] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二：（考虑大数）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] res;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>,nine = <span class="hljs-number">0</span>,start,n;<br>        <span class="hljs-keyword">char</span>[] a;<br>        <span class="hljs-keyword">char</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] printNumbers(<span class="hljs-keyword">int</span> n) &#123;<br>            <span class="hljs-keyword">this</span>.n = n;<br>            res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[(<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">10</span>,n) - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 数字字符串集</span><br>            a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[n]; <span class="hljs-comment">// 定义长度为n的字符列表</span><br>            <span class="hljs-comment">//初始化start例如最大99，那么前十个的个位就不需要</span><br>            start = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 全排列</span><br>            dfs(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>            <span class="hljs-comment">// 终止条件：固定完所有的位</span><br>            <span class="hljs-keyword">if</span> (x == n) &#123;<br>                <span class="hljs-comment">// 截取</span><br>                String s = String.valueOf(a).substring(start);<br>                <span class="hljs-keyword">if</span> (!s.equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>                    <span class="hljs-comment">// num添加到res尾部用逗号隔开</span><br>                    <span class="hljs-comment">// res.append(s + &quot;,&quot;);</span><br>                    res[count++] = Integer.parseInt(s);<br>                &#125;<br>                <span class="hljs-comment">// 所有位都是9即要进位了 nine是9的数量</span><br>                <span class="hljs-keyword">if</span> (n - start == nine) &#123;<br>                    start--;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 每一位</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> i : b) &#123;<br>                <span class="hljs-comment">// a[0]=0</span><br>                <span class="hljs-comment">// a[1]=0</span><br>                <span class="hljs-comment">// 固定的x位是i</span><br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                    nine++;<br>                &#125;<br>                a[x] = i;<br>                <span class="hljs-comment">// 下一位固定</span><br>                dfs(x + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// nine恢复</span><br>            nine--;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/image-20220516113408866.png&quot; al</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>n个骰子的点数</title>
    <link href="https://eliseo.top/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</id>
    <published>2022-05-15T03:09:02.000Z</published>
    <updated>2022-05-18T01:24:45.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/image-20220515110935835.png" alt="n个骰子的点数"></p><p><strong>解法一：（暴力递归）</strong></p><p>时间复杂度为O(6^n) <strong>超时</strong></p><p><strong>解法二：（动态规划）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span>[] dicesProbability(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">double</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">6</span>];<br>    <span class="hljs-comment">// Arrays.fill() 将指定的值分配给指定数组的每个元素。</span><br>        Arrays.fill(dp, <span class="hljs-number">1.0</span> / <span class="hljs-number">6.0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">double</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// n-1个骰子的每一项都会对有n个骰子的点数和产生影响</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; dp.length; j++) &#123;<br>                <span class="hljs-comment">// 第n个骰子的1~6</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; k++) &#123;<br>                    <span class="hljs-comment">// 加上前do数组j值对应概率/6</span><br>                    tmp[j + k] += dp[j] * (<span class="hljs-number">1.0</span> / <span class="hljs-number">6.0</span>);<br>                &#125;<br>            &#125;<br>            dp = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/image-20220515110935835.png&quot; alt=&quot;n个骰子的点数&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>丑数</title>
    <link href="https://eliseo.top/2022/05/15/%E4%B8%91%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/15/%E4%B8%91%E6%95%B0/</id>
    <published>2022-05-15T02:27:48.000Z</published>
    <updated>2022-05-18T01:24:56.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/15/%E4%B8%91%E6%95%B0/image-20220515102813385.png" alt="丑数"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// 每一个丑数都是由他前面的某一个丑数*2 *3 *5得到的</span><br>        <span class="hljs-comment">// 所以我们只要求的前面的丑数*2 *3 *5之后的最小值就是这个丑数之后的下一个丑数的值</span><br>        <span class="hljs-comment">// n不超过1690</span><br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1690</span>];<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">int</span> n2 = dp[a] * <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> n3 = dp[b] * <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">int</span> n5 = dp[c] * <span class="hljs-number">5</span>;<br>            <span class="hljs-comment">// 得到最小的前面的丑数*2 *3 *5的值</span><br>            dp[i] = Math.min(Math.min(n2, n3), n5);<br>            <span class="hljs-keyword">if</span> (dp[i] == n2) &#123;<br>                <span class="hljs-comment">// 如果dp[i]是a*2得到，那么下一个需要*2得到的丑数就是a的下一个</span><br>                a++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == n3) &#123;<br>                b++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == n5) &#123;<br>                c++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/15/%E4%B8%91%E6%95%B0/image-20220515102813385.png&quot; alt=&quot;丑数&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式匹配</title>
    <link href="https://eliseo.top/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://eliseo.top/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</id>
    <published>2022-05-14T08:39:24.000Z</published>
    <updated>2022-05-18T01:29:49.192Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/image-20220514164139599.png" alt="正则表达式匹配"></p><p><strong>解法一：（暴力递归）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>        <span class="hljs-comment">// a是题目所给的字符串</span><br>        <span class="hljs-keyword">char</span>[] a = s.toCharArray();<br>        <span class="hljs-comment">// b是正则表达式</span><br>        <span class="hljs-keyword">char</span>[] b = p.toCharArray();<br><br>        <span class="hljs-comment">// 如果字符串为空</span><br>        <span class="hljs-keyword">if</span> (a.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 那么正则表达式只能是偶数，而且最后一位只能 是&#x27;*&#x27;</span><br>            <span class="hljs-keyword">if</span> (!(b.length % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果是偶数，偶数位一位只能是&#x27;*&#x27;</span><br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; b.length) &#123;<br>                <span class="hljs-keyword">if</span> (b[i] != <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>                i += <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果字符串不是空 但是正则表达式为0</span><br>        <span class="hljs-keyword">if</span> (b.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 定义两个变量负责用来遍历a，b内部的元素</span><br>        <span class="hljs-keyword">char</span> c1 = a[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">char</span> c2 = b[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// c3 是指正则表达式中正在比较的字符的下一位</span><br>        <span class="hljs-keyword">char</span> c3 = <span class="hljs-string">&#x27;~&#x27;</span>;<br><br>        <span class="hljs-keyword">if</span> (b.length &gt; <span class="hljs-number">1</span>) &#123;<br>            c3 = b[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (c3 != <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (c1 == c2 || c2 == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 匹配</span><br>                <span class="hljs-keyword">return</span> isMatch(s.substring(<span class="hljs-number">1</span>), p.substring(<span class="hljs-number">1</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 下一位是&#x27;*&#x27;</span><br>            <span class="hljs-keyword">if</span> (c1 == c2 || c2 == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> isMatch(s.substring(<span class="hljs-number">1</span>), p) || isMatch(s, p.substring(<span class="hljs-number">2</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> isMatch(s, p.substring(<span class="hljs-number">2</span>));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二：（动态规划）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>    <span class="hljs-keyword">char</span>[] a = s.toCharArray();<br>    <span class="hljs-keyword">char</span>[] b = p.toCharArray();<br>    <span class="hljs-keyword">int</span> alen = a.length;<br>    <span class="hljs-keyword">int</span> blen = b.length;<br><br>    <span class="hljs-keyword">boolean</span>[][] ism = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[alen + <span class="hljs-number">1</span>][blen + <span class="hljs-number">1</span>];<br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= alen; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= blen; j++) &#123;<br>            <span class="hljs-comment">//正则串为空。是否匹配取决于主串是否为空</span><br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>                ism[i][j] = i == <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//正则串本位不为*</span><br>                <span class="hljs-keyword">if</span> (b[j - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">1</span>] || b[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                        ism[i][j] = ism[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">2</span>) &#123;<br>                        <span class="hljs-comment">//如果不看，就砍掉</span><br>                        ism[i][j] = ism[i][j - <span class="hljs-number">2</span>];<br>                    &#125;<br>                    <span class="hljs-comment">//正则串本位为*    如果需要使用*</span><br>                    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">2</span> &amp;&amp; (a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">2</span>] || b[j - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                        <span class="hljs-comment">//如果在前一步已经计算ism[i][j]是true，就不需要计算</span><br>                        ism[i][j] |= ism[i - <span class="hljs-number">1</span>][j] ;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ism[alen][blen];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p><img src="/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/68F4F9C9D81832F29A9D78CEA7E5AD59.png" alt="解题思路"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/image-20220514164139599.png&quot; alt=&quot;正则表达式匹配&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>字符串的排列</title>
    <link href="https://eliseo.top/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>https://eliseo.top/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</id>
    <published>2022-05-11T02:34:47.000Z</published>
    <updated>2022-05-18T01:28:09.605Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/image-20220511103629683.png" alt="字符串的排列"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br> List&lt;String&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">public</span> String[] permutation(String s) &#123;<br>        <span class="hljs-keyword">char</span>[] chars = s.toCharArray();<br>        <span class="hljs-keyword">int</span> len = chars.length;<br>        <span class="hljs-comment">//第二个参数为固定到了第几个数</span><br>        rec(chars,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// 交换数字的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] s, <span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> tmp = s[a];<br>        s[a] = s[b];<br>        s[b] = tmp;<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rec</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars,<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-comment">//固定到了最后一个数</span><br>        <span class="hljs-keyword">if</span>(x == chars.length - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//最后一个数也只有一个排列,也说明固定完了</span><br>            res.add(String.valueOf(chars));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//去重</span><br>        Set&lt;Character&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = x; i &lt; chars.length;i++) &#123;<br>            <span class="hljs-keyword">if</span>(set.contains(chars[i])) &#123;<br>                <span class="hljs-comment">//如果set中已经固定过这个数了,就进行下一个固定</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            set.add(chars[i]);<br>            <span class="hljs-comment">//交换当前数与固定到的最后一个数</span><br>            swap(chars,x,i);<br>            rec(chars,x + <span class="hljs-number">1</span>);<br>            swap(chars,i,x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/image-20220511103629683.png&quot; alt=&quot;字符串的排列&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>队列的最大值</title>
    <link href="https://eliseo.top/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://eliseo.top/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-05-10T03:18:01.000Z</published>
    <updated>2022-05-18T01:30:39.428Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220510111946329.png" alt="队列的最大值"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxQueue</span> </span>&#123;<br><br>    <span class="hljs-comment">//普通队列</span><br>    Deque&lt;Integer&gt; queue;<br>    <span class="hljs-comment">//单调队列</span><br>    Deque&lt;Integer&gt; deque;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        deque = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max_value</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (deque.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> deque.peekFirst();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-comment">// offer()方法用于在双端队列的末尾添加给定元素</span><br>        queue.offer(value);<br>        <span class="hljs-comment">// 保证单调队列的递减的</span><br>        <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; value) &#123;<br>            deque.removeLast();<br>        &#125;<br>        deque.addLast(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (queue.peek().equals(deque.peekFirst())) &#123;<br>            <span class="hljs-comment">// pollFirst() : 返回此双端队列表示的队列的第一个元素，但会从此双端队列中删除第一个元素。</span><br>            deque.pollFirst();<br>        &#125;<br>        <span class="hljs-keyword">return</span> queue.poll();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MaxQueue object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MaxQueue obj = new MaxQueue();</span><br><span class="hljs-comment"> * int param_1 = obj.max_value();</span><br><span class="hljs-comment"> * obj.push_back(value);</span><br><span class="hljs-comment"> * int param_3 = obj.pop_front();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220510111946329.png&quot; alt=&quot;队列的最大值&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口的最大值</title>
    <link href="https://eliseo.top/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://eliseo.top/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-05-09T02:37:48.000Z</published>
    <updated>2022-05-18T01:29:58.765Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220509104013577.png" alt="滑动窗口的最大值"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] maxSlidingWindow(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len - k + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span> || k == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> - k, j = <span class="hljs-number">0</span>; j &lt; len; j++, i++) &#123;<br>            <span class="hljs-comment">// deque.peekFirst() =&gt; 用于检索链表的第一个元素，初始元素或开始元素，但不会从列表中删除第一个元素。</span><br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; deque.peekFirst() == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                deque.removeFirst();<br>            &#125;<br>            <span class="hljs-comment">// 删除最大值左边的值，保证队列递减,那么就判断队列左边的值与新加入的元素的值的大小</span><br>            <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; nums[j]) &#123;<br>                <span class="hljs-comment">// deque.removeLast() =&gt; 用于返回最后一个元素，但要从此双端队列移除该元素</span><br>                deque.removeLast();<br>            &#125;<br>            deque.addLast(nums[j]);<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>                res[i] = deque.peekFirst();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220509104013577.png&quot; alt=&quot;滑动窗口的最大值</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>栈的压入、弹出序列</title>
    <link href="https://eliseo.top/2022/05/08/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <id>https://eliseo.top/2022/05/08/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</id>
    <published>2022-05-08T03:17:27.000Z</published>
    <updated>2022-05-18T01:29:44.278Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/08/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/image-20220508111814728.png" alt="栈的压入、弹出序列"></p><p><strong>解法：（栈）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateStackSequences</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] pushed, <span class="hljs-keyword">int</span>[] popped)</span> </span>&#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-comment">// 定义弹出序列的下标</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : pushed) &#123; <br>            stack.push(num); <span class="hljs-comment">// 将压栈序列遍历到栈内</span><br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == popped[i]) &#123; <span class="hljs-comment">// 如果我的弹出序列要弹出的数等于栈顶元素</span><br>                stack.pop(); <span class="hljs-comment">// 将栈顶元素弹出</span><br>                i++; <span class="hljs-comment">// 查看压栈序列的下一个数</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/08/%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/image-20220508111814728.png&quot; alt=</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>顺时针打印矩阵</title>
    <link href="https://eliseo.top/2022/05/08/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>https://eliseo.top/2022/05/08/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</id>
    <published>2022-05-08T02:42:12.000Z</published>
    <updated>2022-05-18T01:30:44.953Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/08/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/image-20220508104326728.png" alt="顺时针打印矩阵"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] spiralOrder(<span class="hljs-keyword">int</span>[][] matrix) &#123;<br>        <span class="hljs-keyword">if</span> (matrix.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-comment">// 行数</span><br>        <span class="hljs-keyword">int</span> x = matrix.length;<br>        <span class="hljs-comment">// 列数</span><br>        <span class="hljs-keyword">int</span> y = matrix[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-comment">// 结果集</span><br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[x * y];<br>        <span class="hljs-comment">// 结果集的下标</span><br>        <span class="hljs-keyword">int</span> sub = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 上下左右边界 当遍历大于边界的时候跳出</span><br>        <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> bottom = x - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = y - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (sub &lt;= res.length) &#123;<br>            <span class="hljs-comment">// 模拟从左往右</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = left; i &lt;= right; i++) &#123;<br>                res[sub] = matrix[top][i];<br>                sub++;<br>            &#125;<br>            top++;<span class="hljs-comment">// 本行走完</span><br>            <span class="hljs-keyword">if</span> (top &gt; bottom) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 模拟从上到下</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i &lt;= bottom; i++) &#123;<br>                res[sub] = matrix[i][right];<br>                sub++;<br>            &#125;<br>            right--;<span class="hljs-comment">// 本列走完</span><br>            <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 模拟从右到左</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = right; i &gt;= left; i--) &#123;<br>                res[sub] = matrix[bottom][i];<br>                sub++;<br>            &#125;<br>            bottom--;<span class="hljs-comment">// 本行走完</span><br>            <span class="hljs-keyword">if</span> (top &gt; bottom) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 模拟从下到上</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = bottom; i &gt;= top; i--) &#123;<br>                res[sub] = matrix[i][left];<br>                sub++;<br>            &#125;<br>            left++;<span class="hljs-comment">// 本列走完</span><br>            <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/08/%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/image-20220508104326728.png&quot; alt=&quot;顺时针打印矩阵&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://eliseo.top/2022/05/08/JVM/"/>
    <id>https://eliseo.top/2022/05/08/JVM/</id>
    <published>2022-05-07T16:37:53.000Z</published>
    <updated>2022-05-11T17:40:05.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、JVM概述"><a href="#一、JVM概述" class="headerlink" title="一、JVM概述"></a>一、JVM概述</h1><h2 id="1-1、Java虚拟机"><a href="#1-1、Java虚拟机" class="headerlink" title="1.1、Java虚拟机"></a>1.1、Java虚拟机</h2><p><strong>Java虚拟机</strong></p><ul><li>Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成</li><li>JVM平台的各种语言可以共享Java虚拟机带来的快平台性、优秀的垃圾回收器，以及可靠的即时编译器</li><li><strong>Java技术的核心就是Java虚拟机</strong>(JVM， Java Virtual Machine)，因为所有的Java程序都运行在Java虚拟机内部</li></ul><p><strong>作用</strong></p><ul><li>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么操作数，怎么处理作数，处理结果放在哪里。</li></ul><p><strong>特点</strong></p><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收机制（担忧，因为不需要去考虑回收的原理，长期的自动化会导致如果出现内存溢出是Java程序员无法解决）</li></ul><p><strong>JVM的位置</strong></p><p><img src="/2022/05/08/JVM/image-20220508004058537.png" alt="JVM的位置"></p><p><img src="/2022/05/08/JVM/image-20220508005148157.png" alt="JDK的构成"></p><h2 id="1-2、JVM的整体结构"><a href="#1-2、JVM的整体结构" class="headerlink" title="1.2、JVM的整体结构"></a>1.2、JVM的整体结构</h2><p><img src="/2022/05/08/JVM/image-20220508005504671.png" alt="JVM的整体结构"></p><ul><li><p>HotSpot VM是目前市面上高性能虚拟机的代表作之一。</p></li><li><p>它采用解释器与即时编译器并存的架构。</p></li><li><p>在今天，Java程序的运行性能早已脱胎换骨，已经带到了可以和C/C++程序一较高下的底部。</p></li><li><p><strong>类装载器子系统</strong>将字节码文件加载到内存中生成一个大的Class对象， 涉及到加载、 连接、 初始化。</p></li><li><p>对于<strong>方法区</strong>和<strong>堆</strong> 多个线程共享，对于<strong>Java栈、本地方法栈、程序技术器</strong> 每一个线程独有一份</p></li><li><p><strong>执行引擎</strong>充当了高级语言翻译成机器语言的翻译器</p></li></ul><h2 id="1-3、Java代码的执行流程"><a href="#1-3、Java代码的执行流程" class="headerlink" title="1.3、Java代码的执行流程"></a>1.3、Java代码的执行流程</h2><p><img src="/2022/05/08/JVM/image-20220508010848773.png" alt="Java代码的执行流程"></p><ol><li>Java的代码进过Java编译器变成了Java虚拟机可以识别字节码文件。</li><li>字节码文件再进过Java虚拟机变成了操作系统可以识别的机器指令。</li><li>操作系统再根据相关的机器指令做出对应的操作。</li></ol><h2 id="1-4、JVM的架构模型"><a href="#1-4、JVM的架构模型" class="headerlink" title="1.4、JVM的架构模型"></a>1.4、JVM的架构模型</h2><p>Java编译器输入的指令流基本上是一种基于<strong>栈的指令集架构</strong>，另外一种指令集架构则是基于 <strong>寄存器的指令集架构</strong></p><p>具体来说，这两种架构之间的区别：</p><ul><li><strong>基于栈式架构的特点</strong><ul><li>设计和实现更简单，适用于资源受限的系统；</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li><strong>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现</strong></li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul></li><li><strong>基于寄存器架构的特点</strong><ul><li>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。</li><li><strong>指令集架构则完全依赖硬件，可移植性差</strong></li><li><strong>性能优秀和执行更高效；</strong></li><li>花费更少的指令去完成一项操作。</li><li>在大部分情况下，基于寄存器架构的指令集往往都是一地址指令、二地址指令和三地址指令为主，二基于展示架构的指令集确实以零地址指令为主。</li></ul></li></ul><p><strong>举例1：</strong></p><p>同样执行2+3这种逻辑操作，其指令分别如下：</p><p>基于栈的计算流程（以Java虚拟机为例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">iconst_2 <span class="hljs-comment">// 常量2入栈</span><br>iconst_1<br>iconst_3 <span class="hljs-comment">// 常量3入栈</span><br>iconst_2<br>iload_1<br>iload_2<br>iadd<span class="hljs-comment">// 常量2、3出栈，执行相加</span><br>istore_0    <span class="hljs-comment">// 结果5入栈</span><br></code></pre></td></tr></table></figure><p>基于寄存器的计算流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">mov eax,<span class="hljs-number">2</span><span class="hljs-comment">// 使eax寄存器的值设为1    </span><br>mov eax,<span class="hljs-number">3</span><span class="hljs-comment">// 使eax寄存器的值加3    </span><br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: StackStruTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/5/8 1:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackStruTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span> + <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上述代码而言，使用栈操作的话，步骤如下（找到字节码文件，用javap -c 文件名）：</p><p><img src="/2022/05/08/JVM/image-20220508020512989.png" alt="栈操作"></p><p><strong>总结：</strong></p><p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</p><p>栈：跨平台性、指令集小、指令多；执行性能比寄存器差</p><h2 id="1-5、JVM的生命周期"><a href="#1-5、JVM的生命周期" class="headerlink" title="1.5、JVM的生命周期"></a>1.5、JVM的生命周期</h2><p><strong>虚拟机的启动</strong></p><p>Java虚拟机的启动是通过<strong>引导类加载器</strong>（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体现指定的。</p><p><strong>虚拟机的执行</strong></p><ul><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。</li><li>程序开始执行时他才运行，程序结束时他就停止。</li><li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程</li></ul><p><strong>虚拟机的退出</strong></p><p>有如下的几种情况：</p><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统用现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或system类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。</li><li>除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。</li></ul><h2 id="1-6、JVM分类"><a href="#1-6、JVM分类" class="headerlink" title="1.6、JVM分类"></a>1.6、JVM分类</h2><ul><li>SUN Classic VM<ul><li>只提供解释器，如果使用JIT编译器，解释器就不能工作，也就是只能二选一</li></ul></li><li>Exact VM   (Exact Memory Management：准确式内存管理)<ul><li>虚拟机可以知道内存中某个位置的数据具体是什么类型 具有热点探测与解释器编译器混合工作功能</li></ul></li><li><strong>HotSpot VM</strong> （<strong>绝对的市场地位，称霸武林</strong>）<ul><li>通过计数器找到最具编译价值代码，触发即时编译或栈上替换。(热点代码探测)</li><li>通过编译器与解释器协同工作，在最优化的程序相应时间与最佳性能执行中取得平衡</li><li>Sun / Oracle JDK 和 OpenJDK 的默认虚拟机</li><li><strong>默认都是HotSpot虚拟机，相关机制也主要是值HotSpot的GC机制。</strong></li></ul></li><li><strong>BEA的JRockit VM</strong><ul><li><strong>专注于服务端应用</strong><ul><li>不太关注程序启动速度，所以内部不包含解析器实现，都靠着即时编译器</li></ul></li><li><strong>是世界上最快的JVM</strong></li><li>优势：全面的Java运行时解决方案组合</li></ul></li><li><strong>IBM 的 J9</strong><ul><li>广泛用于IBM的各种Java产品。</li></ul></li><li>HotSpot，JRockit 与J9 是<strong>有影响力的三大商用虚拟机</strong></li><li><strong>Graal VM</strong><ul><li>2018年4月，oracle Labs公开了Graal VM，号称 <strong>“Run Programs Faster Anywhere”</strong>，野心勃勃。与1995年java的”write once，run anywhere”遥相呼应。</li><li>Graal VM在HotSpot VM基础上增强而成的<strong>跨语言全栈虚拟机，可以作为“任何语言” 的运行平台使用</strong>。语言包括：Java、Scala、Groovy、Kotlin；C、C++、Javascript、Ruby、Python、R等</li><li>支持不同语言中混用对方的接口和对象，支持这些语言使用已经编写好的本地库文件</li><li>工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被Graal VM接受的中间表示。Graal VM提供Truffle工具集快速构建面向一种新语言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。</li><li><strong>如果说HotSpot有一天真的被取代，Graal VM希望最大。</strong>但是Java的软件生态没有丝毫变化。</li></ul></li></ul><p>……</p><p>所有虚拟机遵循的原则:一次编译，到处允许</p><p><strong>总结</strong></p><p>具体JVM的内存结构，其实取决于其实现，不同厂商的JVM，或者同一厂商发布的不同版本，都有可能存在一定差异。主要以Oracle HotSpot VM为默认虚拟机。</p><h1 id="二、类加载子系统"><a href="#二、类加载子系统" class="headerlink" title="二、类加载子系统"></a>二、类加载子系统</h1><h2 id="2-1、内存结构概述"><a href="#2-1、内存结构概述" class="headerlink" title="2.1、内存结构概述"></a>2.1、内存结构概述</h2><ul><li>Class文件</li><li>类加载子系统</li><li>运行时数据区</li><li><ul><li>方法区</li></ul></li><li><ul><li>堆</li></ul></li><li><ul><li>程序计数器</li></ul></li><li><ul><li>虚拟机栈</li></ul></li><li><ul><li>本地方法栈</li></ul></li><li>执行引擎</li><li>本地方法接口</li><li>本地方法库</li></ul><p><img src="/2022/05/08/JVM/image-20220509231651617.png" alt="简图"></p><p><img src="/2022/05/08/JVM/image-20220509235533862.png" alt="详细图"></p><h2 id="2-2、类加载器与类的加载过程"><a href="#2-2、类加载器与类的加载过程" class="headerlink" title="2.2、类加载器与类的加载过程"></a>2.2、类加载器与类的加载过程</h2><p><img src="/2022/05/08/JVM/image-20220510000550216.png" alt="类加载器子系统作用"></p><ul><li>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识</li><li>ClassLoader只负责class文件的加载，治郁它是否可以运行，则有ExecutionEngine决定</li></ul><ul><li>加载的类信息存放于一块称为方法区的内存空间。除了类信息外，方法区中还会有存放运行时常量信息，可能还包含字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</li><li>我自己的理解：类加载器是从硬盘中找到.class文件（是通过特定文件标识找），然后以二进制流的形式加载到内存中，当一个类被加载后，他是否能够运行是有执行引擎去负责的，和类加载器没有关系。且我们加载进去的类的信息都存放在方法区中，同时方法区中还有运行时常量信息等信息。如果实例化对象了，他们这个对象存放到堆中，但是对象的引用在栈里面。</li></ul><p><strong>类加载器ClasLoader角色</strong></p><p><img src="/2022/05/08/JVM/image-20220510004021200.png" alt="类加载器ClasLoader角色"></p><ul><li>class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</li><li>class file加载到JVM中，被称为DNA元数据模板，存放在方法区，</li><li>在.class文件-&gt; JVM-&gt;最终成为元数据模板，此过程需要一个运输根据（类加载器Class Loader），扮演一个快递员的角色。</li></ul><p><strong>类的加载过程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *示例代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用流程图表示上述示例代码：</p><p><img src="/2022/05/08/JVM/image-20220510005206272.png" alt="类的加载过程的流程图"></p><h3 id="2-2-1、加载阶段"><a href="#2-2-1、加载阶段" class="headerlink" title="2.2.1、加载阶段"></a>2.2.1、加载阶段</h3><p><img src="/2022/05/08/JVM/image-20220510005107211.png" alt="类的加载阶段"></p><p><strong>加载：</strong></p><ul><li>通过一个类的全限定明获取定义次此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li><strong>在内存中存放一个代表这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的访问入口。（也就是说，Class对象是在加载阶段就生成的）</li></ul><p><strong>补充：加载class文件的方式</strong></p><ul><li>从本地系统中直接加载</li><li>通过网络获取，典型场景：Web Applet</li><li>从zip压缩包中读取，成为日后jar、war格式的基础</li><li>运行时计算生成，使用最多的是：动态代理技术</li><li>由其他文件生成，典型场景：JSP应用</li><li>从专有数据库中提取.class文件，比较少见</li><li>从加密文件中获取，典型的防Class文件被反编译的保护措施</li></ul><h3 id="2-2-2、链接阶段"><a href="#2-2-2、链接阶段" class="headerlink" title="2.2.2、链接阶段"></a>2.2.2、链接阶段</h3><ul><li>验证（Verify）：<ul><li>目的在子确保Class文件的字节流文件包含信息符合当前虚拟机的要求，保证被加载类的正确性，不会危害到虚拟机自身安全。</li><li>主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ul></li><li>准备（Prepare）：<ul><li>为类变量分配内存并设置该变量的默认初始值，即零值。例如：int类型为0。</li><li>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化</li><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中</li></ul></li><li>解析（Resolve）：<ul><li>将常量池内的符号引用转换为直接引用的过程，一般在初始化之后再执行</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info，CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</li></ul></li></ul><h3 id="2-2-3、初始化阶段"><a href="#2-2-3、初始化阶段" class="headerlink" title="2.2.3、初始化阶段"></a>2.2.3、初始化阶段</h3><ul><li><strong>初始化阶段就是执行类构造方法<code>&lt;clinit&gt;()</code>的过程</strong></li><li>此方法不需要定义，是javac编译器自动收集类中的所有类变量(静态变量)的赋值动作和静态代码块中的语句合并而来的。（如果没有静态变量赋值动作或静态代码就没有<code>&lt;clinit&gt;()</code>方法） <strong>必须要有静态变量赋值动作或者静态代码块</strong></li><li>构造器方法中指令按照语句<strong>在源文件中出现的顺序</strong>执行。</li><li><strong><code>&lt;clinit&gt;()</code>不同于类的构造器。</strong>（关联：构造器是虚拟机视角下的<code>&lt;init&gt;()</code>）</li><li>若该类有父类，JVM会保证子类的<code>&lt;clinit&gt;()</code>执行前，父类的<code>&lt;clinit&gt;()</code>已经执行完毕</li><li>虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程下被同步加锁。一个类只会被加载一次</li></ul><p><img src="/2022/05/08/JVM/image-20220511215809705.png"></p><h2 id="2-3、类加载器分类"><a href="#2-3、类加载器分类" class="headerlink" title="2.3、类加载器分类"></a>2.3、类加载器分类</h2><p>JVM支持两种类型的类加载器。分别为<strong>引导类加载器（Bootstrap ClassLoader）和自定义加载器（User-Defined ClassLoader）。</strong></p><p>自定义类加载器一般是指程序员中有开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<strong>将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。</strong></p><p>无论类加载器如何划分，在程序中我们最常见的类加载器只有三种：<strong>引导类加载器，扩展类加载器(Extension Class Loader)，系统类加载器(应用程序类加载器)(System Class Loader)</strong></p><div class="note note-success">            <p>因为扩展类加载器和系统类加载器可以理解为都间接继承于(不是)引导类加载器（其实是逻辑上的上下层关系），根据Java虚拟机规范，他们两个属于自定义类加载器，所以还是两种</p>          </div><p><img src="/2022/05/08/JVM/image-20220511230531390.png" alt="类加载器的分类"></p><p><strong>启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p><ul><li>这个类加载<strong>使用C/C++语言实现的</strong>，嵌套在JVM内部。</li><li>它用来<strong>加载Java的核心库</strong>（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类</li><li>并不继承自Java.lang.ClassLoader，<strong>没有父加载器。（因为他是c写的所以不存在这些）</strong></li><li><strong>加载扩展类和应用程序类加载器</strong>，并指定为他们的父类加载器。</li><li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</li></ul><p><strong>扩展类加载器（Extension ClassLoader）</strong></p><ul><li><strong>Java语言编写</strong>，由sun.misc.Launcher$ExtClassLoader实现。</li><li><strong>派生于ClassLoader类</strong></li><li>父类加载器为启动类加载器</li><li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/1ib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</li></ul><p><strong>应用程序类加载器（系统类加载器，AppClassLoader）</strong></p><ul><li>java语言编写，由sun.misc.LaunchersAppClassLoader实现</li><li>派生于ClassLoader类</li><li>父类加载器为扩展类加载器</li><li>它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</li><li><strong>该类加载是程序中默认的类加载器</strong>，一般来说，Java应用的类都是由它来完成加载</li><li>通过ClassLoader#getSystemclassLoader() 方法可以获取到该类加载器</li></ul><div class="note note-success">            <p>1、类加载器我们不能直接获取到，用C/C++实现</p><p>2、扩展类加载器，扩展类加载器，应用程序加载器与用户自定义加载器用java实现，之间存在getParent()关系，不存在继承关系</p>          </div><p><strong>用户自定义类加载器</strong></p><p>为什么需要自定义类加载器</p><ul><li>隔离加载类</li><li>修改类加载的方式</li><li>扩展加载源</li><li>防止源码泄露</li></ul><p>用户自定义类加载器的实现步骤</p><ol><li>开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求</li><li>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass() 方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadclass() 方法，而是建议把自定义的类加载逻辑写在findClass()方法中</li><li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass() 方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li></ol><h2 id="2-4、ClassLoader类"><a href="#2-4、ClassLoader类" class="headerlink" title="2.4、ClassLoader类"></a>2.4、ClassLoader类</h2><p>ClassLoader类是一个抽象类，其后<strong>所有的类加载器都继承自ClassLoader</strong>（不包括启动类加载器）不包含启动类加载器，因为启动类加载器是由C++编写的)</p><p><img src="/2022/05/08/JVM/image-20220512010030997.png" alt="CLassLoader类的方法"></p><p>获取ClassLoader的途径</p><p>● 方式一：获取当前ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">clazz.getClassLoader()<br></code></pre></td></tr></table></figure><p>● 方式二：获取当前线程上下文的ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.currentThread().getContextClassLoader()<br></code></pre></td></tr></table></figure><p>● 方式三：获取系统的ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassLoader.getSystemClassLoader()<br></code></pre></td></tr></table></figure><p>● 方式四：获取调用者的ClassLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">DriverManager.getCallerClassLoader()<br></code></pre></td></tr></table></figure><h2 id="2-5、双亲委派机制"><a href="#2-5、双亲委派机制" class="headerlink" title="2.5、双亲委派机制"></a>2.5、双亲委派机制</h2><p>Java虚拟机对class文件采用的是<strong>按需加载</strong>的方式，。而且加载某个类的class文件时，Java虚拟机采用的是<strong>双亲委派模式</strong>，即把请求交由父类处理，它是一种任务委派模式。</p><p>原理:</p><ol><li>如果一个类加载器收到了类加载请求，他并不会自己先去加载，而是把这个请求委托给父类的加载器执行</li><li>如果父类加载器还存在其他父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器</li><li>如果父类加载器可以完成类加载任务，就成功返回，反之子加载器才会尝试自己去加载</li></ol><p><img src="/2022/05/08/JVM/image-20220512012002912.png" alt="原理"></p><p>例如用户自定义了一个java.lang.String类，在加载的时候，虚拟机就会把这个请求委托给父类执行，可以防止恶意用户篡改核心api；也可以避免类重复加载</p><p><strong>优势：</strong></p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心API被随意篡改</li></ul><h2 id="2-6、沙箱安全机制"><a href="#2-6、沙箱安全机制" class="headerlink" title="2.6、沙箱安全机制"></a>2.6、沙箱安全机制</h2><p>沙箱是一个限制程序运行的环境，他会将java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统的资源访问，包括<strong>cpu,内存，文件系统，网络</strong>，不同级别的沙箱对这些资源的访问的限制也可以不一样。</p><p>在java中将执行程序分为本地代码和远程代码两种，本地代码默认可信任，可访问本地一切自有，远程代码默认不可信，用户可以指定远程代码的权限</p><p>就是说，我们把最重要的东西放在一个盒子里，别的恶意代码无法进入，这样子就保证他的安全性。</p><p><strong>组成沙箱的基本条件:</strong></p><p>1.字节码校验器:确保Java类文件遵循Java语言规范,但核心类通不过字节码校验</p><p> 2.类装载器:可以防止恶意代码去干涉善意代码，守护了被信任的类库边界，将代码归入保护 域，确定了代码可以进行那些操作</p><p>虚拟机为不同的类加载器载入得类提供不同的命名空间，相互之间不可见。</p><h2 id="2-7、其他"><a href="#2-7、其他" class="headerlink" title="2.7、其他"></a>2.7、其他</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、JVM概述&quot;&gt;&lt;a href=&quot;#一、JVM概述&quot; class=&quot;headerlink&quot; title=&quot;一、JVM概述&quot;&gt;&lt;/a&gt;一、JVM概述&lt;/h1&gt;&lt;h2 id=&quot;1-1、Java虚拟机&quot;&gt;&lt;a href=&quot;#1-1、Java虚拟机&quot; class=&quot;he</summary>
      
    
    
    
    <category term="JVM" scheme="https://eliseo.top/categories/JVM/"/>
    
    
    <category term="JVM" scheme="https://eliseo.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>圆圈中最后剩下的数字</title>
    <link href="https://eliseo.top/2022/05/07/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://eliseo.top/2022/05/07/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-05-07T03:00:39.000Z</published>
    <updated>2022-05-18T01:27:54.158Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/07/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/image-20220507154914849.png" alt="圆圈中最后剩下的数字"></p><p><strong>解题思路：</strong></p><p>实际上是<strong>约瑟夫环</strong><a href="https://blog.csdn.net/u011500062/article/details/72855826"> 约瑟夫环——公式法（递推公式）</a></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lastRemaining</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 最后一轮剩下2个人，所以从2开始反推</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            ans = (ans + m) % i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/07/%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/image-20220507154914849.</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>和为s的连续正数序列</title>
    <link href="https://eliseo.top/2022/05/07/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
    <id>https://eliseo.top/2022/05/07/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</id>
    <published>2022-05-07T02:25:00.000Z</published>
    <updated>2022-05-18T01:27:48.770Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/07/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/image-20220507102513722.png" alt="和为s的连续正数序列"></p><p><strong>解法一：(双指针)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] findContinuousSequence(<span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-comment">// 定义左指针，右指针与左右指针之间的数字的和</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">3</span>;<br>        <span class="hljs-comment">// 定义结果数组集合</span><br>        ArrayList&lt;<span class="hljs-keyword">int</span>[]&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">if</span> (sum == target) &#123;<br>                <span class="hljs-comment">// 遍历 sum == target的时候的i与j之间的元素</span><br>                <span class="hljs-comment">// 并把这些元素添加到res集合中</span><br>                <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[j - i + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= j; k++) &#123;<br>                    ans[k - i] = k;<br>                &#125;<br>                res.add(ans);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (sum &gt;= target) &#123;<br>                sum -= i;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j++;<br>                sum += j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>][]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/07/%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/image-20220507102513722.png&quot; alt</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>剪绳子</title>
    <link href="https://eliseo.top/2022/05/06/%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
    <id>https://eliseo.top/2022/05/06/%E5%89%AA%E7%BB%B3%E5%AD%90/</id>
    <published>2022-05-06T12:07:23.000Z</published>
    <updated>2022-05-18T01:32:28.786Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/06/%E5%89%AA%E7%BB%B3%E5%AD%90/image-20220506200733812.png" alt="剪绳子"></p><p><strong>解法一：(贪心算法)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cuttingRope</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// 最优 一根绳子完美的切成多个3 n % 3 == 0</span><br>        <span class="hljs-comment">// 次优 一根绳子切成 多个3与一个2 n % 3 == 2</span><br>        <span class="hljs-comment">// 最差 一根绳子除以3 余数为1 那么一个切法变成 1*3 =&gt; 2*2 n % 3 == 1</span><br>        <span class="hljs-comment">// 3 * 1 &lt; 2 * 2</span><br>        <span class="hljs-comment">// 3是最优的 优先考虑3</span><br><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断 n 能被几个3整除</span><br>        <span class="hljs-keyword">int</span> a = n / <span class="hljs-number">3</span>;<br>        <span class="hljs-comment">// n 除以三的余数</span><br>        <span class="hljs-keyword">int</span> b = n % <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) Math.pow(<span class="hljs-number">3</span>, a);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) Math.pow(<span class="hljs-number">3</span>, a - <span class="hljs-number">1</span>) * <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) (Math.pow(<span class="hljs-number">3</span>, a) * <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        对于 8 而言</span><br><span class="hljs-comment">        1、8 / 3 = 2</span><br><span class="hljs-comment">        2、8 % 3 = 2</span><br><span class="hljs-comment">        b == 2 所以为 3的二次方*2 也就是 2*3*3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        对于 6 而言</span><br><span class="hljs-comment">        1、6 / 3 = 2</span><br><span class="hljs-comment">        2、6 % 3 = 0</span><br><span class="hljs-comment">        b == 0 所以 3的二次方 也就是 3*3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        对于7而言</span><br><span class="hljs-comment">        1、7 / 3 = 2</span><br><span class="hljs-comment">        2、7 % 3 = 1</span><br><span class="hljs-comment">        b == 1 所以 3的一次方 也就是 3 * 4</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/06/%E5%89%AA%E7%BB%B3%E5%AD%90/image-20220506200733812.png&quot; alt=&quot;剪绳子&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法一：(贪心算法)&lt;/strong&gt;&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>构建乘积数组</title>
    <link href="https://eliseo.top/2022/05/06/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/"/>
    <id>https://eliseo.top/2022/05/06/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</id>
    <published>2022-05-06T02:30:26.000Z</published>
    <updated>2022-05-18T01:29:41.650Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/06/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/image-20220506103032263.png" alt="构建乘积数组"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] constructArr(<span class="hljs-keyword">int</span>[] a) &#123;<br>        <span class="hljs-keyword">int</span> len = a.length;<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br>        b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">1</span>; <span class="hljs-comment">// 上三角的乘</span><br>        <span class="hljs-comment">// 计算上三角</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br>            b[i] = b[i - <span class="hljs-number">1</span>] * a[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">// 计算下三角</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            tmp *= a[i + <span class="hljs-number">1</span>];<br>            b[i] *= tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/06/%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/image-20220506103032263.png&quot; alt=&quot;构建乘积数组&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数组中出现次数超过一半的数字</title>
    <link href="https://eliseo.top/2022/05/06/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://eliseo.top/2022/05/06/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-05-06T01:59:23.000Z</published>
    <updated>2022-05-18T01:29:14.191Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/06/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/image-20220506100232721.png" alt="数组中出现次数超过一半的数字"></p><p><strong>解法一：排序求中点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">return</span> nums[nums.length/<span class="hljs-number">2</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二：摩尔投票法</strong></p><p><strong>摩尔投票法：</strong> 核心理念为 <strong>票数正负抵消</strong> 。此方法时间和空间复杂度分别为 O(N)<em>O</em>(<em>N</em>) 和 O(1)<em>O</em>(1) </p><p>玩一个诸侯争霸的游戏，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利。 核心就是 <strong>对拼消耗</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            <br>            <span class="hljs-keyword">if</span> (sum == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//上场</span><br>                res = num;<br>            &#125;<br>            <span class="hljs-comment">//如果这个人上场，已经有人了，判断这个人是不是一个国家的</span><br>            <span class="hljs-comment">//是的话就站在一起</span><br>            <span class="hljs-keyword">if</span> (num == res) &#123;<br>                sum++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//不是则和一个同归于尽</span><br>                sum--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//最后上场已无敌军</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/06/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数组中数字出现的次数Ⅱ</title>
    <link href="https://eliseo.top/2022/05/05/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E2%85%A1/"/>
    <id>https://eliseo.top/2022/05/05/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E2%85%A1/</id>
    <published>2022-05-05T15:51:36.000Z</published>
    <updated>2022-05-18T01:29:18.905Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/05/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E2%85%A1/image-20220505235148555.png" alt="数组中数字出现的次数Ⅱ"></p><p><strong>解法一：哈希表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-comment">// 哈希表</span><br>        HashMap&lt;Integer, Boolean&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">// 第一次存进去的数字只出现了一次，所以为false，第二次出现以及以后再出现就是true，所以只出现一次的为false</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            map.put(num, map.containsKey(num));<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (!map.get(num)) &#123;<br>                res = num;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二：位运算</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-comment">// 位运算</span><br>        <br>        <span class="hljs-comment">// counts 是nums数组中每一个数字转换为二进制之后所在地方有几个1</span><br>        <span class="hljs-keyword">int</span>[] counts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">32</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">32</span>; j++) &#123;<br>                counts[j] += num &amp; <span class="hljs-number">1</span>;<br>                num &gt;&gt;&gt;= <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 从nums的第一个数字开始 每遍历一次 num往右移一位</span><br>                <span class="hljs-comment">// 也就是说num从最后一位开始往左判断每一位的1的个数</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            res &lt;&lt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 从高位开始对3取余 与 res进行或运算 有1就 res的当前位的二进制变为1</span><br>            <span class="hljs-comment">// 然后res左移开始判断次高位</span><br>            res |= counts[<span class="hljs-number">31</span>-i] % <span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/05/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%E2%85%A1/image-202205052</summary>
      
    
    
    
    <category term="算法题" scheme="https://eliseo.top/categories/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="https://eliseo.top/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
