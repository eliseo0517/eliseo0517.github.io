<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eliseo的小屋</title>
  
  
  <link href="https://eliseo.top/atom.xml" rel="self"/>
  
  <link href="https://eliseo.top/"/>
  <updated>2022-05-29T03:07:55.374Z</updated>
  <id>https://eliseo.top/</id>
  
  <author>
    <name>Mr.Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电话号码的字母组合</title>
    <link href="https://eliseo.top/2022/05/29/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>https://eliseo.top/2022/05/29/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2022-05-29T03:02:07.000Z</published>
    <updated>2022-05-29T03:07:55.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/29/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/image-20220529110449581.png" alt="电话号码的字母组合"></p><p><strong>解法：(回溯)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-comment">//设置全局列表存储最后的结果</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">letterCombinations</span><span class="hljs-params">(String digits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (digits == <span class="hljs-literal">null</span> || digits.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-comment">//初始对应所有的数字，为了直接对应2-9，新增了两个无效的字符串&quot;&quot;</span><br>        String[] numString = &#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>, <span class="hljs-string">&quot;pqrs&quot;</span>, <span class="hljs-string">&quot;tuv&quot;</span>, <span class="hljs-string">&quot;wxyz&quot;</span>&#125;;<br>        <span class="hljs-comment">//迭代处理</span><br>        backTracking(digits, numString, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> list;<br><br>    &#125;<br><br>    <span class="hljs-comment">//每次迭代获取一个字符串，所以会设计大量的字符串拼接，所以这里选择更为高效的 StringBuild</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>    <span class="hljs-comment">//比如digits如果为&quot;23&quot;,num 为0，则str表示2对应的 abc</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backTracking</span><span class="hljs-params">(String digits, String[] numString, <span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-comment">//遍历全部一次记录一次得到的字符串</span><br>        <span class="hljs-comment">//用num记录每次遍历到字符串的位置，这样性能更好</span><br>        <span class="hljs-keyword">if</span> (num == digits.length()) &#123;<br>            list.add(temp.toString());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//str 表示当前num对应的字符串 </span><br>        <span class="hljs-comment">//digits.charAt(num) 获取当前num位置的字符</span><br>        <span class="hljs-comment">//由于numString表是从0下标开始一直到9 所以 -&#x27;0&#x27;之后就可以得到对应的数组的下标位置</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> numString[digits.charAt(num) - <span class="hljs-string">&#x27;0&#x27;</span>];<br>        <span class="hljs-comment">//遍历字符串</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            temp.append(str.charAt(i));<br>            <span class="hljs-comment">//回溯</span><br>            backTracking(digits, numString, num + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//剔除末尾的继续尝试</span><br>            temp.deleteCharAt(temp.length() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/29/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/image-20220529110449581.png&quot; alt=</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>Mysql</title>
    <link href="https://eliseo.top/2022/05/28/Mysql/"/>
    <id>https://eliseo.top/2022/05/28/Mysql/</id>
    <published>2022-05-28T01:35:45.000Z</published>
    <updated>2022-05-30T12:48:24.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、mysql基础篇"><a href="#一、mysql基础篇" class="headerlink" title="一、mysql基础篇"></a>一、mysql基础篇</h1><p><strong>一些不怎么用过的mysql语句：</strong></p><p><strong>rank() over：</strong>排名相同的两名是并列，但是占两个名次，1 1 3 4 4 6这种</p><p><strong>dense_rank() over：</strong>排名相同的两名是并列，共占一个名词，1 1 2 3 3 4这种</p><p><strong>row_number() over：</strong>这个函数不需要考虑是否并列，哪怕根据条件查询出来的数值相同也会进行连续排名 1 2 3 4 5</p><p><strong>distance</strong> 去重</p><p><strong>ifnull</strong> 判断是否为空 自动去除空的数据 ifnull(( ***),null) 将表中的空数据输出为null</p><h1 id="二、mysql高级篇"><a href="#二、mysql高级篇" class="headerlink" title="二、mysql高级篇"></a>二、mysql高级篇</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、mysql基础篇&quot;&gt;&lt;a href=&quot;#一、mysql基础篇&quot; class=&quot;headerlink&quot; title=&quot;一、mysql基础篇&quot;&gt;&lt;/a&gt;一、mysql基础篇&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;一些不怎么用过的mysql语句：&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="https://eliseo.top/2022/05/27/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://eliseo.top/2022/05/27/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2022-05-27T07:01:31.000Z</published>
    <updated>2022-05-27T07:04:06.941Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/27/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/image-20220527150203332.png" alt="三数之和"></p><p><strong>解法：（排序+双指针）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">// 先从小到大排序</span><br>        Arrays.sort(nums);<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 从第一位开始判断</span><br>        <span class="hljs-comment">// k &lt; nums.length - 2是为了保证后面还能存在两个数字</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; nums.length - <span class="hljs-number">2</span>; k++) &#123;<br>            <span class="hljs-comment">// 若nums[k]大于0，则后面的数字也是大于零（排序后是递增的）</span><br>            <span class="hljs-keyword">if</span> (nums[k] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 去重</span><br>            <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span> &amp;&amp; nums[k] == nums[k - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 判断该数字的下一个数字与最后一个数字</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k + <span class="hljs-number">1</span>, j = nums.length - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>                <span class="hljs-comment">// 如果该数字与数字下一个数字与最后一个数字之和为sum 那么输出</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[k] + nums[i] + nums[j];<br>                <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 左指针向右并且去重</span><br>                    <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i] == nums[++i]);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 右指针向左并且去重</span><br>                    <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j] == nums[--j]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(nums[k], nums[i], nums[j])));<br>                    <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[i] == nums[++i]);<br>                    <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; nums[j] == nums[--j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/27/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/image-20220527150203332.png&quot; alt=&quot;三数之和&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：（排序+双指针）&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>盛最多水的容器</title>
    <link href="https://eliseo.top/2022/05/26/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://eliseo.top/2022/05/26/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2022-05-26T01:28:43.000Z</published>
    <updated>2022-05-26T01:29:54.877Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/26/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/image-20220526092922227.png" alt="盛最多水的容器"></p><p><strong>解法：（双指针）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> height.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span> || height == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nowRes</span> <span class="hljs-operator">=</span> (right - left) * Math.min(height[left], height[right]);<br>            res = Math.max(res, nowRes);<br>            <span class="hljs-keyword">if</span> (height[left] &gt; height[right]) &#123;<br>                right--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/26/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/image-20220526092922227.png&quot; alt=&quot;盛最多水的容器&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="https://eliseo.top/2022/05/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://eliseo.top/2022/05/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2022-05-25T02:15:06.000Z</published>
    <updated>2022-05-25T02:39:44.941Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/image-20220525103931088.png" alt="最长回文子串"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                                        中心扩散</span><br><span class="hljs-comment">    思路：寻找一个字符 然后判断左右是否相等 相等则左右各自+1 如果左边等于 那么左边指针往左移动</span><br><span class="hljs-comment">    右边等于 那么右指针往右边 然后判断左右指针所指的字符是否相等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">char</span>[] chars = s.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxlen</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            left = i - <span class="hljs-number">1</span>;<br>            right = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nowlen</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//当前值与左值相等 左减</span><br>            <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; len &amp;&amp; chars[i] == chars[left]) &#123;<br>                left--;<br>                nowlen++;<br>            &#125;<br>            <span class="hljs-comment">//当前值与右值相等 左加</span><br>            <span class="hljs-keyword">while</span> (right &lt; len &amp;&amp; chars[i] == chars[right]) &#123;<br>                right++;<br>                nowlen++;<br>            &#125;<br>            <span class="hljs-comment">//当左右相等时，左减右加</span><br>            <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; len &amp;&amp; chars[left] == chars[right]) &#123;<br>                left--;<br>                right++;<br>                nowlen += <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (nowlen &gt; maxlen) &#123;<br>                maxlen = nowlen;<br>                start = left;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">maxstr</span> <span class="hljs-operator">=</span> s.substring(start + <span class="hljs-number">1</span>,start + <span class="hljs-number">1</span> + maxlen);<br>        <span class="hljs-keyword">return</span> maxstr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/image-20220525103931088.png&quot; alt=&quot;最长回文子串&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>寻找两个正序数组的中位数</title>
    <link href="https://eliseo.top/2022/05/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</id>
    <published>2022-05-24T02:32:35.000Z</published>
    <updated>2022-05-25T02:43:05.920Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/image-20220524103718735.png" alt="寻找两个正序数组的中位数"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     思路：</span><br><span class="hljs-comment">        1、假设我们要找第 k 小数，我们可以每次循环排除掉 k/2 个数，假如我们要找第7小的数字，我们比较两个数组的第 k/2 个数字，</span><br><span class="hljs-comment">        如果 k 是奇数，向下取整。也就是比较第3个数字，上边数组中的4和下边数组中的3，</span><br><span class="hljs-comment">        如果哪个小，就表明该数组的前 k/2 个数字都不是第 k 小数字，所以可以排除。</span><br><span class="hljs-comment">        然后我们寻找第k - 3 = 4小的数字就行</span><br><span class="hljs-comment">        2、我们可能遇见有一个数组小于 k/2的情况 然后将这个小于的数组直接全部排除 然后在另一个数组中寻找第 k-m个元素即可</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums2.length;<br>        <span class="hljs-comment">// m + n为奇数 那么a和b一样 如果 m + n为偶数 那么就是ab的平均数</span><br>        <span class="hljs-comment">// 由于要求的是如果为奇数 让左边的数字比右边多一个</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (m + n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (m + n + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 寻找ab在nums1与nums2中的位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">resa</span> <span class="hljs-operator">=</span> rec(nums1, <span class="hljs-number">0</span>, nums2, <span class="hljs-number">0</span>, a);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resb</span> <span class="hljs-operator">=</span> rec(nums1, <span class="hljs-number">0</span>, nums2, <span class="hljs-number">0</span>, b);<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) (resa + resb) / <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//两个数组及其起始位置，k为要找的数字的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rec</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-comment">//如果i位置大于等于长度，说明nums1走完了，就去nums2里直接找</span><br>        <span class="hljs-keyword">if</span> (i &gt;= nums1.length) &#123;<br>            <span class="hljs-keyword">return</span> nums2[j + k - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (j &gt;= nums2.length) &#123;<br>            <span class="hljs-keyword">return</span> nums1[i + k - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">//如果要找第一个元素，那么就找这两个数组中最小的数,也就是他们起始位置中最小的</span><br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> Math.min(nums1[i], nums2[j]);<br>        &#125;<br><br>        <span class="hljs-comment">//确保还有第k/2个值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> (i + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; nums1.length) ? nums1[i + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] : Integer.MAX_VALUE;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> (j + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; nums2.length) ? nums2[j + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] : Integer.MAX_VALUE;<br><br>        <span class="hljs-comment">//如果两个数组中的第k/2相等  如果k是偶数，那么这个位置的数字就是要找的，无论舍弃哪个都会留下有正确答案的,如果是奇数，答案在某个数组的k/2的下一个，总之正确答案不会被舍弃掉</span><br>        <span class="hljs-keyword">if</span> (m1 == m2 &amp;&amp; k % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> m1;<br>        &#125;<br>        <span class="hljs-comment">//两个数组中谁的第k/2个数小，就舍弃他的前k/2个数，k也小一半</span><br>        <span class="hljs-keyword">if</span> (m1 &lt; m2) &#123;<br>            i += k / <span class="hljs-number">2</span>;<br>            k -= k / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> rec(nums1, i, nums2, j, k);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            j += k / <span class="hljs-number">2</span>;<br>            k -= k / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> rec(nums1, i, nums2, j, k);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/image-</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>无重复字符的最长子串</title>
    <link href="https://eliseo.top/2022/05/24/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>https://eliseo.top/2022/05/24/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</id>
    <published>2022-05-24T02:30:18.000Z</published>
    <updated>2022-05-25T02:40:07.058Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/24/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/image-20220524104149607.png" alt="无重复字符的最长子串"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">// 哈希集合，记录每个字符是否出现过</span><br>        Set&lt;Character&gt; occ = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Character&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-comment">// 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 左指针向右移动一格，移除一个字符</span><br>                occ.remove(s.charAt(i - <span class="hljs-number">1</span>));<br>            &#125;<br>            <span class="hljs-keyword">while</span> (r + <span class="hljs-number">1</span> &lt; n &amp;&amp; !occ.contains(s.charAt(r + <span class="hljs-number">1</span>))) &#123;<br>                <span class="hljs-comment">// 不断地移动右指针</span><br>                occ.add(s.charAt(r + <span class="hljs-number">1</span>));<br>                ++r;<br>            &#125;<br>            <span class="hljs-comment">// 第 i 到 r 个字符是一个极长的无重复字符子串</span><br>            ans = Math.max(ans, r - i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/24/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/image-20220524104149607.</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>两数相加</title>
    <link href="https://eliseo.top/2022/05/24/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://eliseo.top/2022/05/24/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2022-05-24T02:29:08.000Z</published>
    <updated>2022-05-25T02:40:18.840Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/24/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/image-20220524104020123.png" alt="两数相加"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> res;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-comment">// carry 是否要进位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">carry</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//如果l1 l2有一个为0但carry不为零，就只需要加剩余的一个</span><br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">null</span> || l2 != <span class="hljs-literal">null</span>||carry != <span class="hljs-number">0</span> ) &#123;<br>            <span class="hljs-keyword">if</span>(l1 != <span class="hljs-literal">null</span>) &#123;<br>                carry += l1.val;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2 != <span class="hljs-literal">null</span>) &#123;<br>                carry += l2.val;<br>                l2 = l2.next;<br>            &#125;<br>            <span class="hljs-comment">//例如刚开始是9+9   carry就等于18  l3这一位就等于8，</span><br>            l3.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(carry%<span class="hljs-number">10</span>);<br>            l3 = l3.next;<br>            <span class="hljs-comment">//carry除以10之后带到下一位  例如18，就会把1带到下一位</span><br>            carry /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/24/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/image-20220524104020123.png&quot; alt=&quot;两数相加&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>两数之和</title>
    <link href="https://eliseo.top/2022/05/24/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://eliseo.top/2022/05/24/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2022-05-24T02:28:28.000Z</published>
    <updated>2022-05-25T02:41:02.238Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/24/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/image-20220524103848060.png" alt="两数之和"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/24/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/image-20220524103848060.png&quot; alt=&quot;两数之和&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>数字序列中某一位的数字</title>
    <link href="https://eliseo.top/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://eliseo.top/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-05-18T03:34:04.000Z</published>
    <updated>2022-05-25T02:44:00.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/image-20220518113457587.png" alt="数字序列中某一位的数字"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findNthDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 前十位每个占一格  总共有10个位子除去0还有9个</span><br>        <span class="hljs-comment">// 10-99 占2格      总共有90 * 2 = 180个位子</span><br>        <span class="hljs-comment">// 100 -999 占3格   总共有 900 * 3 = 2700个位子</span><br>        <span class="hljs-comment">// 所以知道n可以知道是几位数，第几个</span><br><br>        <span class="hljs-comment">//占了几位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">digit</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//在第几个数字中</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//目前占了多少个数字。因为n&lt; 2e31,所以count是可能越int的</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br>        <span class="hljs-comment">//例如1，10，100，1000</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (n &gt; count) &#123;<br><br>            n -= count;<br><br>            digit++;<br><br>            start *= <span class="hljs-number">10</span>;<br><br>            count = digit * start * <span class="hljs-number">9</span>;<br><br>        &#125;<br>        <span class="hljs-comment">//在第res个数字中</span><br>        res = start + (n - <span class="hljs-number">1</span>)/digit;<br><br>        <span class="hljs-comment">//这个数的第几位</span><br>        <span class="hljs-keyword">return</span> Long.toString(res).charAt((n - <span class="hljs-number">1</span>) % digit) - <span class="hljs-string">&#x27;0&#x27;</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/18/%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/image-202205181</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>1~n整数中1出现的次数</title>
    <link href="https://eliseo.top/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</id>
    <published>2022-05-18T02:25:38.000Z</published>
    <updated>2022-05-25T02:40:33.143Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/image-20220518102620979.png" alt="1~n整数中1出现的次数"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 对于这道题而言 1出现的个数取决于 1在每一位上出现的次数</span><br>    <span class="hljs-comment">// 当前位为0的时候 1出现的次数由高位决定 也就是 res = 高位 * 10</span><br>    <span class="hljs-comment">// 当前位为1的时候 1出现的次数由高位与低位决定 也就是 res = 高位 * 10 + 低位 + 1</span><br>    <span class="hljs-comment">// 当前位为2~9的时候 1出现的次数由高位决定 也就是 res = (高位 + 1) * 10</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countDigitOne</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 高位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 当前位,从个位开始</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> n % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">// 低位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 位因子</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">digit</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (high != <span class="hljs-number">0</span> || cur != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当高位与当前位有一个不是0的时候</span><br>            <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 高位 * 位因子</span><br>                res += high * digit;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>) &#123;<br>                res += high * digit + low + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                res +=(high + <span class="hljs-number">1</span>) * digit;<br>            &#125;<br>            <span class="hljs-comment">// 更新low  cur  hight  dight</span><br>            low +=cur * digit;<br>            <span class="hljs-comment">// cur是high的最后一位</span><br>            cur = high % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 高位上升</span><br>            high /= <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">// 位因子乘10</span><br>            digit *= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/18/1-n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/image-20220518102620979.png&quot; alt=&quot;1~n整</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>剪绳子Ⅱ</title>
    <link href="https://eliseo.top/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/"/>
    <id>https://eliseo.top/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/</id>
    <published>2022-05-18T01:23:08.000Z</published>
    <updated>2022-05-25T02:42:22.213Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/image-20220518092413253.png" alt="剪绳子Ⅱ"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cuttingRope</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 由剪绳子Ⅰ可以得出 剪绳子剪成3的倍数 为最理想状态</span><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">4</span>) &#123;<br>            res = res * <span class="hljs-number">3</span> % p;<br>            n -= <span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-comment">// 乘3以后 将剩下的数字也乘进去</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (res * n % p);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/18/%E5%89%AA%E7%BB%B3%E5%AD%90%E2%85%A1/image-20220518092413253.png&quot; alt=&quot;剪绳子Ⅱ&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>数组中的逆序对</title>
    <link href="https://eliseo.top/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    <id>https://eliseo.top/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</id>
    <published>2022-05-17T07:49:53.000Z</published>
    <updated>2022-05-25T02:44:52.709Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/image-20220517155231958.png" alt="数组中的逆序对"></p><p><strong>解法一：</strong></p><p>暴力递归（双指针一个一个进行比较，发现符合的情况则res++），题目所给的数组长度在0~500之间，暴力递归会出现超时</p><p><strong>解法二：归并排序的时候进行对逆序对的统计</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span>[] nums, tmp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">reversePairs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nums = nums;<br>        tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">return</span> mergeSort(<span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-comment">// 终止条件</span><br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 递归划分</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mergeSort(l, m) + mergeSort(m + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-comment">// 合并阶段</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l, j = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 在每次比较大小的时候顺便进行对逆序对的统计</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> l; k &lt;= r; k++)<br>            tmp[k] = nums[k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> l; k &lt;= r; k++) &#123;<br>            <span class="hljs-keyword">if</span> (i == m + <span class="hljs-number">1</span>)<br>                nums[k] = tmp[j++];<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == r + <span class="hljs-number">1</span> || tmp[i] &lt;= tmp[j])<br>                nums[k] = tmp[i++];<br>            <span class="hljs-keyword">else</span> &#123;<br>                nums[k] = tmp[j++];<br>                res += m - i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 统计逆序对</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/17/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/image-20220517155231958.png&quot; alt=&quot;数组中的逆序对&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>打印从1到最大的n位数</title>
    <link href="https://eliseo.top/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</id>
    <published>2022-05-16T03:32:52.000Z</published>
    <updated>2022-05-25T02:43:19.961Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/image-20220516113408866.png" alt="打印从1到最大的n位数"></p><p><strong>解法一：（不考虑大数）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] printNumbers(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            max *= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[max - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; max; i++) &#123;<br>            res[i - <span class="hljs-number">1</span>] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二：（考虑大数）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>        <span class="hljs-type">int</span>[] res;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,nine = <span class="hljs-number">0</span>,start,n;<br>        <span class="hljs-type">char</span>[] a;<br>        <span class="hljs-type">char</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] printNumbers(<span class="hljs-type">int</span> n) &#123;<br>            <span class="hljs-built_in">this</span>.n = n;<br>            res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[(<span class="hljs-type">int</span>)Math.pow(<span class="hljs-number">10</span>,n) - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 数字字符串集</span><br>            a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n]; <span class="hljs-comment">// 定义长度为n的字符列表</span><br>            <span class="hljs-comment">//初始化start例如最大99，那么前十个的个位就不需要</span><br>            start = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 全排列</span><br>            dfs(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>            <span class="hljs-comment">// 终止条件：固定完所有的位</span><br>            <span class="hljs-keyword">if</span> (x == n) &#123;<br>                <span class="hljs-comment">// 截取</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> String.valueOf(a).substring(start);<br>                <span class="hljs-keyword">if</span> (!s.equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>                    <span class="hljs-comment">// num添加到res尾部用逗号隔开</span><br>                    <span class="hljs-comment">// res.append(s + &quot;,&quot;);</span><br>                    res[count++] = Integer.parseInt(s);<br>                &#125;<br>                <span class="hljs-comment">// 所有位都是9即要进位了 nine是9的数量</span><br>                <span class="hljs-keyword">if</span> (n - start == nine) &#123;<br>                    start--;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 每一位</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i : b) &#123;<br>                <span class="hljs-comment">// a[0]=0</span><br>                <span class="hljs-comment">// a[1]=0</span><br>                <span class="hljs-comment">// 固定的x位是i</span><br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>                    nine++;<br>                &#125;<br>                a[x] = i;<br>                <span class="hljs-comment">// 下一位固定</span><br>                dfs(x + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// nine恢复</span><br>            nine--;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/16/%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/image-20220516113408866.png&quot; al</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>n个骰子的点数</title>
    <link href="https://eliseo.top/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</id>
    <published>2022-05-15T03:09:02.000Z</published>
    <updated>2022-05-25T02:40:40.039Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/image-20220515110935835.png" alt="n个骰子的点数"></p><p><strong>解法一：（暴力递归）</strong></p><p>时间复杂度为O(6^n) <strong>超时</strong></p><p><strong>解法二：（动态规划）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] dicesProbability(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">double</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">6</span>];<br>    <span class="hljs-comment">// Arrays.fill() 将指定的值分配给指定数组的每个元素。</span><br>        Arrays.fill(dp, <span class="hljs-number">1.0</span> / <span class="hljs-number">6.0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-type">double</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// n-1个骰子的每一项都会对有n个骰子的点数和产生影响</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; dp.length; j++) &#123;<br>                <span class="hljs-comment">// 第n个骰子的1~6</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; k++) &#123;<br>                    <span class="hljs-comment">// 加上前do数组j值对应概率/6</span><br>                    tmp[j + k] += dp[j] * (<span class="hljs-number">1.0</span> / <span class="hljs-number">6.0</span>);<br>                &#125;<br>            &#125;<br>            dp = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/15/n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/image-20220515110935835.png&quot; alt=&quot;n个骰子的点数&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>丑数</title>
    <link href="https://eliseo.top/2022/05/15/%E4%B8%91%E6%95%B0/"/>
    <id>https://eliseo.top/2022/05/15/%E4%B8%91%E6%95%B0/</id>
    <published>2022-05-15T02:27:48.000Z</published>
    <updated>2022-05-25T02:40:50.934Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/15/%E4%B8%91%E6%95%B0/image-20220515102813385.png" alt="丑数"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 每一个丑数都是由他前面的某一个丑数*2 *3 *5得到的</span><br>        <span class="hljs-comment">// 所以我们只要求的前面的丑数*2 *3 *5之后的最小值就是这个丑数之后的下一个丑数的值</span><br>        <span class="hljs-comment">// n不超过1690</span><br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1690</span>];<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> dp[a] * <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> dp[b] * <span class="hljs-number">3</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n5</span> <span class="hljs-operator">=</span> dp[c] * <span class="hljs-number">5</span>;<br>            <span class="hljs-comment">// 得到最小的前面的丑数*2 *3 *5的值</span><br>            dp[i] = Math.min(Math.min(n2, n3), n5);<br>            <span class="hljs-keyword">if</span> (dp[i] == n2) &#123;<br>                <span class="hljs-comment">// 如果dp[i]是a*2得到，那么下一个需要*2得到的丑数就是a的下一个</span><br>                a++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == n3) &#123;<br>                b++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == n5) &#123;<br>                c++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/15/%E4%B8%91%E6%95%B0/image-20220515102813385.png&quot; alt=&quot;丑数&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式匹配</title>
    <link href="https://eliseo.top/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    <id>https://eliseo.top/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</id>
    <published>2022-05-14T08:39:24.000Z</published>
    <updated>2022-05-25T02:45:19.346Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/image-20220514164139599.png" alt="正则表达式匹配"></p><p><strong>解法一：（暴力递归）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String s, String p)</span> &#123;<br>        <span class="hljs-comment">// a是题目所给的字符串</span><br>        <span class="hljs-type">char</span>[] a = s.toCharArray();<br>        <span class="hljs-comment">// b是正则表达式</span><br>        <span class="hljs-type">char</span>[] b = p.toCharArray();<br><br>        <span class="hljs-comment">// 如果字符串为空</span><br>        <span class="hljs-keyword">if</span> (a.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 那么正则表达式只能是偶数，而且最后一位只能 是&#x27;*&#x27;</span><br>            <span class="hljs-keyword">if</span> (!(b.length % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果是偶数，偶数位一位只能是&#x27;*&#x27;</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (i &lt; b.length) &#123;<br>                <span class="hljs-keyword">if</span> (b[i] != <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                i += <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果字符串不是空 但是正则表达式为0</span><br>        <span class="hljs-keyword">if</span> (b.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 定义两个变量负责用来遍历a，b内部的元素</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> a[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> b[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// c3 是指正则表达式中正在比较的字符的下一位</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;~&#x27;</span>;<br><br>        <span class="hljs-keyword">if</span> (b.length &gt; <span class="hljs-number">1</span>) &#123;<br>            c3 = b[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (c3 != <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (c1 == c2 || c2 == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 匹配</span><br>                <span class="hljs-keyword">return</span> isMatch(s.substring(<span class="hljs-number">1</span>), p.substring(<span class="hljs-number">1</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 下一位是&#x27;*&#x27;</span><br>            <span class="hljs-keyword">if</span> (c1 == c2 || c2 == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> isMatch(s.substring(<span class="hljs-number">1</span>), p) || isMatch(s, p.substring(<span class="hljs-number">2</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> isMatch(s, p.substring(<span class="hljs-number">2</span>));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解法二：（动态规划）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(String s, String p)</span> &#123;<br>    <span class="hljs-type">char</span>[] a = s.toCharArray();<br>    <span class="hljs-type">char</span>[] b = p.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">alen</span> <span class="hljs-operator">=</span> a.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">blen</span> <span class="hljs-operator">=</span> b.length;<br><br>    <span class="hljs-type">boolean</span>[][] ism = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[alen + <span class="hljs-number">1</span>][blen + <span class="hljs-number">1</span>];<br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= alen; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= blen; j++) &#123;<br>            <span class="hljs-comment">//正则串为空。是否匹配取决于主串是否为空</span><br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>                ism[i][j] = i == <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//正则串本位不为*</span><br>                <span class="hljs-keyword">if</span> (b[j - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">1</span>] || b[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                        ism[i][j] = ism[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">2</span>) &#123;<br>                        <span class="hljs-comment">//如果不看，就砍掉</span><br>                        ism[i][j] = ism[i][j - <span class="hljs-number">2</span>];<br>                    &#125;<br>                    <span class="hljs-comment">//正则串本位为*    如果需要使用*</span><br>                    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">2</span> &amp;&amp; (a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">2</span>] || b[j - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)) &#123;<br>                        <span class="hljs-comment">//如果在前一步已经计算ism[i][j]是true，就不需要计算</span><br>                        ism[i][j] |= ism[i - <span class="hljs-number">1</span>][j] ;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ism[alen][blen];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p><img src="/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/68F4F9C9D81832F29A9D78CEA7E5AD59.png" alt="解题思路"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/14/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/image-20220514164139599.png&quot; alt=&quot;正则表达式匹配&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>字符串的排列</title>
    <link href="https://eliseo.top/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>https://eliseo.top/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</id>
    <published>2022-05-11T02:34:47.000Z</published>
    <updated>2022-05-25T02:43:00.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/image-20220511103629683.png" alt="字符串的排列"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br> List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> String[] permutation(String s) &#123;<br>        <span class="hljs-type">char</span>[] chars = s.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> chars.length;<br>        <span class="hljs-comment">//第二个参数为固定到了第几个数</span><br>        rec(chars,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// 交换数字的方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s, <span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> s[a];<br>        s[a] = s[b];<br>        s[b] = tmp;<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rec</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chars,<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-comment">//固定到了最后一个数</span><br>        <span class="hljs-keyword">if</span>(x == chars.length - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//最后一个数也只有一个排列,也说明固定完了</span><br>            res.add(String.valueOf(chars));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//去重</span><br>        Set&lt;Character&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x; i &lt; chars.length;i++) &#123;<br>            <span class="hljs-keyword">if</span>(set.contains(chars[i])) &#123;<br>                <span class="hljs-comment">//如果set中已经固定过这个数了,就进行下一个固定</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            set.add(chars[i]);<br>            <span class="hljs-comment">//交换当前数与固定到的最后一个数</span><br>            swap(chars,x,i);<br>            rec(chars,x + <span class="hljs-number">1</span>);<br>            swap(chars,i,x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/image-20220511103629683.png&quot; alt=&quot;字符串的排列&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>队列的最大值</title>
    <link href="https://eliseo.top/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://eliseo.top/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-05-10T03:18:01.000Z</published>
    <updated>2022-05-25T02:45:50.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220510111946329.png" alt="队列的最大值"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxQueue</span> &#123;<br><br>    <span class="hljs-comment">//普通队列</span><br>    Deque&lt;Integer&gt; queue;<br>    <span class="hljs-comment">//单调队列</span><br>    Deque&lt;Integer&gt; deque;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxQueue</span><span class="hljs-params">()</span> &#123;<br>        queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max_value</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (deque.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> deque.peekFirst();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-comment">// offer()方法用于在双端队列的末尾添加给定元素</span><br>        queue.offer(value);<br>        <span class="hljs-comment">// 保证单调队列的递减的</span><br>        <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; value) &#123;<br>            deque.removeLast();<br>        &#125;<br>        deque.addLast(value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop_front</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (queue.peek().equals(deque.peekFirst())) &#123;<br>            <span class="hljs-comment">// pollFirst() : 返回此双端队列表示的队列的第一个元素，但会从此双端队列中删除第一个元素。</span><br>            deque.pollFirst();<br>        &#125;<br>        <span class="hljs-keyword">return</span> queue.poll();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MaxQueue object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MaxQueue obj = new MaxQueue();</span><br><span class="hljs-comment"> * int param_1 = obj.max_value();</span><br><span class="hljs-comment"> * obj.push_back(value);</span><br><span class="hljs-comment"> * int param_3 = obj.pop_front();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220510111946329.png&quot; alt=&quot;队列的最大值&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口的最大值</title>
    <link href="https://eliseo.top/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://eliseo.top/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2022-05-09T02:37:48.000Z</published>
    <updated>2022-05-25T02:45:23.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220509104013577.png" alt="滑动窗口的最大值"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] maxSlidingWindow(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len - k + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span> || k == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> - k, j = <span class="hljs-number">0</span>; j &lt; len; j++, i++) &#123;<br>            <span class="hljs-comment">// deque.peekFirst() =&gt; 用于检索链表的第一个元素，初始元素或开始元素，但不会从列表中删除第一个元素。</span><br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; deque.peekFirst() == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                deque.removeFirst();<br>            &#125;<br>            <span class="hljs-comment">// 删除最大值左边的值，保证队列递减,那么就判断队列左边的值与新加入的元素的值的大小</span><br>            <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; nums[j]) &#123;<br>                <span class="hljs-comment">// deque.removeLast() =&gt; 用于返回最后一个元素，但要从此双端队列移除该元素</span><br>                deque.removeLast();<br>            &#125;<br>            deque.addLast(nums[j]);<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>                res[i] = deque.peekFirst();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/09/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/image-20220509104013577.png&quot; alt=&quot;滑动窗口的最大值</summary>
      
    
    
    
    <category term="力扣" scheme="https://eliseo.top/categories/%E5%8A%9B%E6%89%A3/"/>
    
    
    <category term="力扣" scheme="https://eliseo.top/tags/%E5%8A%9B%E6%89%A3/"/>
    
  </entry>
  
</feed>
