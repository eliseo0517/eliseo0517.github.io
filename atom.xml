<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eliseo的小屋</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-05T07:48:35.956Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mr.Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不用加减乘除做加法</title>
    <link href="http://example.com/2022/05/05/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/"/>
    <id>http://example.com/2022/05/05/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</id>
    <published>2022-05-05T07:47:03.000Z</published>
    <updated>2022-05-05T07:48:35.956Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/05/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/image-20220505154715941.png" alt="不用加减乘除做加法"></p><p><strong>题解：</strong></p><p><img src="/2022/05/05/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/image-20220505154830988.png" alt="题解1"></p><p><strong>解法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(b != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当进位为 0 时跳出</span><br>            <span class="hljs-keyword">int</span> c = (a &amp; b) &lt;&lt; <span class="hljs-number">1</span>;  <span class="hljs-comment">// c = 进位</span><br>            a ^= b; <span class="hljs-comment">// a = 非进位和</span><br>            b = c; <span class="hljs-comment">// b = 进位</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/05/%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/image-20220505154715941.png&quot; alt=</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>二进制中1的个数</title>
    <link href="http://example.com/2022/05/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://example.com/2022/05/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2022-05-05T07:36:31.000Z</published>
    <updated>2022-05-05T07:38:41.557Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/image-20220505153708668.png" alt="二进制中1的个数"></p><p>解法：（位运算）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">// you need to treat n as an unsigned value</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 判断最后一位是不是1</span><br>            res += n &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 无符号为右移</span><br>            n &gt;&gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/05/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/image-20220505153708668.png&quot; alt=&quot;二进制中1的个数&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的后序遍历序列</title>
    <link href="http://example.com/2022/05/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <id>http://example.com/2022/05/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</id>
    <published>2022-05-04T10:29:25.000Z</published>
    <updated>2022-05-04T10:30:42.526Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/image-20220504182947011.png" alt="image-20220504182947011"></p><p><strong>题解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifyPostorder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] postorder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> dfs(postorder, <span class="hljs-number">0</span>, postorder.length -<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历：左右头</span><br>    <span class="hljs-comment">// 二叉搜索树：左小于中 右大于中</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] postorder, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &gt;= right) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 从左区间开始</span><br>        <span class="hljs-keyword">int</span> p = left;<br>        <span class="hljs-comment">// 找到第一个大于头节点的值</span><br>        <span class="hljs-keyword">while</span> (postorder[p] &lt; postorder[right]) &#123;<br>            p++;<br>        &#125;<br>        <span class="hljs-comment">// 当前节点在postorder中的所在位置为头节点所在位置</span><br>        <span class="hljs-keyword">int</span> m = p;<br>        <span class="hljs-comment">// 找到右子树的最后一个值</span><br>        <span class="hljs-keyword">while</span> (postorder[p] &gt; postorder[right]) &#123;<br>            p++;<br>        &#125;<br>        <span class="hljs-comment">//     本树                   左树                                   右树</span><br>        <span class="hljs-keyword">return</span> p == right &amp;&amp; dfs(postorder,left,m-<span class="hljs-number">1</span>) &amp;&amp; dfs(postorder,m,right-<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/image-</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>数值的整数次方</title>
    <link href="http://example.com/2022/05/04/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <id>http://example.com/2022/05/04/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</id>
    <published>2022-05-04T08:43:41.000Z</published>
    <updated>2022-05-04T09:02:54.722Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/04/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/image-20220504165807196.png" alt="数值的整数次方"></p><p><strong>解法一：（暴力遍历）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">long</span> b = n;<br>        <span class="hljs-keyword">double</span> res = <span class="hljs-number">1.0</span>;<br>        <span class="hljs-keyword">if</span> (b &lt; <span class="hljs-number">0</span>) &#123;<br>            x = <span class="hljs-number">1</span>/x;<br>            b = -b;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; i++) &#123;<br>                res *= x; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结果发现当n太大的时候会出现超时现象</strong></p><p><strong>解法二：（快速幂）</strong></p><p><strong>解题思路：</strong></p><p>![解题思路](file:///C:\Users\TiAmo\Documents\Tencent Files\2519736098\Image\C2C\Image1\30B0C70FDFBE773FBAFAEE6CE9466E5C.png)</p><p><strong>为什么要使用快速幂法？</strong></p><p><strong>快速幂法</strong> 可将时间复杂度降低至O(log2n)以二为低n的对数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">long</span> b = n;<br>        <span class="hljs-keyword">double</span> res = <span class="hljs-number">1.0</span>;<br>        <span class="hljs-keyword">if</span> (b &lt; <span class="hljs-number">0</span>) &#123;<br>            x = <span class="hljs-number">1</span>/x;<br>            b = -b;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(b &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span>((b &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 说明n的二进制的最低位为1</span><br>                res *= x;<br>            &#125;<br>            x *= x;<br>            b &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">// 消去二进制的最低位</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/04/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/image-20220504165807196.png&quot; alt=&quot;数值的整数次方&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>重建二叉树</title>
    <link href="http://example.com/2022/05/03/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2022/05/03/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2022-05-03T06:12:59.000Z</published>
    <updated>2022-05-03T06:14:13.599Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/03/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220503141319095.png" alt="重建二叉树"></p><p><img src="/2022/05/03/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220503141405171.png" alt="索引"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] preorder;<br>    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.preorder = preorder;<br>        <span class="hljs-comment">// 遍历中序遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.length; i++) &#123;<br>            map.put(inorder[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> recur(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &gt; right) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        TreeNode node = <span class="hljs-keyword">new</span> TreeNode(preorder[root]); <span class="hljs-comment">// 根节点</span><br>        <span class="hljs-keyword">int</span> i = map.get(preorder[root]); <span class="hljs-comment">// 得到根节点的索引</span><br>        node.left = recur(root+<span class="hljs-number">1</span>,left,i-<span class="hljs-number">1</span>);<br>        node.right = recur(root + (i - left) + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/03/%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220503141319095.png&quot; alt=&quot;重建二叉树&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/0</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>求1+2...+n</title>
    <link href="http://example.com/2022/05/03/%E6%B1%821-2-n/"/>
    <id>http://example.com/2022/05/03/%E6%B1%821-2-n/</id>
    <published>2022-05-03T01:32:38.000Z</published>
    <updated>2022-05-03T01:35:11.400Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/03/%E6%B1%821-2-n/image-20220503093415361.png" alt="求1+2...+n"></p><p><strong>解法：(运算符+递归)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumNums</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> x = n &gt; <span class="hljs-number">1</span> &amp;&amp; (n += sumNums(n - <span class="hljs-number">1</span>)) &gt; <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/03/%E6%B1%821-2-n/image-20220503093415361.png&quot; alt=&quot;求1+2...+n&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解法：(运算符+递归)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树的最近公共祖先</title>
    <link href="http://example.com/2022/05/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://example.com/2022/05/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</id>
    <published>2022-05-03T01:27:02.000Z</published>
    <updated>2022-05-03T02:08:32.801Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/05/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/image-20220503100709134.png" alt="二叉搜索树的最近公共祖先"></p><p><strong>解法：</strong></p><p>利用二叉搜索树左子树的所有节点小于头节点，右子树所有节点大于头节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root.val &gt; p.val &amp;&amp; root.val &gt; q.val) &#123; <span class="hljs-comment">// 说明p，q在root的左子树内</span><br>            <span class="hljs-keyword">return</span> lowestCommonAncestor(root.left,p,q);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &lt; p.val &amp;&amp; root.val &lt; q.val) &#123; <span class="hljs-comment">// 说明p，q在root的右子树内</span><br>            <span class="hljs-keyword">return</span> lowestCommonAncestor(root.right,p,q);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// root &gt; p &lt; q或者 root &lt;p &gt; q 也就是说p，q在root的左子树与右子树</span><br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/05/03/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/image-</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://example.com/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2022-05-02T13:28:59.000Z</published>
    <updated>2022-05-02T13:30:18.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p><img src="/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220430115218088.png" alt="image-20220430115218088"></p><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="使用递归实现："><a href="#使用递归实现：" class="headerlink" title="使用递归实现："></a><strong>使用递归实现：</strong></h2><p><strong>先序遍历(头左右)：</strong>每一次第一次到达节点就打印</p><p><strong>中序遍历(左头右)：</strong>每一次第二次到达节点就打印</p><p><strong>后序遍历(左右头)：</strong>每一次最后一次到达节点就打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bianli</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历二叉树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        f(head.left);<br>        f(head.right);<br>    &#125;<br><br>    <span class="hljs-comment">// 先序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(head.value + <span class="hljs-string">&quot; &quot;</span>);<br>        preOrderRecur(head.left);<br>        preOrderRecur(head.right);<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inOrderRecur(head.left);<br>        System.out.println(head.value + <span class="hljs-string">&quot; &quot;</span>);<br>        inOrderRecur(head.right);<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">posOrderRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.println(head.value + <span class="hljs-string">&quot; &quot;</span>);<br>        posOrderRecur(head.left);<br>        posOrderRecur(head.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用非递归实现（栈）："><a href="#使用非递归实现（栈）：" class="headerlink" title="使用非递归实现（栈）："></a><strong>使用非递归实现（栈）：</strong></h2><p><strong>先序遍历(头左右)：</strong></p><p>前提：先将根节点加入栈中</p><p>1、每次从栈中弹出一个节点cur</p><p>2、打印（处理）cur</p><p>3、先把cur右孩子压到栈里，再把cur左孩子压到栈里去，如果有的左右孩子的话</p><p>4、周而复始</p><p><strong>中序遍历(左头右)：</strong></p><p><img src="/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220430171115049.png" alt="image-20220430171115049"></p><p><strong>每次都是左头右，然后把右当作头，综上所述最后都是左头左头</strong></p><p>1、每一棵子树整棵树左边界进栈</p><p>2、依次弹出每一个节点的过程中，打印</p><p>3、看看这个弹出的节点是否有右树，没有就继续弹出栈内的节点</p><p>3、有右树就对右树进行第一步</p><p><strong>后序遍历(左右头)：</strong></p><p>前提：多加一个收集栈，先将根节点加入栈中</p><p>1、每次从栈中弹出一个节点cur</p><p>2、把当前节点（cur）放到收集栈里去</p><p>3、先把cur左孩子压到栈里，再把cur右孩子压到栈里去，如果有的左右孩子的话</p><p>4、周而复始</p><p>5、最后弹出收集栈<strong>（左右头）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bianli</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 非递归（栈）先序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">perOrderUnRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;per-order&quot;</span>);<br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            stack.add(head);<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>                head = stack.pop();<br>                System.out.println(head.value + <span class="hljs-string">&quot; &quot;</span>);<br>                <span class="hljs-keyword">if</span> (head.right != <span class="hljs-keyword">null</span>) &#123;<br>                    stack.push(head.right);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (head.left != <span class="hljs-keyword">null</span>) &#123;<br>                    stack.push(head.left);<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">// 非递归（栈）中序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderUnRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;in-order&quot;</span>);<br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() || head != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>                    stack.push(head);<br>                    head = head.left;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    head = stack.pop();<br>                    System.out.println(head.value + <span class="hljs-string">&quot; &quot;</span>);<br>                    head = head.right;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">// 非递归（栈）后序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">posOrderUnRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;pos-order&quot;</span>);<br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            Stack&lt;Node&gt; s1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            Stack&lt;Node&gt; s2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            s1.push(head);<br>            <span class="hljs-keyword">while</span> (!s1.isEmpty()) &#123;<br>                head = s1.pop();<br>                s2.push(head);<br>                <span class="hljs-keyword">if</span> (head.left != <span class="hljs-keyword">null</span>) &#123;<br>                    s1.push(head.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (head.right != <span class="hljs-keyword">null</span>) &#123;<br>                    s1.push(head.right);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (!s2.isEmpty()) &#123;<br>                System.out.println(s2.pop().value + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树的深度优先遍历"><a href="#二叉树的深度优先遍历" class="headerlink" title="二叉树的深度优先遍历"></a>二叉树的深度优先遍历</h1><p>宽度优先遍历用<strong>队列</strong>，头部进，尾部出；就是从上到下，从左到右依次遍历。</p><p>宽度优先遍历使用队列，先把头结点放到队列里，弹出就打印，先放左再放右，没有左就不放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeMaxWidth</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 二叉树的宽度优先遍历(哈希表)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">w</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Queue&lt;Node&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        queue.add(head);<br>        <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>            Node cur = queue.poll();<br>            System.out.println(cur.value);<br>            <span class="hljs-keyword">if</span> (cur.left != <span class="hljs-keyword">null</span>) &#123;<br>                queue.add(cur.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-keyword">null</span>) &#123;<br>                queue.add(cur.right);<br>            &#125;<br>        &#125;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="拓展：（如何求二叉树的宽度）"><a href="#拓展：（如何求二叉树的宽度）" class="headerlink" title="拓展：（如何求二叉树的宽度）"></a><strong>拓展：（如何求二叉树的宽度）</strong></h2><p>再宽度优先遍历的时候记录下每个节点的层数，最后比较，最大的层数就是最大宽度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeMaxWidth</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 求二叉树的最大宽度(哈希表)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">w</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        Queue&lt;Node&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        queue.add(head);<br>        HashMap&lt;Node, Integer&gt; levelMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(); <span class="hljs-comment">// 记录树的宽度的哈希表</span><br>        levelMap.put(head, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> cueLevel = <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前在第几层</span><br>        <span class="hljs-keyword">int</span> curLevelNodes = <span class="hljs-number">0</span>; <span class="hljs-comment">// 当前层发现了几个节点</span><br>        <span class="hljs-keyword">int</span> max = Integer.MIN_VALUE; <span class="hljs-comment">// 所有层中哪一个层数的节点是最多的</span><br>        <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>            Node cur = queue.poll();<br>            <span class="hljs-keyword">int</span> curNodeLevel = levelMap.get(cur);<br>            <span class="hljs-keyword">if</span> (curNodeLevel == cueLevel) &#123; <span class="hljs-comment">// 如果当前节点所在的层和我来到的想统计的层一样</span><br>                curLevelNodes++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 来到的节点已经是下一层的节点了</span><br>                max = Math.max(max, curLevelNodes);<br>                cueLevel++;<br>                curLevelNodes = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur.left != <span class="hljs-keyword">null</span>) &#123;<br>                levelMap.put(cur.left, curNodeLevel+<span class="hljs-number">1</span>);<br>                queue.add(cur.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-keyword">null</span>) &#123;<br>                levelMap.put(cur.right, curNodeLevel+<span class="hljs-number">1</span>);<br>                queue.add(cur.right);<br>            &#125;<br>        &#125;<br>        max = Math.max(max, curLevelNodes);<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>curend指的是当前层数的最后一个节点</p><p>nextend指的是下一层的最后一个节点，队列让谁进去这个值就变成谁</p><p>curlevel指的是当前层已经发现的节点数</p><p><strong>思路</strong>：curend是头节点，然后左孩子是2所以nextend = 2；右孩子是3所以nextend = 3；curlevel = 1；max =1；1被输出打印，1 != 3 所以当前层遍历结束curend = nextend，nextend = null，curlevel = 0；2在队列中被弹出，2的右孩子为4，所以nextend = 4；2!= curend =3，所以2不是当前层的最后一个节点，所以curlevel++；3在队列中被弹出，左孩子为5，右孩子为6，所以nextend = 6；3 = curend = 3，curlevel++，max在1与curlevel中取最大值2，nextend = curend，nextend = null；循环</p><p><img src="/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220501105151572.png" alt="求二叉树的最大宽度(G:/A-%25E5%25AD%25A6%25E4%25B9%25A0%25E7%25AC%2594%25E8%25AE%25B0/%25E7%25AE%2597%25E6%25B3%2595%25E4%25B8%258E%25E6%2595%25B0%25E6%258D%25AE%25E7%25BB%2593%25E6%259E%2584/%25E4%25BA%258C%25E5%258F%2589%25E6%25A0%2591/image-20220501105151572.png)"></p><h1 id="搜索二叉树（BST）："><a href="#搜索二叉树（BST）：" class="headerlink" title="搜索二叉树（BST）："></a>搜索二叉树（BST）：</h1><p>参考题：<a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">验证二叉搜索树</a></p><p>对于每一个子树来说，他的左树的节点都比他小，右树的节点都比他大，可以看作没有重复值</p><p><strong>如何判断一个树是搜索二叉树？</strong></p><p><strong>方法一：</strong>使用中序遍历，如果所有节点打印出来都是升序，那么则二叉树是搜索二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBST</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>    &#125;<br><br>    <span class="hljs-comment">// 上一次处理到的节点的值（假设刚开始为系统最小）</span><br>    <span class="hljs-comment">// 建议用long 因为int会面临越界int最小值是-2147483648，如果头节点是-2147483648就会越界</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">long</span> preValue = Long.MIN_VALUE;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkBST</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">boolean</span> isLeftBst = checkBST(head.left);<br>        <span class="hljs-keyword">if</span> (!isLeftBst) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (head.value &lt;= preValue) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            preValue = head.value;<br>        &#125;<br>        <span class="hljs-keyword">return</span> checkBST(head.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：（栈）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBST</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>    &#125;<br><br><span class="hljs-comment">// 非递归（栈）中序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">inOrderUnRecur</span><span class="hljs-params">(Node head)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">long</span> preValue = Long.MIN_VALUE;<br>            Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() || head != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>                    stack.push(head);<br>                    head = head.left;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    head = stack.pop();<br>                    <span class="hljs-keyword">if</span> (head.value &lt;= preValue) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        preValue = head.value;<br>                    &#125;<br>                    head = head.right;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法三：使用套路完成判断一个树是否是搜索二叉树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBST</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>    &#125;<br>    <span class="hljs-comment">// 使用基本套路</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReturnData</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> isBST;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> min;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> max;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReturnData</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> is, <span class="hljs-keyword">int</span> mi,<span class="hljs-keyword">int</span> ma)</span> </span>&#123;<br>            isBST = is;<br>            min = mi;<br>            max = ma;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ReturnData <span class="hljs-title">process</span><span class="hljs-params">(Node x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        ReturnData leftData = process(x.left);<br>        ReturnData rightData = process(x.right);<br><br>        <span class="hljs-keyword">int</span> min = x.value;<br>        <span class="hljs-keyword">int</span> max = x.value;<br>        <span class="hljs-keyword">if</span> (leftData != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 说明左树有东西</span><br>            min = Math.min(min, leftData.min);<br>            max = Math.max(max, leftData.max);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rightData != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">// 说明右树有东西</span><br>            min = Math.min(min, rightData.min);<br>            max = Math.max(max, rightData.max);<br>        &#125;<br><br>        <span class="hljs-keyword">boolean</span> isBST = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">if</span> (leftData != <span class="hljs-keyword">null</span> &amp;&amp; (!leftData.isBST || leftData.max &gt;= x.value)) &#123;<br>            <span class="hljs-comment">// 左树不等于空的情况下左树已经不是搜索二叉树了或者左树不等于空的情况下左边的最大值大于等于x的值</span><br>            isBST = <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rightData != <span class="hljs-keyword">null</span> &amp;&amp; (!rightData.isBST || rightData.min &lt;= x.value)) &#123;<br>            <span class="hljs-comment">// 右树不等于空的情况下右树已经不是搜索二叉树了或者右树不等于空的情况下右边的最小值小于等于x的值</span><br>            isBST = <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReturnData(isBST, min ,max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完全二叉树（CBT）："><a href="#完全二叉树（CBT）：" class="headerlink" title="完全二叉树（CBT）："></a>完全二叉树（CBT）：</h1><p>参考题：<a href="https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree/"> 二叉树的完全性检验</a></p><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。（最后一层有右子节点必有左子节点）</p><p><strong>如何判断一颗二叉树是完全二叉树？</strong></p><p>二叉树按宽度遍历，</p><p>1、任一节点有右孩子没有左孩子直接返回false；</p><p>2、在第一个条件不违规的情况下，如果遇见了第一个左右子节点不全的情况下，后续所有的节点都必须是叶节点（都必须没有左右子节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCBT</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>    &#125;<br><br>    <span class="hljs-comment">// 宽度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCBT</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        LinkedList&lt;Node&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-comment">// 是否遇到过左右两个孩子不双全的节点</span><br>        <span class="hljs-keyword">boolean</span> leaf = <span class="hljs-keyword">false</span>;<br>        Node l = <span class="hljs-keyword">null</span>;<br>        Node r = <span class="hljs-keyword">null</span>;<br>        queue.add(head);<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            head = queue.poll();<br>            l = head.left;<br>            r = head.right;<br>            <span class="hljs-keyword">if</span> (<br>                    (leaf &amp;&amp; (l != <span class="hljs-keyword">null</span> || r != <span class="hljs-keyword">null</span>)) <span class="hljs-comment">// 如果遇见过两个孩子不双全的节点并且当前节点不是叶节点</span><br>                    ||<br>                    (l == <span class="hljs-keyword">null</span> &amp;&amp; r != <span class="hljs-keyword">null</span>) <span class="hljs-comment">// 有右孩子没有左孩子</span><br>            ) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l != <span class="hljs-keyword">null</span>) &#123;<br>                queue.add(l);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-keyword">null</span>) &#123;<br>                queue.add(r);<br>            &#125;<br>            <span class="hljs-comment">// 如果左孩子为空或者右孩子为空（证明左右孩子不双全）</span><br>            <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span> || r == <span class="hljs-keyword">null</span>) &#123;<br>                leaf = <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="满二叉树（FBT）："><a href="#满二叉树（FBT）：" class="headerlink" title="满二叉树（FBT）："></a>满二叉树（FBT）：</h1><p>节点个数（n）与最大深度（l）满足 n = (2^l) -1 节点个数等于2的最大深度次方减一</p><p><strong>如何判断一颗二叉树是否是满二叉树？</strong></p><p><strong>使用基本套路</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFBT</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isF</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        Info data = f(head);<br>        <span class="hljs-keyword">return</span> data.nodes == ((<span class="hljs-number">1</span> &lt;&lt; data.height) - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> height;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> nodes;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Info</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>            height = h;<br>            nodes = n;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Info <span class="hljs-title">f</span><span class="hljs-params">(Node x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Info(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>        Info leftData = f(x.left);<br>        Info rightData = f(x.right);<br>        <span class="hljs-keyword">int</span> height = Math.max(leftData.height, rightData.height) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> nodes = leftData.nodes + rightData.nodes + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Info(height, nodes);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="平衡二叉树（BBT）："><a href="#平衡二叉树（BBT）：" class="headerlink" title="平衡二叉树（BBT）："></a>平衡二叉树（BBT）：</h1><p>参考题：<a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/">平衡二叉树</a></p><p>对于任何一个子树来说，左树的高度和右树的高度都不超过1。</p><p><strong>如何判断一颗二叉树是否是平衡二叉树？</strong></p><p>如果一棵树是平衡二叉树的话有<strong>三个条件</strong></p><p>假设X是头节点</p><p>1、X的左子树是平衡二叉树</p><p>2、X的右子树是平衡二叉树</p><p>3、对于X来讲，左树的高度减去右树的高度的绝对值小于等于1</p><p>1、2、3与逻辑都成立，X才是平衡二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBBT</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        ReturnType process = process(head);<br>        <span class="hljs-keyword">return</span> process.isBalanced;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReturnType</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> isBalanced; <span class="hljs-comment">// 返回这棵树是不是平衡的</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> height; <span class="hljs-comment">// 返回这棵树的高度</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReturnType</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isB, <span class="hljs-keyword">int</span> hei)</span> </span>&#123;<br>            isBalanced = isB;<br>            height = hei;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReturnType <span class="hljs-title">process</span><span class="hljs-params">(Node x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// base</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReturnType(<span class="hljs-keyword">true</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>        ReturnType leftData = process(x.left);<br>        ReturnType rightData = process(x.right);<br>        <span class="hljs-keyword">int</span> height = Math.max(leftData.height, rightData.height) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">boolean</span> isBalanced = leftData.isBalanced &amp;&amp; rightData.isBalanced &amp;&amp; Math.abs(leftData.height - rightData.height) &lt; <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ReturnType(isBalanced, height);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树题目基本套路："><a href="#二叉树题目基本套路：" class="headerlink" title="二叉树题目基本套路："></a>二叉树题目基本套路：</h1><p> 一切树型dp的问题，让自己的两颗子树给自己所需要的信息，然后自己给母树所需要的信息， 当各段的状态取定以后，就可以做出不同的决定，从而确定下一阶段的状态 </p><p><strong>什么时候可以使用这个套路？</strong></p><p>解题的时候 可以通过向左树要信息和向右树要信息来解题的时候可以使用这个基本套路</p><h2 id="最低公共祖先节点"><a href="#最低公共祖先节点" class="headerlink" title="最低公共祖先节点"></a>最低公共祖先节点</h2><p><strong>给定两个二叉树的节点node1和node2，找到他们的最低公共祖先节点</strong></p><p><strong>参考题：</strong></p><h4 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">二叉树的最近公共祖先</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LowestCommonAncestor</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     可能出现的情况：</span><br><span class="hljs-comment">        1.o1是o2的最低公共祖先或者o2是o1的最低公共祖先</span><br><span class="hljs-comment">        2.o1与o2不互为最低公共祖先，需要往上汇聚才能找到最低公共祖先</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(Node head, Node o1, Node o2)</span> </span>&#123;<br><br>        <span class="hljs-comment">//如果root为空或者root为o1,o2中的一个,说明root就是o1,o2的最近公共祖先</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head == o1 || head == o2) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        Node left = lowestCommonAncestor(head.left, o1, o2);<br>        Node right = lowestCommonAncestor(head.right, o1, o2);<br>        <span class="hljs-comment">//left 为空说明left没有公共祖先，那么返回right</span><br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> right;<br>        &#125;<br>        <span class="hljs-comment">//反之亦然</span><br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head; <span class="hljs-comment">// 如果左树的头与右树的头都不是空，就返回当前的头</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/image-20220502165445024.png" alt="image-20220502165445024"></p><h2 id="前驱节点，后继结点"><a href="#前驱节点，后继结点" class="headerlink" title="前驱节点，后继结点"></a>前驱节点，后继结点</h2><p>前驱节点：中序遍历中，一个节点的前一个节点</p><p>后继结点：中序遍历中，一个节点的下一个节点</p><p>寻找后继结点的情况：</p><ol><li>x有右树的时候，x的后继节点就是x的右树的最左节点</li><li>x无右树的时候，x判断自己是不是父节点的左孩子，如果是x的后继节点就是这个父节点，如果不是就看父节点的父节点；如果找到最后一个父节点的时候，发现自己还不是左孩子，那么这个节点没有后继结点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuccessroNode</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br>        <span class="hljs-keyword">public</span> Node parent;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">getSuccessroNode</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> getLeftMost(node.right);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 无右子树</span><br>            Node parent = node.parent;<br>            <span class="hljs-keyword">while</span> (parent != <span class="hljs-keyword">null</span> &amp;&amp; parent.left != node) &#123; <span class="hljs-comment">// 当前节点是其父亲节点的右孩子</span><br>                node = parent;<br>                parent = node.parent;<br>            &#125;<br>            <span class="hljs-keyword">return</span> parent;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">getLeftMost</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<span class="hljs-keyword">while</span> (node.left != <span class="hljs-keyword">null</span>) &#123;<br>            node = node.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树的序列化与反序列化"><a href="#二叉树的序列化与反序列化" class="headerlink" title="二叉树的序列化与反序列化"></a>二叉树的序列化与反序列化</h2><p>就是内存里的一棵树如何变成字符串形式，又如何从字符串形式变成内存里的树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerializeAndReconstructTree</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> value;<br>        <span class="hljs-keyword">public</span> Node left;<br>        <span class="hljs-keyword">public</span> Node right;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.value = data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 以head为头的树，请序列化成字符串返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">serialByPre</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#_&quot;</span>;<br>        &#125;<br>        String res = head.value + <span class="hljs-string">&quot;_&quot;</span>;<br>        res += serialByPre(head.left);<br>        res += serialByPre(head.right);<br>        <span class="hljs-keyword">return</span>  res;<br>    &#125;<br><br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">reconByPreString</span><span class="hljs-params">(String perStr)</span> </span>&#123;<br>        String[] values = perStr.split(<span class="hljs-string">&quot;_&quot;</span>);<br>        Queue&lt;String&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != values.length; i++) &#123;<br>            queue.add(values[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> reconPreOrder(queue);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">reconPreOrder</span><span class="hljs-params">(Queue&lt;String&gt; queue)</span> </span>&#123;<br>        String value = queue.poll();<br>        <span class="hljs-keyword">if</span> (value.equals(<span class="hljs-string">&quot;#&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Node head = <span class="hljs-keyword">new</span> Node(Integer.valueOf(value));<br>        head.left = reconPreOrder(queue);<br>        head.right = reconPreOrder(queue);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h2><p>将一张纸对折，会出现折痕，第一次是凹下去的，成为凹折痕，再折一次，会在上一次的折痕上下方出现两个折痕，上方为凹下方为凸，依次类推，现在给出折的次数，请按照折痕的方向依次打印。</p><p><img src="/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/1636515192108.png" alt="1636515192108"></p><p>其实就是中序遍历 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaperFolding</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printAllFolds</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span> </span>&#123;<br>        printProcess(<span class="hljs-number">1</span>, N, <span class="hljs-keyword">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 递归过程，来到了某一个节点</span><br>    <span class="hljs-comment">// i是节点的层数，N一共的层数，down == true 凹 down == false 凸</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printProcess</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> N, <span class="hljs-keyword">boolean</span> down)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (i &gt; N) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        printProcess(i + <span class="hljs-number">1</span>, N, <span class="hljs-keyword">true</span>);<br>        System.out.println(down ? <span class="hljs-string">&quot;凹&quot;</span> : <span class="hljs-string">&quot;凸&quot;</span>);<br>        printProcess(i + <span class="hljs-number">1</span>, N, <span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/05/02/%E4%BA%8C%E5%8F%89%E6%A0%91/image-2022043011</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://example.com/2022/05/02/%E9%93%BE%E8%A1%A8/"/>
    <id>http://example.com/2022/05/02/%E9%93%BE%E8%A1%A8/</id>
    <published>2022-05-02T13:27:18.000Z</published>
    <updated>2022-05-02T13:28:27.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>分为单链表和多链表</p><p>单链表有一个指针，指向后继</p><p>多链表有两个指针，一个指向前驱，一个指向后继。</p><p><strong>题目：</strong>判断一个链表是否是回文结构(正着念跟反着念一样)</p><p>​            给定一个单链表的头节点head，请判断该链表是否为回文结构</p><p>​        1 -&gt;2 -&gt;1, 返回true  ；1-&gt;2-&gt;2-&gt;1,返回true;15-&gt;6-&gt;15,返回true，1-&gt;2-&gt;3，返回false</p><p><strong>思路</strong></p><p>笔试(不太考虑空间复杂度）：可以将链表上的数依次放入栈里去，然后出栈，弹出一个，比对一个，如果每一步都一样，就代表回文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPailndrome</span><span class="hljs-params">(Node head)</span></span>&#123;<br>    Stack&lt;Node&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;Node&gt;();<br>    Node cur = head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>)&#123;<br>        stack.push(cur);<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span> (head.value != stack.pop().value)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        head = head.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>相对上一种省一点空间：可以将链表的右半部分放入栈，然后依次比对，直到栈空，如果都一样，代表回文那么，如何知道到了右半部分呢，用一个指针肯定不行，所以就引出了快慢指针，快指针一次走两步，慢指针一次走一步，快指针走完的时候，慢指针正好走到中点的位置。所以就将慢指针后边的东西放到栈里去</p><p>如果链表长度为N，时间复杂度达到O(N),额外空间复杂度达到O(1)。</p><p><strong>面试：</strong>快指针一次走两步，慢指针走一步，当快指针走完而慢指针走了一半的时候，将慢指针指向的那个数指向null，然后将后半部分处理成逆序链表，然后快慢指针同时往中间走，一次走一步，依次对比，知道一方指向空。如果每步都一样，就是回文。</p><p><img src="/2022/05/02/%E9%93%BE%E8%A1%A8/1634652601997.png" alt="1634652601997"></p><p><img src="/2022/05/02/%E9%93%BE%E8%A1%A8/1634656903440.png" alt="1634656903440">       <img src="/2022/05/02/%E9%93%BE%E8%A1%A8/Users\1457228183\AppData\Roaming\Typora\typora-user-images\1634656974746.png" alt="1634656974746"></p><p><img src="/2022/05/02/%E9%93%BE%E8%A1%A8/1634652929413.png" alt="1634652929413"></p><p>​        <strong>笔试：</strong>思路：将链表的数放在数组里面，在数组里面进行快速排序，达到效果</p><p>​        <strong>面试：</strong>思路：准备六个变量，分别是小于头，小于尾，等于头，等于尾，大于头，大于尾，让这六个变量都指向空。一个数字一个数字看，发现第一个小于的数，就把小于头小于尾都设置成这个，大于等于也一样，如果发现第二个，小于头不变，小于头指向前面一个小于尾，小于尾不再是小于尾，指向最新发现的数，最新发现的数变成小于尾，，最后小于尾指向等于头，等于尾指向大于头</p><p><img src="/2022/05/02/%E9%93%BE%E8%A1%A8/1634657601717.png" alt="1634657601717"></p><p>（小心没有等于五的区域或者没有大于五的或者没有小于五的）</p><p><img src="/2022/05/02/%E9%93%BE%E8%A1%A8/1634657851014.png" alt="1634657851014"></p><p><img src="/2022/05/02/%E9%93%BE%E8%A1%A8/1634657903539.png" alt="1634657903539"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;分为单链表和多链表&lt;/p&gt;
&lt;p&gt;单链表有一个指针，指向后继&lt;/p&gt;
&lt;p&gt;多链表有两个指针，一个指向前驱，一个指向后继。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://example.com/2022/05/02/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/05/02/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2022-05-02T13:26:21.000Z</published>
    <updated>2022-05-02T13:33:35.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>1、整体就是一个简单递归，左边排好序、右边排好序、让其整体有序</p><p>2、让其整体有序的过程里用了排外序方法</p><p>3、利用master公式来求解时间复杂度</p><p>4、归并排序的实质</p><p><strong>时间复杂度O(N*logN)，额外空间复杂度O(N)</strong></p><p>算法历程</p><p>这是一个无序数列：4、5、8、1、7、2、6、3，我们要将它按从小到大排序。按照归并排序的思想，我们要把序列逐层进行拆分                                                                                                                                                                                                                                                             </p><p><img src="https://img-blog.csdnimg.cn/20200619151838325.png" alt="[(快速1.png)]"></p><p>序列逐层拆分如下</p><p><img src="https://img-blog.csdnimg.cn/20200619151903848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzQ0MTk4,size_16,color_FFFFFF,t_70" alt="[(./归并1.png)]"></p><p>然后从下往上逐层合并，首先对第一层序列1（只包含元素4）和序列2（只包含元素5）进行合并</p><p>创建一个大序列，序列长度为两个小序列长度之和，p1、p2指针分别指向两个小序列的第一个元素，p指向大序列的第一个元素<br><img src="https://img-blog.csdnimg.cn/20200619151928587.png" alt="[(./归并2.png)]"></p><p>比较p1、p2指向的元素，4小于5，将4填入p指向的元素，p、p1往右移一位<br><img src="https://img-blog.csdnimg.cn/2020061915195029.png" alt="[(./归并3.png)]"><br>此时，序列1已经没有元素，将序列2的元素依次填入大序列中<br><img src="https://img-blog.csdnimg.cn/20200619152014989.png" alt="[(./归并4.png)]"></p><p>序列8和1，序列7和2，序列6和3，用同样的方式填入新的序列<br><img src="https://img-blog.csdnimg.cn/20200619152035747.png" alt="[(./归并5.png)]"><br>接着，以4、5为序列1，1、8为序列2，继续进行合并</p><p>创建一个序列长度为4的大序列，p1指向序列1的第一个元素4，p2指向序列2的第一个元素1，p指向大序列的第一个元素<br><img src="https://img-blog.csdnimg.cn/20200619152057575.png" alt="[(./归并6.png)]"></p><p>4和1比较，4大于1，1填入p指向的元素，p、p2往右移一位<br><img src="https://img-blog.csdnimg.cn/202006191521208.png" alt="[(./归并7.png)]"><br>4和8比较，4小于8，4填入p指向的元素，p、p1往右移一位<br><img src="https://img-blog.csdnimg.cn/20200619152136296.png" alt="[(./归并8.png)]"></p><p>5和8比较，5小于8，5填入p指向的元素，p、p1往右移一位<br><img src="https://img-blog.csdnimg.cn/202006191521593.png" alt="[(./归并9.png)]"><br>自此，序列1已经没有元素，将序列2的元素依次填入大序列中<br><img src="https://img-blog.csdnimg.cn/20200619152220636.png" alt="[(./归并10.png)]"></p><p>序列2、7和序列3、6以同样的方式合并成新的序列<br><img src="https://img-blog.csdnimg.cn/20200619152242410.png" alt="[(./归并11.png)]"><br>最后，将序列1、4、5、8和序列2、3、6、7以同样的方式继续合并成新的序列<br><img src="https://img-blog.csdnimg.cn/20200619152303145.png" alt="[(./归并12.png)]"></p><p>至此所有的元素都是有序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-keyword">null</span> || arr.length &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    process(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L == R)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = L +((R - L) &gt;&gt; <span class="hljs-number">1</span>);<span class="hljs-comment">// 求中点</span><br>    process(arr, L, mid);<br>    process(arr, mid+<span class="hljs-number">1</span>, R);<br>    merge(arr, L, mid, R);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> M, <span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[R- L + <span class="hljs-number">1</span>]; <span class="hljs-comment">//辅助数组</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> p1 = L;<br>    <span class="hljs-keyword">int</span> p2 = M + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p1 &lt;= M &amp;&amp; p2 &lt;= R)&#123;<br>        help[i++] =arr[p1] &lt;= arr[p2] ? arr[p1++] ; arr[p2++];<br>       <br>    &#125;<br>    <span class="hljs-keyword">while</span>(p1 &lt;= M)&#123;             <span class="hljs-comment">// 以下两个while只会执行一个 也就是p1 p2 必然会有一个越界</span><br>        help[i++] = arr[p1++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p2 &lt;= R)&#123;<br>        help[i++] = arr[p2++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; help.length; i++)&#123;<br>        arr[L + i] =help[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/05/02/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/image-20211019163323771.png" alt="image-20211019163323771"></p><p><strong>小和问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">smallSun</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(arr==<span class="hljs-keyword">null</span> || arr.length &lt;<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> process(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//arr[L..R] 既要排好序，也要求小和</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i==r)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + ((r-<span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> process(arr, l, mid)<span class="hljs-comment">/*左侧排序求小和的数量*/</span> <br>           + process(arr, mid + <span class="hljs-number">1</span>, r)<span class="hljs-comment">/*右侧排序求小和的数量*/</span><br>           +merge(arr, l, mid, r)<span class="hljs-comment">/*左侧和右侧merge后小和的数量*/</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> m,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>[] help = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[r-L+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> p1 = L;<br>    <span class="hljs-keyword">int</span> p2 = m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p1 &lt;= m &amp;&amp; p2 &lt;= r)&#123;<br>        res += arr[p1] &lt; arr[p2] ? (r-p2+<span class="hljs-number">1</span>)<span class="hljs-comment">/*比当前的p1大的数的个数*/</span> * arr[p1] : <span class="hljs-number">0</span>;<br>        help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p1 &lt;= m)&#123;             <span class="hljs-comment">// 以下两个while只会执行一个 也就是p1 p2 必然会有一个越界</span><br>        help[i++] = arr[p1++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p2 &lt;= R)&#123;<br>        help[i++] = arr[p2++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; help.length; i++)&#123;<br>        arr[L + i] =help[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h1&gt;&lt;p&gt;1、整体就是一个简单递归，左边排好序、右边排好序、让其整体有序&lt;/p&gt;
&lt;p&gt;2、让其整体有序的过程里用了排外序方法&lt;/p&gt;</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>异或</title>
    <link href="http://example.com/2022/05/02/%E5%BC%82%E6%88%96/"/>
    <id>http://example.com/2022/05/02/%E5%BC%82%E6%88%96/</id>
    <published>2022-05-02T13:25:11.000Z</published>
    <updated>2022-05-02T13:25:24.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异或（-）"><a href="#异或（-）" class="headerlink" title="异或（^）"></a>异或（^）</h1><p><strong>计算方法：相同为0不同为1（也可以理解为做和然后不进位）</strong></p><p>==<strong>性质：==</strong></p><p><strong>1、0^N= N；N^N = 0</strong></p><p><strong>2、满足交换律和结合律</strong></p><p><strong>如何交换两个数的值？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">17</span>; <br><span class="hljs-keyword">int</span> b = <span class="hljs-number">23</span>;<br>a=a^b; <span class="hljs-comment">// a=17^23  b=23</span><br>b=a^b; <span class="hljs-comment">// a=17^23  b=17^23^23 =17</span><br>a=a^b; <span class="hljs-comment">// a=17^23^17=17^17^23=23  b=17</span><br></code></pre></td></tr></table></figure><p><strong>思考：</strong></p><ul><li><p>有一个数组中，有一个数字出现了奇数次，其余所有的数字出现了偶数次，求出现了奇数次的数字是几？</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">定义一个数<span class="hljs-keyword">eor</span>，将<span class="hljs-keyword">eor</span>与所有的数字异或，最后<span class="hljs-keyword">eor</span>就是出现了奇数次的数字<br><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>] =&gt; [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>] 利用了异或运算的性质<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ero = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;arr.length; i++)&#123;<br>        ero^= arr[i];<br>    &#125;<br>    System.out.println(ero);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>有一个数组中，有两个数字出现了奇数次，其余所有的数字出现了偶数次，求出现了奇数次的数字是几？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">定义一个数eor，将eor与所有的数字异或，最后eor就是两个出现了奇数次的数字<br>因为a≠b，所以，a^b≠<span class="hljs-number">0</span>也就是说eor≠<span class="hljs-number">0</span><br>因此eor的二进制数有一位数字一定不为<span class="hljs-number">0</span><br>假设第八位为<span class="hljs-number">1</span>，（<span class="hljs-keyword">int</span> rightOne = eor &amp; (~eor + <span class="hljs-number">1</span>);<span class="hljs-comment">//提取出最右边的1）</span><br>定义一个eor1，eor1与所有第八位为<span class="hljs-number">1</span>的数字（(cur &amp; rughtOne) == <span class="hljs-number">1</span> ）异或，所得到的数字就是a or b<br>eor1^eor 所得到的数字就是a与b中另一个数字<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//进阶   </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> eor = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;arr.length; i++)&#123;<br>            eor^= arr[i];<br>        &#125;<br>        <span class="hljs-comment">//ero必然有一个位置上是1</span><br>       <span class="hljs-keyword">int</span> rightOne = eor&amp;(~eor + <span class="hljs-number">1</span>);<span class="hljs-comment">//提取出最右侧的1</span><br><br>        <span class="hljs-comment">//一下到for循环完成表示取出那一类然后和err&#x27;异或运算</span><br>        <span class="hljs-keyword">int</span> onlyOne = <span class="hljs-number">0</span>;<span class="hljs-comment">//eor&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> cur : arr)&#123;<br>            <span class="hljs-keyword">if</span> ((cur&amp;rightOne)==<span class="hljs-number">0</span>)&#123;<br>                onlyOne ^= cur;<span class="hljs-comment">//a或者b</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> other = eor ^ onlyOne;<br>        System.out.println(onlyOne + <span class="hljs-string">&quot;&quot;</span> + other);<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>算法流程按照最差的情况来估计时间复杂度</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异或（-）&quot;&gt;&lt;a href=&quot;#异或（-）&quot; class=&quot;headerlink&quot; title=&quot;异或（^）&quot;&gt;&lt;/a&gt;异或（^）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;计算方法：相同为0不同为1（也可以理解为做和然后不进位）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;==&lt;st</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>递归</title>
    <link href="http://example.com/2022/05/02/%E9%80%92%E5%BD%92/"/>
    <id>http://example.com/2022/05/02/%E9%80%92%E5%BD%92/</id>
    <published>2022-05-02T13:22:33.000Z</published>
    <updated>2022-05-02T13:22:55.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>自己调自己</p><h2 id="题外：求两数的中点"><a href="#题外：求两数的中点" class="headerlink" title="题外：求两数的中点"></a>题外：求两数的中点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//       int mid = (L+R)/2;这种情况用于数组有小概率会溢出</span><br><br><span class="hljs-comment">//       int mid = L+(R-L)/2;这种不会溢出</span><br><br><span class="hljs-comment">//       int mid = L+((R-L)&gt;&gt;1);  第二种方式的另一种写法</span><br></code></pre></td></tr></table></figure><h2 id="题目-求一个数组中一个范围内的最大值"><a href="#题目-求一个数组中一个范围内的最大值" class="headerlink" title="题目:求一个数组中一个范围内的最大值"></a>题目:求一个数组中一个范围内的最大值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>  <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (L==R)&#123;<br>        <span class="hljs-keyword">return</span> arr[L];<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = L + ((R-L)&gt;&gt;<span class="hljs-number">1</span>);<span class="hljs-comment">//中点</span><br>    <span class="hljs-keyword">int</span> leftMax = a(arr,L,mid);<br>    <span class="hljs-keyword">int</span> rightMax = a(arr,mid+<span class="hljs-number">1</span>,R);<br>    <span class="hljs-keyword">return</span> Math.max(leftMax,rightMax);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">GetMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="master公式"><a href="#master公式" class="headerlink" title="master公式"></a>master公式</h2><p><code> T [n] = aT[n/b] + f (n)（直接记为T [n] = aT[n/b] + O (N^d)）</code></p><p>需要子问题规模一样</p><p>a表示子问题数</p><p>T[n/b]表示子问题规模与主问题规模的关系，</p><p> O (N^d)表示除了递归调用其他部分的时间复杂度</p><p>用来直接计算符合master公式的问题的时间复杂度</p><p><img src="/2022/05/02/%E9%80%92%E5%BD%92/1634203498370.png" alt="1634203498370"></p><p><code>当d&lt;logb a时，时间复杂度为O(n^(logb a)) 当d=logb a时，时间复杂度为O((n^d)*logn) 当d&gt;logb a时，时间复杂度为O(n^d) </code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h1&gt;&lt;p&gt;自己调自己&lt;/p&gt;
&lt;h2 id=&quot;题外：求两数的中点&quot;&gt;&lt;a href=&quot;#题外：求两数的中点&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://example.com/2022/05/02/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/05/02/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2022-05-02T13:21:35.000Z</published>
    <updated>2022-05-02T13:21:55.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><strong>时间复杂度为O(N²)，额外空间复杂度为O(1)</strong></p><p>1、首先，原始的数组元素是这样的。<br><img src="https://img-blog.csdnimg.cn/20200628114521779.png" alt="img">      <br>     其中，浅绿色代表有序部分，黄色代表无序部分。<br>2、在无序部分中挑出要插入到有序部分中的元素</p><p><img src="https://img-blog.csdnimg.cn/2020062811465959.png" alt="img"></p><p>3、将要插入的元素与左边最近的有序部分的元素进行比较。由于4 &lt; 9，所以9向后移，4向前移。</p><p><img src="https://img-blog.csdnimg.cn/20200628114819195.png" alt="img"></p><p>4、继续将要插入的元素与左边最近的有序部分的元素进行比较。由于4 &lt; 5，所以5向后移，4继续向前移。<br><img src="https://img-blog.csdnimg.cn/20200628114914202.png" alt="img"><br>5、继续将4与3比较。由于4 &gt; 3，所以不再向前比较，插入到当前位置。<br><img src="https://img-blog.csdnimg.cn/2020062811502541.png" alt="img"><br>6、此时有序部分，由[2,3,5,9]变成[2,3,4,5,9]。</p><p><img src="https://img-blog.csdnimg.cn/20200628115113443.png" alt="img"></p><p>7、最后数组变为[2,3,4,5,7,9]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">//排除捣乱的数据</span><br>      <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span>||arr.length&lt;<span class="hljs-number">2</span>)&#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <br>      <span class="hljs-comment">//0-0 有序的</span><br>      <span class="hljs-comment">//0-i 想要有序</span><br>      <br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++)&#123;<br><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; arr[j+<span class="hljs-number">1</span>]; j--)&#123;<br>            swap(arr,j,j+<span class="hljs-number">1</span>);<br>          &#125;<br>          <br>      &#125;<br>      <br>    &#125;<br><span class="hljs-comment">//交换i和j的数字（这是一种抖机灵的写法，如果i和j地址不一样的话可以用，如果地址一致，数字就会变为0）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        arr[i] = arr[i]^arr[j];<br>        arr[j] = arr[i]^arr[j];<br>        arr[i] = arr[i]^arr[j];<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;时间复杂度为O(N²)，额外空间复杂度为O(1)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、首先，原始的数组元素是</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二分法</title>
    <link href="http://example.com/2022/05/02/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    <id>http://example.com/2022/05/02/%E4%BA%8C%E5%88%86%E6%B3%95/</id>
    <published>2022-05-02T13:19:16.000Z</published>
    <updated>2022-05-02T13:19:33.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="1、在一个有序数组中，找某个数是否存在"><a href="#1、在一个有序数组中，找某个数是否存在" class="headerlink" title="1、在一个有序数组中，找某个数是否存在"></a><strong>1、在一个有序数组中，找某个数是否存在</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//有序，小到大查找某值.</span><br><span class="hljs-keyword">int</span> fir=<span class="hljs-number">0</span>,last=arr_length-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (fir&lt;=last)&#123;<br>mid=(fir+last)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (arr[mid]==num)<br><span class="hljs-keyword">return</span> mid;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span> (arr[mid]&lt;num)<br>fir=mid+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>last=mid-<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2、在一个有序数组中，找-gt-某个数最左侧的位置（找-lt-某个数最右侧的位置）"><a href="#2、在一个有序数组中，找-gt-某个数最左侧的位置（找-lt-某个数最右侧的位置）" class="headerlink" title="2、在一个有序数组中，找&gt;=某个数最左侧的位置（找&lt;=某个数最右侧的位置）"></a><strong>2、在一个有序数组中，找&gt;=某个数最左侧的位置（找&lt;=某个数最右侧的位置）</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> fir=<span class="hljs-number">0</span>,last=arr_length-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (fir&lt;=last)&#123;<br>mid=(fir+last)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>  (arr[mid]&gt;=num)<br>last=mid-<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> (arr[mid]&lt;num)<br>ir=mid+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、局部最小值问题"><a href="#3、局部最小值问题" class="headerlink" title="3、局部最小值问题"></a><strong>3、局部最小值问题</strong></h2><p>问题：在一个无序数组中，任何两个相邻的数不相等，求一个局部最小的位置，要求时间复杂度好于O(n)。</p><p>​    局部最小：i比相邻的数都小</p><p>思路：先找第一个数，如果他比第二个小，直接返回，如果大，找最后一个数，如果比前一个小，直接返回，如果    大，则说明第二个比第一个大，倒数第二个一定比倒数第一个小，所以整个数组是先有上升趋势，再有向下趋    势，所以他中间必有一个最小的点，所以直接二分，找中间的那个数，然后如果他是局部最小，则直接返回，       否则将他看成第一个或者最后一个进行上述步骤，直到找到那个局部最小；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>  <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> n = arr.length;<br>        <span class="hljs-comment">//排除一些情况</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[<span class="hljs-number">0</span>] &gt; arr[<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[n-<span class="hljs-number">1</span>]&gt;arr[n-<span class="hljs-number">2</span>])&#123;<br>            <span class="hljs-keyword">return</span> n-<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义第一个和最后一个</span><br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> high = n-<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (low&lt;high)&#123;<br>            <span class="hljs-keyword">int</span> mid = (low+high)/<span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//如果这个中间值就是局部最小值就返回</span><br>            <span class="hljs-keyword">if</span> (arr[mid-<span class="hljs-number">1</span>]&lt;arr[mid] &amp;&amp; arr[mid]&gt;arr[mid+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-keyword">return</span> mid;<br>                    <span class="hljs-comment">//如果他这里是顺序递增，就把他设为最小值</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid-<span class="hljs-number">1</span>] &lt; arr[mid] &amp;&amp; arr[mid] &lt; arr[mid+<span class="hljs-number">1</span>])&#123;<br>                low = mid;<br>                <span class="hljs-comment">//如果他这里是前一个大于他，后一个小于他，把它设置为对于前半部分的最大值或者对于后半部分的最小值</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid-<span class="hljs-number">1</span>] &gt; arr[mid] &amp;&amp; arr[mid] &lt; arr[mid+<span class="hljs-number">1</span>])&#123;<br>                low = mid;<br>                <span class="hljs-comment">//否则就是最大值</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                high = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums = &#123; -<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> &#125;;<br>        System.out.println(a(nums));<br>    &#125;<br><br><br>输出结果：<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分法&quot;&gt;&lt;a href=&quot;#二分法&quot; class=&quot;headerlink&quot; title=&quot;二分法&quot;&gt;&lt;/a&gt;二分法&lt;/h1&gt;&lt;h2 id=&quot;1、在一个有序数组中，找某个数是否存在&quot;&gt;&lt;a href=&quot;#1、在一个有序数组中，找某个数是否存在&quot; class=&quot;he</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://example.com/2022/05/02/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2022/05/02/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2022-05-02T13:15:06.000Z</published>
    <updated>2022-05-02T13:16:42.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h3 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h3><p>(1)给定一个数组arr，和一个数num，请把小于等于num的数放在数组的左边，大于num的数放在数组的右边。要求额外空间复杂度O(1)，时间复杂度O(N)</p><p>​        思路：如果[i]&lt;=num  [i]和小于等于区的下一个交换，小于等于区扩大一个，i++；</p><p>​                    如果[i]&gt;num，i++</p><p>​                    </p><p>(2)给定一个数组arr，和一个数num，请把小于num的数放在数组的左边，等于num的数放在中间，大于num的数放在数组的右边。要求额外空间复杂度O(1)，时间复杂度O(N)</p><p>​        思路：[i]&lt;num,i]和小于区的下一个交换,小于区域右扩，i++；</p><p>​                    [i]=num,i++；</p><p>​                    [i]&gt;num，[i]和大于区域的前一个做交换，大于区域左扩，i不变(因为i是新的了)</p><h3 id="快排1-0"><a href="#快排1-0" class="headerlink" title="快排1.0"></a>快排1.0</h3><p>​        就是最后一个值就是num，让前面的所有的小于0的放在左边。大于num的放在右边，让num和大于区域的最左边做交换，就相当于小于num区域被扩充了并且最后一个数就是num，然后让左侧和右侧继续这个过程</p><h3 id="快排2-0"><a href="#快排2-0" class="headerlink" title="快排2.0"></a>快排2.0</h3><p>​        原理和荷兰国旗（2）类似，让最后一个值为num，然后把数组分成小于等于大于num的之后，将num与大于的第一个做交换，让等于num的放在一起，等于num的区域就不需要动了，再让另外两个区域重复这个过程</p><p><strong>快排1.0和2.0都是O(n^2)</strong></p><h3 id="快排3-0"><a href="#快排3-0" class="headerlink" title="快排3.0"></a>快排3.0</h3><p>在数组中随机选择一个数，将这个数和最后一个数交换作为最后一个数，这个算法的复杂度就变成了随机事件，但是将这些概率变成期望，则这个算法的时间复杂度为O(n*logN)</p><p><strong>时间复杂度最低的快速排序，</strong>在数组中随机找一个数，然后将他与最后一个数字交换，然后以最后一个数字为num进行荷兰国旗问题，同时在小于和大于num的区域随机选取一个数字，然后将他与小于和大于num区域的最后一个数字交换重复执行荷兰国旗问题，最后得到一串从小到大排序的数组，<strong>时间复杂度为O(N*logN)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(arr == <span class="hljs-keyword">null</span> || arr.length &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    quickSort(arr, <span class="hljs-number">0</span>, arr.length-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//arr[l...r]排好序</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> L,<span class="hljs-keyword">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L&lt;R)&#123;<br>        swap(arr,L+(<span class="hljs-keyword">int</span>) (Math.random() * (R-L+<span class="hljs-number">1</span>)), R); <span class="hljs-comment">//swap为自带的交换函数；L+(int) (Math.random() * (R-L+1)) 表示在该数组中随机选取一位数字</span><br>        <span class="hljs-keyword">int</span>[] p = partition(arr,L,R);<br>        quitSort(arr,L,p[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>); <span class="hljs-comment">// &lt;区</span><br>        quitSort(arr,p[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>,R); <span class="hljs-comment">// &gt;区</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//这是一个处理arr[l...r]的函数</span><br><span class="hljs-comment">//默认以arr[r]做划分，arr[r] -&gt; p    &lt;p   ==p    &gt;p</span><br><span class="hljs-comment">//返回等于区域（左边界，右边界），所以返回一个长度为2的数组res，res[0] res[1]</span><br><span class="hljs-keyword">public</span> staic <span class="hljs-keyword">int</span>[] partition(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)&#123;<br>    <span class="hljs-keyword">int</span> less = L - <span class="hljs-number">1</span>; <span class="hljs-comment">// &lt;区右边界</span><br>    <span class="hljs-keyword">int</span> more = R; <span class="hljs-comment">// &gt;区左边界</span><br>    <span class="hljs-keyword">while</span>(L &lt; more)&#123; <span class="hljs-comment">// L表示当前数的位置 arr[R] -&gt; 划分值</span><br>        <span class="hljs-keyword">if</span>(arr[L] &lt; arr[R])&#123; <span class="hljs-comment">//当前数  &lt;  划分值</span><br>            less++;<br>            swap(arr, less, L);<br>            L++;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[L] &gt; arr[R])&#123; <span class="hljs-comment">// 当前值 &gt; 划分值</span><br>            more--;<br>            swap(arr, more, L);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            L++;<br>        &#125;<br>    &#125;<br>    swap(arr,more,R);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;less + <span class="hljs-number">1</span>,more&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;h3 id=&quot;荷兰国旗问题&quot;&gt;&lt;a href=&quot;#荷兰国旗问题&quot; class=&quot;headerlink&quot; title=&quot;荷兰国旗问</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="http://example.com/2022/05/02/%E5%A0%86/"/>
    <id>http://example.com/2022/05/02/%E5%A0%86/</id>
    <published>2022-05-02T13:13:06.000Z</published>
    <updated>2022-05-02T13:15:48.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>堆是一种比较特殊的完全二叉树，分为大根堆，小根堆</p><p>1、堆结构就是用数组实现完全的二叉树结构</p><p>2、完全二叉树中如果每棵子树的最大值都在顶部就是大根堆</p><p>3、完全二叉树中如果每棵子树的最小值都在顶部就是小根堆</p><p>4、对结构的heapInsert与heapify操作</p><p>5、堆结构的增大和减少</p><p>6、优先级队列结构，就是堆结构</p><p><strong>大根堆</strong>即指在逻辑上的二叉树结构中，根结点&gt;子结点，总是最大的，<strong>并且在堆的每一个局部都是如此</strong></p><p><strong>小根堆</strong>的性质与大根堆类似，只不过在二叉树的结构中，根结点&lt;子结点</p><h2 id="大根堆"><a href="#大根堆" class="headerlink" title="大根堆"></a>大根堆</h2><p><img src="/2022/05/02/%E5%A0%86/1634370387111.png" alt="1634370387111"></p><p>以n为首的整棵树最大值为n</p><h2 id="小根堆相反"><a href="#小根堆相反" class="headerlink" title="小根堆相反"></a>小根堆相反</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><br>        <span class="hljs-comment">//堆结构，如果不给构造方法传参的话，默认小根堆(如果想让他是一个大根堆的话，就传一个比较器)</span><br>        PriorityQueue&lt;Integer&gt; heap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>        heap.add(<span class="hljs-number">8</span>);<br>        heap.add(<span class="hljs-number">4</span>);<br>        heap.add(<span class="hljs-number">4</span>);<br>        heap.add(<span class="hljs-number">9</span>);<br>        heap.add(<span class="hljs-number">10</span>);<br>        heap.add(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">while</span> (!heap.isEmpty())&#123;<br>            System.out.println(heap.poll());<br>        &#125;<br>    &#125;<br><br>输出结果：<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">4</span>，<span class="hljs-number">8</span>，<span class="hljs-number">9</span>，<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>题目：用户往数组中输入了几个数字，现在用户需要找到最大值，然后去掉，让剩下的数再组成一个大根堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//某个数在index位置，能否往下移动</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span> heapSize)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> left = index * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">//左孩子的下标</span><br><br>    <span class="hljs-keyword">while</span> (left &lt; heapSize)&#123;   <span class="hljs-comment">//下方还有孩子的时候(左孩子比右孩子小，当没有左孩子的时候，就没有右孩子)</span><br><br>        <span class="hljs-comment">//两个孩子，谁的值大，把下标给largest</span><br>        <span class="hljs-keyword">int</span> largest = left + <span class="hljs-number">1</span> &lt; heapSize &amp;&amp; arr[left + <span class="hljs-number">1</span>] &gt; arr[left] ? left+<span class="hljs-number">1</span> : left;<br><br>        <span class="hljs-comment">//父和孩子，谁的值大，把下标给largest</span><br>        largest = arr[largest] &gt; arr[index] ? largest : index;<br><br>        <span class="hljs-keyword">if</span> (largest == index)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        swap(arr,largest,index);<br><br>        index = largest;<br>        left = index * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> tmp = arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = tmp;<br>&#125;<br></code></pre></td></tr></table></figure><p>O(n)*logN </p><p>题：已知一个几乎有序的数组，几乎有序的意思是，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小，请选择一个合适的排序算法针对这个数据进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortedArrDistanceLessK</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> k)</span></span>&#123;<br><br>    <span class="hljs-comment">//默认小根堆</span><br>    PriorityQueue&lt;Integer&gt; heap = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//                  防止k捣乱</span><br>    <span class="hljs-keyword">for</span> (; index &lt; Math.min(arr.length , k); index++)&#123;<br>        heap.add(arr[index]);<br>    &#125;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;index &lt; arr.length; i++ , index++)&#123;<br>        heap.add(arr[index]);<br>        arr[i] = heap.poll();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!heap.isEmpty())&#123;<br>        arr[i++] = heap.poll();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/05/02/%E5%A0%86/1634610114793.png" alt="1634610114793"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆&quot;&gt;&lt;a href=&quot;#堆&quot; class=&quot;headerlink&quot; title=&quot;堆&quot;&gt;&lt;/a&gt;堆&lt;/h1&gt;&lt;p&gt;堆是一种比较特殊的完全二叉树，分为大根堆，小根堆&lt;/p&gt;
&lt;p&gt;1、堆结构就是用数组实现完全的二叉树结构&lt;/p&gt;
&lt;p&gt;2、完全二叉树中如果每棵子树</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的深度</title>
    <link href="http://example.com/2022/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
    <id>http://example.com/2022/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</id>
    <published>2022-04-29T06:48:08.000Z</published>
    <updated>2022-04-29T06:49:08.972Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/image-20220429144838269.png" alt="image-20220429144838269"></p><p><strong>解法：(递归)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right)) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/image-20220429144838269.png&quot; alt=&quot;image-20220429144838269&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>数据流中的中位数</title>
    <link href="http://example.com/2022/04/29/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://example.com/2022/04/29/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</id>
    <published>2022-04-29T04:39:23.000Z</published>
    <updated>2022-04-29T04:44:13.832Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/29/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/image-20220429124407888.png" alt="数据流中的中位数"></p><p><strong>大根堆</strong>即指在逻辑上的二叉树结构中，根结点&gt;子结点，总是最大的，<strong>并且在堆的每一个局部都是如此</strong></p><p><strong>小根堆</strong>的性质与大根堆类似，只不过在二叉树的结构中，根结点&lt;子结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MedianFinder</span> </span>&#123;<br><br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>   <span class="hljs-comment">//小根堆</span><br>    PriorityQueue&lt;Integer&gt; A;<br>    <span class="hljs-comment">//大根堆</span><br>    PriorityQueue&lt;Integer&gt; B;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MedianFinder</span><span class="hljs-params">()</span> </span>&#123;<br>        A = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>        B = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((x, y) -&gt; (y - x));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (A.size() != B.size()) &#123;<br>            <span class="hljs-comment">// 两个堆</span><br>            A.add(num);<br>            B.add(A.poll());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            B.add(num);<br>            A.add(B.poll());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedian</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (A.size() == B.size()) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">double</span>) (A.peek() + B.peek())/<span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//奇数，直接返回小的堆顶</span><br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">double</span>)A.peek();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MedianFinder object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MedianFinder obj = new MedianFinder();</span><br><span class="hljs-comment"> * obj.addNum(num);</span><br><span class="hljs-comment"> * double param_2 = obj.findMedian();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/04/29/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/image-20220429124407888.png&quot; alt=&quot;数据流中的中位数</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>扑克牌中的顺子</title>
    <link href="http://example.com/2022/04/28/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/"/>
    <id>http://example.com/2022/04/28/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/</id>
    <published>2022-04-28T08:59:59.000Z</published>
    <updated>2022-04-28T09:08:47.493Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/28/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/image-20220428170008577.png" alt="扑克牌中的顺子"></p><p><strong>解法：（排序）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isStraight</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-comment">// 定义大小王的数量</span><br>        <span class="hljs-keyword">int</span> jocker = <span class="hljs-number">0</span>;<br>        Arrays.sort(nums);<span class="hljs-comment">// 对nums进行排序（可以判断大小王的数量）</span><br>        <span class="hljs-comment">// 为什么i &lt; 4 因为需要判断这个数与后面的数是否重复，i &lt; 4</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>) &#123;<br>                jocker++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] == nums[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">4</span>] - nums[jocker] &lt; <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/04/28/%E6%89%91%E5%85%8B%E7%89%8C%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%AD%90/image-20220428170008577.png&quot; alt=&quot;扑克牌中的顺子&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>把数组排成最小的数</title>
    <link href="http://example.com/2022/04/28/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <id>http://example.com/2022/04/28/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</id>
    <published>2022-04-28T08:34:20.000Z</published>
    <updated>2022-04-28T08:35:00.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/28/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/image-20220428163449786.png" alt="把数组排成最小的数"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/04/28/%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/image-20220428163449786.png&quot; alt=</summary>
      
    
    
    
    <category term="剑指Offer" scheme="http://example.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
</feed>
