<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>复杂链表的复制</title>
    <link href="/2022/04/04/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <url>/2022/04/04/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/04/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/image-20220404210016882.png" alt="题目"></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.day01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.day01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 11:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test02</span> </span>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val;<br>        Node next;<br>        Node random;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.val = val;<br>            <span class="hljs-keyword">this</span>.next = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">this</span>.random = <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">copyRandomList</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            <span class="hljs-comment">// 从头结点开始,复制并且拼接链表</span><br>            <span class="hljs-comment">// 原链表1-2-3</span><br>            Node cur = head;<br>            <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>                Node tmp = <span class="hljs-keyword">new</span> Node(cur.val); <span class="hljs-comment">// 将链表的头节点的值变为一样</span><br>                tmp.next = cur.next; <span class="hljs-comment">// 将链表的头节点的下一个节点的值变成新链表的下一个节点 1-2 = 1-2</span><br>                cur.next = tmp; <span class="hljs-comment">// 原来是1-2现在变成1-1</span><br>                cur = tmp.next; <span class="hljs-comment">// 原来是1-2 现在变成1-1-2-2</span><br>                <span class="hljs-comment">// 运行完之后变成1-1-2-2-3-3</span><br>            &#125;<br>            <br>            <span class="hljs-comment">// 构建新的random的指向</span><br>            cur = head;<br>            <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">if</span>(cur.random != <span class="hljs-keyword">null</span>)&#123;<br>                    cur.next.random = cur.random.next;<br>                &#125;<br>                cur = cur.next.next;<br>            &#125;<br>            <span class="hljs-comment">// 3. 拆分两链表</span><br>            cur = head.next;<br>            Node pre = head, res = head.next;<br>            <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-keyword">null</span>) &#123;<br>                pre.next = pre.next.next;<br>                cur.next = cur.next.next;<br>                pre = pre.next;<br>                cur = cur.next;<br>            &#125;<br>            pre.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 单独处理原链表尾节点</span><br>            <span class="hljs-keyword">return</span> res;      <span class="hljs-comment">// 返回新链表头节点</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建造者模式</title>
    <link href="/2022/04/04/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/04/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1、盖房项目需求"><a href="#1、盖房项目需求" class="headerlink" title="1、盖房项目需求"></a>1、盖房项目需求</h1><ol><li><p>需要建房子：这一过程为打桩、砌墙、封顶</p></li><li><p>房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的.</p></li><li><p>请编写程序，完成需求.</p></li></ol><h1 id="2、传统方式"><a href="#2、传统方式" class="headerlink" title="2、传统方式"></a>2、传统方式</h1><h2 id="2-1、传统方式解决盖房项目"><a href="#2-1、传统方式解决盖房项目" class="headerlink" title="2.1、传统方式解决盖房项目"></a>2.1、传统方式解决盖房项目</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: AbstrackHouse</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 15:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:传统方式解决建房问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstrackHouse</span> </span>&#123;<br><br>    <span class="hljs-comment">// 打地基</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 砌墙</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 封顶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span>&#123;<br>        buildBasic();<br>        buildWalls();<br>        roofed();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.wang.builder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: CommonHouse</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 15:22</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:建造普通的房子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstrackHouse</span>  </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子打地基&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWalls</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子砌墙&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子封顶&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.wang.builder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: Client</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 15:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:使用者建房子</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        commonHouse.build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">普通房子打地基<br>普通房子砌墙<br>普通房子封顶<br></code></pre></td></tr></table></figure><h2 id="2-2、传统方式的优缺点"><a href="#2-2、传统方式的优缺点" class="headerlink" title="2.2、传统方式的优缺点"></a>2.2、传统方式的优缺点</h2><ol><li><p>优点是比较好理解，简单易操作。</p></li><li><p>设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好. 也就是说，这种设计方案，把产品(即：房子) 和 创建产品的过程(即：建房子流程) 封装在一起，耦合性增强了。</p></li><li><p>解决方案：将产品和产品建造过程解耦 =&gt; 建造者模式.</p></li></ol><h1 id="3、建造者模式"><a href="#3、建造者模式" class="headerlink" title="3、建造者模式"></a>3、建造者模式</h1><h2 id="3-1、什么是建造者模式？"><a href="#3-1、什么是建造者模式？" class="headerlink" title="3.1、什么是建造者模式？"></a>3.1、什么是建造者模式？</h2><p><strong>1.建造者模式</strong>（<strong><strong>Builder Pattern</strong></strong>）** 又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</p><p>2.<strong>建造者模式</strong> 是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</p><h2 id="3-2、建造者模式的四个角色"><a href="#3-2、建造者模式的四个角色" class="headerlink" title="3.2、建造者模式的四个角色"></a>3.2、建造者模式的四个角色</h2><p><strong>1.Product（产品角色）：</strong> 一个具体的产品对象。</p><p><strong>2.Builder（抽象建造者）：</strong>创建一个Product对象的各个部件指定的 接口/<strong>抽象类</strong>。</p><p><strong>3.ConcreteBuilder（具体建造者）：</strong> 实现接口，构建和装配各个部件。</p><p><strong>4.Director（指挥者）：</strong> 构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。</p><h2 id="3-3、代码实现"><a href="#3-3、代码实现" class="headerlink" title="3.3、代码实现"></a>3.3、代码实现</h2><h3 id="3-3-1、house"><a href="#3-3-1、house" class="headerlink" title="3.3.1、house"></a>3.3.1、house</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: House</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 16:02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:产品 -&gt; product</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span> </span>&#123;<br>    <span class="hljs-comment">// 打地基</span><br>    <span class="hljs-keyword">private</span> String baise;<br>    <span class="hljs-comment">// 砌墙</span><br>    <span class="hljs-keyword">private</span> String wall;<br>    <span class="hljs-comment">// 封顶</span><br>    <span class="hljs-keyword">private</span> String roofed;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBaise</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> baise;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBaise</span><span class="hljs-params">(String baise)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.baise = baise;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWall</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> wall;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWall</span><span class="hljs-params">(String wall)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.wall = wall;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRoofed</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> roofed;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoofed</span><span class="hljs-params">(String roofed)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.roofed = roofed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-2、HouseBuilder"><a href="#3-3-2、HouseBuilder" class="headerlink" title="3.3.2、HouseBuilder"></a>3.3.2、HouseBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: HouseBuilder</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 16:04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:抽象的建造者</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> House house = <span class="hljs-keyword">new</span> House();<br><br>    <span class="hljs-comment">// 将建造的流程写好，抽象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWall</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 建造房子好之后将产品（房子）返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> House <span class="hljs-title">buildHouse</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> house;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-3、CommonHouse"><a href="#3-3-3、CommonHouse" class="headerlink" title="3.3.3、CommonHouse"></a>3.3.3、CommonHouse</h3><p>普通房子建造者(具体的建造者1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: CommonHouse</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 16:10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:具体建造者1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonHouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子打地基5m&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWall</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子砌墙10m&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;普通房子屋顶&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-4、HightBuilding"><a href="#3-3-4、HightBuilding" class="headerlink" title="3.3.4、HightBuilding"></a>3.3.4、HightBuilding</h3><p>高楼房子建造者(具体的建造者2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: HightBuilding</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 16:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:具体建造者2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HightBuilding</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HouseBuilder</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildBasic</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高级房子打地基100m&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildWall</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高级房子砌墙20m&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">roofed</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;高级房子透明屋顶&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-5、HouseDirector"><a href="#3-3-5、HouseDirector" class="headerlink" title="3.3.5、HouseDirector"></a>3.3.5、HouseDirector</h3><p>指挥者 其聚合了抽象建造者,使用时传入具体的建造者(抽象建造者的实现类),即可对应建造相应的类型,即返回相应的产品. 另外具体的建造流程由指挥者负责.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: HouseDirector</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 16:23</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:指挥者,动态地去指定制作流程，返回产品</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HouseDirector</span> </span>&#123;<br>    HouseBuilder houseBuilder = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 构造器传入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HouseDirector</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过setter方法传入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHouseBuilder</span><span class="hljs-params">(HouseBuilder houseBuilder)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.houseBuilder = houseBuilder;<br>    &#125;<br><br>    <span class="hljs-comment">// 如何处理建造房子的流程，交给指挥者</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  House <span class="hljs-title">constructorHouse</span><span class="hljs-params">()</span></span>&#123;<br>        houseBuilder.buildBasic();<br>        houseBuilder.buildWall();<br>        houseBuilder.roofed();<br>        <span class="hljs-keyword">return</span> houseBuilder.buildHouse();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-6、client-调用"><a href="#3-3-6、client-调用" class="headerlink" title="3.3.6、client 调用"></a>3.3.6、client 调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.builder.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.builder.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: Client</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/4 16:29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 盖普通房子</span><br>        CommonHouse commonHouse = <span class="hljs-keyword">new</span> CommonHouse();<br>        <span class="hljs-comment">// 准备创建房子的指挥者</span><br>        HouseDirector houseDirector = <span class="hljs-keyword">new</span> HouseDirector(commonHouse);<br><br>        <span class="hljs-comment">// 完成盖房子，返回产品（房子）</span><br>        House house = houseDirector.constructorHouse();<br><br>        System.out.println(<span class="hljs-string">&quot;**************************************&quot;</span>);<br><br>        <span class="hljs-comment">// 盖高楼</span><br>        HightBuilding hightBuilding = <span class="hljs-keyword">new</span> HightBuilding();<br>        <span class="hljs-comment">// 重置建造者</span><br>        houseDirector.setHouseBuilder(hightBuilding);<br>        <span class="hljs-comment">// 完成盖房子，返回产品（房子）</span><br>        houseDirector.constructorHouse();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-7、控制台输出"><a href="#3-3-7、控制台输出" class="headerlink" title="3.3.7、控制台输出"></a>3.3.7、控制台输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">普通房子打地基5m<br>普通房子砌墙10m<br>普通房子屋顶<br>**************************************<br>高级房子打地基100m<br>高级房子砌墙20m<br>高级房子透明屋顶<br></code></pre></td></tr></table></figure><h1 id="4、建造者模式与工厂模式的区别"><a href="#4、建造者模式与工厂模式的区别" class="headerlink" title="4、建造者模式与工厂模式的区别"></a>4、建造者模式与工厂模式的区别</h1><p>​    我们可以看到，建造者模式与工厂模式是极为相似的，总体上，建造者模式仅仅只比工厂模式多了一个“导演类”的角色。在建造者模式的类图中，假如把这个导演类看做是最终调用的客户端，那么图中剩余的部分就可以看作是一个简单的工厂模式了。</p><p>​    与工厂模式相比，建造者模式一般用来创建更为复杂的对象，因为对象的创建过程更为复杂，因此将对象的创建过程独立出来组成一个新的类——导演类。也就是说，工厂模式是将对象的全部创建过程封装在工厂类中，由工厂类向客户端提供最终的产品；而建造者模式中，建造者类一般只提供产品类中各个组件的建造，而将具体建造过程交付给导演类。由导演类负责将各个组件按照特定的规则组建为产品，然后将组建好的产品交付给客户端。</p><p>​    建造者模式与工厂模式类似，他们都是建造者模式，适用的场景也很相似。一般来说，如果产品的建造<strong>很复杂</strong>，那么请用工厂模式；如果产品的建造<strong>更复杂</strong>，那么请用建造者模式。</p><h1 id="5、建造者模式的注意事项和细节"><a href="#5、建造者模式的注意事项和细节" class="headerlink" title="5、建造者模式的注意事项和细节"></a>5、建造者模式的注意事项和细节</h1><p>1、 客户端(使用程序)<strong>不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</strong></p><p>2、每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者， <strong>用户使用不同的具体建造者即可得到不同的产品对象</strong></p><p><strong>3、</strong> <strong>可以更加精细地控制产品的创建过程</strong> 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</p><p><strong>4、增加新的具体建造者无须修改原有类库的代码，</strong>指挥者类针对抽象建造者类编程，系统扩展方便，符合 <strong>“开闭原则”</strong> <strong>建造者模式的注意事项和细节</strong></p><p>5、 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，<strong>如果产品之间的差异性很大，则不适合使用建造者模式</strong>，因此其使用范围受到一定的限制。</p><p>6、如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，因此在这种情况下，要考虑是否选择建造者模式.</p><p><strong>7、抽象工厂模式VS建造者模式</strong></p><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维数组中的查找</title>
    <link href="/2022/04/04/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/04/04/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/04/04/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/image-20220404103329598.png" alt="题目"></p><p><strong>题解：</strong></p><p>1、暴力破解：直接每一行每一列进行遍历然后查找有没有与给定的值相等的数，浪费了数组的<strong>局部有限性</strong></p><p>2、从左下角进行遍历，如果左下角的数字matrix[ n] [ m ]&gt;所提供的target，那么target一定在matrix[ n] [ m ]上方，</p><p>然后与matrix[ n-1] [ m ]比较，如果matrix[ n-1] [ m ]&lt;所提供的target，那么就往右方也就是matrix[ n-1] [ m+1 ]走</p><p>3、如果左下角的数字matrix[ n] [ m ]&lt;所提供的target，那么target一定在matrix[ n] [ m ]右方，</p><p>然后与matrix[ n] [ m+1 ]比较，如果matrix[ n] [ m+1 ]&gt;所提供的target，那么就往上方也就是matrix[ n-1] [ m+1 ]走</p><p><strong>解题代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> n = matrix.length-<span class="hljs-number">1</span>; <span class="hljs-comment">// 数组的长度</span><br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<span class="hljs-comment">// 判断数组有没有值</span><br>        <span class="hljs-keyword">int</span> m = matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>; <span class="hljs-comment">// 数组的宽度</span><br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; <span class="hljs-comment">// target在数组中的纵坐标</span><br>        <span class="hljs-keyword">while</span> (j &lt;= m &amp;&amp; n&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span> (matrix[n][j]&gt;target)&#123; <span class="hljs-comment">// 如果左下角的数字大于target那么往上走</span><br>                n--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[n][j]&lt;target)&#123;<span class="hljs-comment">// 如果左下角的数字大于target那么往右走</span><br>                j++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度：</strong>O(m+n)(m和n就是数组的长度和宽度)</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/2022/04/03/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/04/03/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="1、克隆羊问题"><a href="#1、克隆羊问题" class="headerlink" title="1、克隆羊问题"></a>1、克隆羊问题</h1><p>场景：现在又一只羊tom，年龄为：1，颜色为：白色，请编写程序创建和tom羊属性完全相同的10只羊</p><h1 id="2、传统方式"><a href="#2、传统方式" class="headerlink" title="2、传统方式"></a>2、传统方式</h1><h2 id="2-1、传统方式解决克隆羊"><a href="#2-1、传统方式解决克隆羊" class="headerlink" title="2.1、传统方式解决克隆羊"></a>2.1、传统方式解决克隆羊</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.prototype;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: sheep</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 15:37</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:羊的实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sheep</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, String color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(String color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sheep&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, color=&#x27;&quot;</span> + color + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.wang.prototype;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: Client</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 15:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:克隆羊的操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 用传统的方法</span><br>        Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;白色&quot;</span>);<br><br>        Sheep sheep2 = <span class="hljs-keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());<br>        Sheep sheep3 = <span class="hljs-keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());<br>        Sheep sheep4 = <span class="hljs-keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());<br>        Sheep sheep5 = <span class="hljs-keyword">new</span> Sheep(sheep.getName(), sheep.getAge(), sheep.getColor());<br>        <span class="hljs-comment">// ......</span><br><br>        System.out.println(sheep);<br>        System.out.println(sheep2);<br>        System.out.println(sheep3);<br>        System.out.println(sheep4);<br>        System.out.println(sheep5);<br>        <span class="hljs-comment">// ......</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>&#125;<br>sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>&#125;<br>sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>&#125;<br>sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>&#125;<br>sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2、传统的方式的优缺点"><a href="#2-2、传统的方式的优缺点" class="headerlink" title="2.2、传统的方式的优缺点"></a>2.2、<strong>传统的方式的优缺点</strong></h2><ol><li><p>优点是比较好理解，简单易操作。</p></li><li><p>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低</p></li><li><p>总是需要重新初始化对象，而不是动态地获得对象运行时的状态, 不够灵活</p></li><li><p>改进的思路分析</p></li></ol><p><strong>思路：</strong>Java中Object类是所有类的根类，Object类提供了一个clone()方法，该方法可以将一个Java对象复制一份，但是需要实现clone的Java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力 =&gt; <strong>原型模式</strong></p><h1 id="3、原型模式"><a href="#3、原型模式" class="headerlink" title="3、原型模式"></a>3、原型模式</h1><h2 id="3-1、什么是原型模式？"><a href="#3-1、什么是原型模式？" class="headerlink" title="3.1、什么是原型模式？"></a>3.1、什么是原型模式？</h2><ol><li>原型模式(Prototype模式)是指：用<strong>原型实例指定创建对象的种类</strong>，<strong>并且通过拷贝这些原型</strong>，<strong>创建新的对象</strong></li><li>原型模式是一种创建型设计模式，允许一个对象再创建另外一个可定制的对象， 无需知道如何创建的细节</li><li>工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建，即 <strong>对象.clone()</strong></li><li>形象的理解：孙大圣拔出猴毛， 变出其它孙大圣</li></ol><h2 id="3-2、浅拷贝的介绍"><a href="#3-2、浅拷贝的介绍" class="headerlink" title="3.2、浅拷贝的介绍"></a>3.2、浅拷贝的介绍</h2><ol><li><p>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。</p></li><li><p>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</p></li><li><p><strong>前面我们克隆羊就是浅拷贝</strong></p></li><li><p>浅拷贝是使用默认的 clone()方法来实现</p><p>sheep = (Sheep) <strong>super.clone();</strong> </p></li></ol><p><strong>浅拷贝：</strong>就是A对象指向B对象，然后拷贝的时候将A克隆成A2对象，A2对象所指的对象就是B对象（基本数据类型与String类型使用浅拷贝）</p><h2 id="3-3、浅拷贝解决克隆羊"><a href="#3-3、浅拷贝解决克隆羊" class="headerlink" title="3.3、浅拷贝解决克隆羊"></a>3.3、浅拷贝解决克隆羊</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.prototype.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: sheep</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 16:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:羊的原型模式的体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String color;<br>    <span class="hljs-keyword">private</span> String address =  <span class="hljs-string">&quot;蒙古羊&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sheep</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, String color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(String color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sheep&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, color=&#x27;&quot;</span> + color + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 克隆该实例，使用默认的clone方法来完成</span><br>    <span class="hljs-comment">// 默认的是直接return super.clone()</span><br>    <span class="hljs-comment">// 在这里强转是为了被对象接收，然后直接捕获并处理异常，</span><br>    <span class="hljs-comment">// 调试的时候可以一步一步走，如果不是为了在bean中处理异常的话完全可以不改自动生成的内容直接return</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        Sheep sheep = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sheep = (Sheep) <span class="hljs-keyword">super</span>.clone();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> sheep;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">package</span> com.wang.prototype.improve;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype.improve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: client</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 16:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;原型模式完成对象的创建&quot;</span>);<br>        Sheep sheep = <span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;tom&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;白色&quot;</span>);<br>        Sheep sheep2 = (Sheep) sheep.clone();<br>        Sheep sheep3 = (Sheep) sheep.clone();<br>        Sheep sheep4 = (Sheep) sheep.clone();<br>        Sheep sheep5 = (Sheep) sheep.clone();<br><br>        System.out.println(<span class="hljs-string">&quot;sheep2 =&quot;</span> + sheep2);<br>        System.out.println(<span class="hljs-string">&quot;sheep3 =&quot;</span> + sheep3);<br>        System.out.println(<span class="hljs-string">&quot;sheep4 =&quot;</span> + sheep4);<br>        System.out.println(<span class="hljs-string">&quot;sheep5 =&quot;</span> + sheep5);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">原型模式完成对象的创建<br>sheep2 =Sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>, address=<span class="hljs-string">&#x27;蒙古羊&#x27;</span>&#125;<br>sheep3 =Sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>, address=<span class="hljs-string">&#x27;蒙古羊&#x27;</span>&#125;<br>sheep4 =Sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>, address=<span class="hljs-string">&#x27;蒙古羊&#x27;</span>&#125;<br>sheep5 =Sheep&#123;name=<span class="hljs-string">&#x27;tom&#x27;</span>, age=<span class="hljs-number">1</span>, color=<span class="hljs-string">&#x27;白色&#x27;</span>, address=<span class="hljs-string">&#x27;蒙古羊&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4、深拷贝的介绍"><a href="#3-4、深拷贝的介绍" class="headerlink" title="3.4、深拷贝的介绍"></a>3.4、深拷贝的介绍</h2><ol><li><p>复制对象的所有基本数据类型的成员变量值</p></li><li><p>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，<strong>对象进行深拷贝要对整个对象进行拷贝</strong></p></li><li><p>深拷贝实现方式1：重写clone方法来实现深拷贝</p></li><li><p>深拷贝实现方式2：通过对象序列化实现深拷贝(推荐)</p></li></ol><p><strong>深拷贝：</strong>就是A对象指向B对象，然后拷贝的时候将A克隆成A2对象，A2对象所指的对象是B2对象</p><h2 id="3-5、深拷贝解决克隆羊"><a href="#3-5、深拷贝解决克隆羊" class="headerlink" title="3.5、深拷贝解决克隆羊"></a>3.5、深拷贝解决克隆羊</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.prototype.deepclone;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype.deepclone</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: DeepCloneableTarget</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 17:48</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:s深拷贝</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCloneableTarget</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>, <span class="hljs-title">Cloneable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br>    <span class="hljs-keyword">private</span> String cloneName;<br>    <span class="hljs-keyword">private</span> String cloneClass;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepCloneableTarget</span><span class="hljs-params">(String cloneName, String cloneClass)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cloneName = cloneName;<br>        <span class="hljs-keyword">this</span>.cloneClass = cloneClass;<br>    &#125;<br><br>    <span class="hljs-comment">// 因为该类的属性，都是String，因此我们这里使用默认的clone完成即可</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.wang.prototype.deepclone;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype.deepclone</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: DeepProtoType</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 17:53</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepProtoType</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span>, <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<span class="hljs-comment">// String属性</span><br>    <span class="hljs-keyword">public</span> DeepCloneableTarget deepCloneableTarget;<span class="hljs-comment">// 引用类型</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeepProtoType</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 深拷贝 - 方式1 使用clone 方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br><br>        Object deep = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 这里完成对基本数据类型（属性）和String的克隆</span><br>        deep = <span class="hljs-keyword">super</span>.clone();<br>        <span class="hljs-comment">// 对引用类型的属性进行单独的处理</span><br>        DeepProtoType deepProtoType = (DeepProtoType) deep;<br>        deepProtoType.deepCloneableTarget = (DeepCloneableTarget) deepCloneableTarget.clone();<br><br>        <span class="hljs-keyword">return</span> deepProtoType;<br>    &#125;<br><br>    <span class="hljs-comment">// 深拷贝 - 方式2 通过对象的序列化实现（***）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">deepClone</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建流对象</span><br>        ByteArrayOutputStream bos = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 字节数组输出流</span><br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 对象输出流</span><br>        ByteArrayInputStream bis = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 字节数组输入流</span><br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 对象输入流</span><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">// 序列化</span><br>            bos = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(bos);<br>            oos.writeObject(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 当前这个对象以对象流的方式输出</span><br><br>            <span class="hljs-comment">//反序列化</span><br>            bis = <span class="hljs-keyword">new</span> ByteArrayInputStream(bos.toByteArray());<br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(bis);<br>            DeepProtoType copyObj = (DeepProtoType) ois.readObject();<br><br>            <span class="hljs-keyword">return</span> copyObj;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                bos.close();<br>                oos.close();<br>                bis.close();<br>                ois.close();<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e2)&#123;<br>                System.out.println(e2.getMessage());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">package</span> com.wang.prototype.deepclone;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.prototype.deepclone</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: Client</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/4/3 19:39</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        DeepProtoType p = <span class="hljs-keyword">new</span> DeepProtoType();<br>        p.name = <span class="hljs-string">&quot;宋江&quot;</span>;<br>        p.deepCloneableTarget = <span class="hljs-keyword">new</span> DeepCloneableTarget(<span class="hljs-string">&quot;大牛&quot;</span>, <span class="hljs-string">&quot;小牛&quot;</span>);<br><br>        <span class="hljs-comment">// 方式1完成深拷贝</span><br>        DeepProtoType p2 = (DeepProtoType) p.clone();<br><br>        System.out.println(<span class="hljs-string">&quot;p.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p.deepCloneableTarget = &quot;</span> + p.deepCloneableTarget.hashCode());<span class="hljs-comment">// p.name=宋江p.deepCloneableTarget = 460141958</span><br>        System.out.println(<span class="hljs-string">&quot;p2.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p2.deepCloneableTarget = &quot;</span> + p2.deepCloneableTarget.hashCode());<span class="hljs-comment">//p2.name=宋江p2.deepCloneableTarget = 1163157884</span><br><br>        <span class="hljs-comment">// 方式2完成深拷贝</span><br>        DeepProtoType p3 = (DeepProtoType) p.deepClone();<br><br>        System.out.println(<span class="hljs-string">&quot;p.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p.deepCloneableTarget = &quot;</span> + p.deepCloneableTarget.hashCode());<span class="hljs-comment">// p.name=宋江p.deepCloneableTarget = 460141958</span><br>        System.out.println(<span class="hljs-string">&quot;p3.name=&quot;</span> + p.name + <span class="hljs-string">&quot;p3.deepCloneableTarget = &quot;</span> + p3.deepCloneableTarget.hashCode()); <span class="hljs-comment">//p3.name=宋江p3.deepCloneableTarget = 2094548358</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6、原型模式的注意事项和细节"><a href="#3-6、原型模式的注意事项和细节" class="headerlink" title="3.6、原型模式的注意事项和细节"></a>3.6、原型模式的注意事项和细节</h2><ol><li><p>创建新的对象比较复杂时，可以利用原型模式简化<strong>对象的创建过程，同时也能够提高</strong>效率</p></li><li><p>不用重新初始化对象，而是<strong>动态地获得对象运行时</strong>的状态</p></li><li><p>如果原始对象发生变化(增加或者减少属性)，其它克隆对象的也会发生相应的变化，无需修改代码</p></li><li><p>在实现深克隆的时候可能需要比较复杂的代码</p></li><li><p> <strong>缺点</strong>：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了ocp原则，这点请同学们注意.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/27/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/27/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂模式概述"><a href="#工厂模式概述" class="headerlink" title="工厂模式概述"></a>工厂模式概述</h1><p>工厂模式的主要解决的问题是，将原来分布在各个地方的对象创建过程单独抽离出来，交给工厂类负责创建。其他地方想要使用对象直接找工厂（即调用工厂的方法）获取对象。</p><h1 id="工厂模式的三种类型"><a href="#工厂模式的三种类型" class="headerlink" title="工厂模式的三种类型"></a>工厂模式的三种类型</h1><p>工厂模式主要有三种类型<br>1、简单工厂<br>2、工厂方法<br>3、抽象工厂</p><h2 id="1、简单工厂"><a href="#1、简单工厂" class="headerlink" title="1、简单工厂"></a>1、简单工厂</h2><p>拿泡茶为例，茶叶有好多种类，比如龙井、碧螺春、毛尖等。<br>首先一个ITea接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITea</span> </span>&#123;<br><br>    <span class="hljs-comment">// 沏茶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeTea</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义两种类型的茶，西湖龙井和碧螺春：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LongjingTea</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITea</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeTea</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;西湖龙井&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiluochunTea</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITea</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeTea</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;碧螺春&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假如其它有一处代码要使用“茶”这个对象沏一壶茶，有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  准备沏一杯茶，根据传入的参数决定不同的茶叶类型</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ITea <span class="hljs-title">prepareTea</span><span class="hljs-params">(String type)</span></span>&#123;<br>    ITea tea = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;longjing&quot;</span>))&#123;<br>        tea = <span class="hljs-keyword">new</span> LongjingTea();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;biluochun&quot;</span>))&#123;<br>        tea = <span class="hljs-keyword">new</span> BiluochunTea();<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tea != <span class="hljs-keyword">null</span>)&#123;<br>        tea.makeTea();<br>    &#125;<br>    <span class="hljs-keyword">return</span> tea;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们可以分析下不使用工厂模式的情况：</p><p>如果我们的工程中不至一处用了类似这段代码逻辑，那增加一种茶叶的类型（比如毛尖）就需要修改多处代码，不利于维护。</p><p>因此，可以考虑，将创建茶叶对象的逻辑抽离出来，单独放到一个类中，这个类便是工厂类（专门生产茶叶的工厂）。这样维护起来便方便很多，客户端代码也无需知道对象创建的具体细节，只需要从工厂类中获取对象即可。</p><p><strong>简单工厂类实现如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeaFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ITea <span class="hljs-title">createTea</span><span class="hljs-params">(String type)</span></span>&#123;<br>        ITea tea = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;longjing&quot;</span>))&#123;<br>            tea = <span class="hljs-keyword">new</span> LongjingTea();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type.equals(<span class="hljs-string">&quot;biluochun&quot;</span>))&#123;<br>            tea = <span class="hljs-keyword">new</span> BiluochunTea();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tea != <span class="hljs-keyword">null</span>)&#123;<br>            tea.makeTea();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tea;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码要使用茶对象，需要从工厂中获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    TeaFactory teaFactory = <span class="hljs-keyword">new</span> TeaFactory();<br>    ITea tea = teaFactory.createTea(<span class="hljs-string">&quot;longjing&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、工厂方法模式"><a href="#2、工厂方法模式" class="headerlink" title="2、工厂方法模式"></a>2、工厂方法模式</h2><p>在上面的简单工厂中，如果要创建的产品类型较多，且各个产品创建的过程不尽相同，则一个工厂类职责会变得越来越多，不符合单一职责原则。<br>另外简单工厂也不符合开闭原则。要新增一种产品需要修改原来的工厂类。</p><p>因此，工厂方法模式中，将生产各种类型的产品的工厂也做了抽象分离。比如，上面例子中的，生产龙井的有专门的龙井工厂，生产碧螺春的有专门的碧螺春工厂。</p><p>看代码，接着上面的实例进行改造。首先创建统一的工厂接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生产茶叶的统一接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ITeaFactory</span> </span>&#123;<br><br>    <span class="hljs-comment">// 生产茶叶</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ITea <span class="hljs-title">createTea</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后创建两个生产不同类型产品的工厂实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LongjingTeaFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeaFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ITea <span class="hljs-title">createTea</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LongjingTea();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BiluochunTeaFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ITeaFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ITea <span class="hljs-title">createTea</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BiluochunTea();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryMethodTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ITeaFactory factory = <span class="hljs-keyword">new</span> LongjingTeaFactory();<br>        factory.createTea();<br><br>        factory = <span class="hljs-keyword">new</span> BiluochunTeaFactory();<br>        factory.createTea();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要新增一种茶叶，比如毛尖，只需要新建一个生产毛尖的工厂类实现ITeaFactory即可。可以看到符合开闭原则、单一职责原则。</p><p><strong>工厂方法适用于以下场景：</strong><br>1、创建对象需要大量重复的代码。<br>2、客户端（应用层）不依赖于产品类实例如何被创建、实现等细节。<br>3、一个类通过其子类来指定创建哪个对象。</p><p><strong>工厂方法也有缺点：</strong><br>1、类的个数容易过多，增加复杂度。<br>2、增加了系统的抽象性和理解难度。</p><h2 id="3、抽象工厂"><a href="#3、抽象工厂" class="headerlink" title="3、抽象工厂"></a><strong>3、抽象工厂</strong></h2><p>场景:当我们需要多个产品族，每一个产品族里有一系列产品，这一系列产品一般是不变的，如果经常需要变动，可以使用工厂模式而非抽象工厂</p><p>举例说明下，有两个工厂，美的、格力。这两个工厂都生产两种产品：冰箱和洗衣机。下面使用抽象工厂模式来描述每个工厂的两种产品的创建过程。</p><p>1、首先创建两个产品的接口类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 冰箱</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IFridge</span> </span>&#123;<br>    <span class="hljs-comment">// 冷藏</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">coldStorage</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 洗衣机</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IWasher</span> </span>&#123;<br>    <span class="hljs-comment">// 洗衣服</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">wash</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、创建每个工厂的两种产品（总共四种产品）：</p><p>美的的冰箱和洗衣机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MeideFridge</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IFridge</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">coldStorage</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;美的冰箱&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MeideWasher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IWasher</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wash</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;美的洗衣机&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>格力的冰箱和洗衣机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeliFridge</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IFridge</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">coldStorage</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;格力冰箱&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeliWasher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IWasher</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wash</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;格力洗衣机&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、创建抽象工厂接口</p><p>家用电器工厂，生产一组产品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 抽象工厂接口，家用电器工厂，生产冰箱和洗衣机</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IHouseholdElectricFactory</span> </span>&#123;<br><br>    <span class="hljs-function">IFridge <span class="hljs-title">createFridge</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">IWasher <span class="hljs-title">createWasher</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、创建具体产品等级的工厂</p><p>这里是创建美的和格力的工厂实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MeideHouseholdFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IHouseholdElectricFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IFridge <span class="hljs-title">createFridge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MeideFridge();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IWasher <span class="hljs-title">createWasher</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MeideWasher();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeliHouseholdFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IHouseholdElectricFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IFridge <span class="hljs-title">createFridge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GeliFridge();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> IWasher <span class="hljs-title">createWasher</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GeliWasher();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、客户端代码使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbsFactoryTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        IHouseholdElectricFactory factory = <span class="hljs-keyword">new</span> MeideHouseholdFactory();<br>        factory.createFridge().coldStorage();<br>        factory.createWasher().wash();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1、什么是单例模式？"><a href="#1、什么是单例模式？" class="headerlink" title="1、什么是单例模式？"></a>1、什么是单例模式？</h2><p>所谓类的单例设计模式，就是<strong>采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法(静态方法)。</p><h2 id="2、单例模式的八种方式"><a href="#2、单例模式的八种方式" class="headerlink" title="2、单例模式的八种方式"></a>2、单例模式的八种方式</h2><p>单例模式有八种方式：</p><p><strong>1、饿汉式（静态常量）</strong></p><p><strong>2、饿汉式（静态代码块）</strong></p><p>3、 懒汉式（线程不安全）</p><p>4、 懒汉式（线程安全，同步方法）</p><p>5、 懒汉式（线程安全，同步代码块）</p><p><strong>3、4、5为单null检查</strong></p><p><strong>6、双重检查（双null检查）</strong></p><p><strong>7、静态内部类</strong></p><p><strong>8、枚举</strong></p><h2 id="3、饿汉式（静态常量）"><a href="#3、饿汉式（静态常量）" class="headerlink" title="3、饿汉式（静态常量）"></a>3、<strong>饿汉式（静态常量）</strong></h2><p>饿汉式（静态常量）应用实例</p><p><strong>步骤如下</strong>：</p><ol><li><p>构造器私有化 (防止 通过new得到对象实例 )</p></li><li><p>类的内部创建对象</p></li><li><p>向外暴露一个静态的公共方法。getInstance</p></li><li><p>代码实现</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: type1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/19 11:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">type1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        Singleton instance = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 饿汉式（静态常量）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-comment">// 1、构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 2、本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br>    <span class="hljs-comment">// 3、提供一个共有的静态方法，返回对象实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>证明两个对象实例是同一个对象实例</p><p><strong>优缺点说明</strong>：</p><ol><li><p><strong>优点：</strong>这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p></li><li><p><strong>缺点：</strong>在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费</p></li><li><p>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法， 但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</p></li><li><p>结论：这种单例模式<strong>可用</strong>，<strong>可能</strong>造成内存浪费</p></li></ol><h2 id="4、饿汉式（静态代码块）"><a href="#4、饿汉式（静态代码块）" class="headerlink" title="4、饿汉式（静态代码块）"></a>4、饿汉式（静态代码块）</h2><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: type2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/19 17:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">type2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        Singleton instance = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 饿汉式（静态代码块）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-comment">// 1、构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 2、本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">// 在静态代码块中，创建单例对象</span><br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-comment">// 3、提供一个共有的静态方法，返回对象实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>证明两个对象实例是同一个对象实例</p><p><strong>优缺点说明</strong>：</p><ol><li><p>这种方式和<strong>饿汉式的静态常量</strong>其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p></li><li><p>结论：这种单例模式可用，但是可能造成内存浪费</p></li></ol><h2 id="5、懒汉式（线程不安全）"><a href="#5、懒汉式（线程不安全）" class="headerlink" title="5、懒汉式（线程不安全）"></a>5、懒汉式（线程不安全）</h2><p> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type3;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.tyoe3</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/19 18:05</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 单例模式单null检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;懒汉式1，线程不安全&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singlenton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 提供一个静态的公有方法，当使用到该方法时，才会去创建instance</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 说明还没有创建instance</span><br>            instance = <span class="hljs-keyword">new</span> Singlenton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">懒汉式<span class="hljs-number">1</span>，线程不安全<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>起到了Lazy Loading的效果，但是只能在单线程下使用。</p></li><li><p>如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便<strong>会产生多个实例。</strong>所以在多线程环境下不可使用这种方式</p></li><li><p>结论：<strong>在实际开发中，不要使用这种方式.</strong></p></li></ol><h2 id="6、懒汉式（线程安全，同步方法）"><a href="#6、懒汉式（线程安全，同步方法）" class="headerlink" title="6、懒汉式（线程安全，同步方法）"></a>6、懒汉式（线程安全，同步方法）</h2><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type4;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type4</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/20 17:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:懒汉式（线程安全，同步方法）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;懒汉式2，线程安全&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 懒汉式（线程安全，同步方法）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singlenton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span><br>    <span class="hljs-comment">// 懒汉式</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 说明还没有创建instance</span><br>            instance = <span class="hljs-keyword">new</span> Singlenton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">懒汉式<span class="hljs-number">2</span>，线程安全<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>解决了线程不安全问题</p></li><li><p>效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行<strong>同步效率太低</strong></p></li><li><p>结论：<strong>在实际开发中，不推荐使用这种方式</strong></p></li></ol><h2 id="7、懒汉式-线程安全，同步代码块"><a href="#7、懒汉式-线程安全，同步代码块" class="headerlink" title="7、懒汉式(线程安全，同步代码块)"></a>7、懒汉式(线程安全，同步代码块)</h2><p>​    <img src="/2022/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20220326182601250.png" alt="image-20220326182601250"></p><p><strong>优缺点说明</strong>：</p><ol><li>这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，</li></ol><p>改为同步产生实例化的的代码块</p><ol start="2"><li><p><strong>但是这种同步并不能起到线程同步的作用</strong>。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例</p></li><li><p>结论：在<strong>实际开发中，不能使用这种方</strong>式</p></li></ol><h2 id="8、双重检查"><a href="#8、双重检查" class="headerlink" title="8、双重检查 *"></a>8、双重检查 *</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type6;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type6</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/26 18:50</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:双重检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;双重检查&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 双重检查</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singlenton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 提供一个静态的公有方法，加入双重检查的代码，解决线程安全问题，同时解决懒加载的问题</span><br>    <span class="hljs-comment">// 两个线程同时进入到34行 假设a先进去那么b就进不去</span><br>    <span class="hljs-comment">// b进入的时候a已经完成了对Singlenton的实例化 也就是说b进入不了36行 所以退出代码块</span><br>    <span class="hljs-comment">// 第三个第四个线程进入的时候当到了34行发现 instance ！= null 于是直接退出</span><br>    <span class="hljs-comment">// 实现单例化 保证了效率 推荐使用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 说明还没有创建instance</span><br>            <span class="hljs-keyword">synchronized</span> (Singlenton.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> Singlenton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">双重检查<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。</p></li><li><p>这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象，也避免的反复进行方法同步.</p></li><li><p><strong>线程安全；延迟加载；效率较高</strong></p></li><li><p>结论：在实际开发中，<strong>推荐使用这种单例设计模式</strong></p></li></ol><h2 id="9、静态内部类"><a href="#9、静态内部类" class="headerlink" title="9、静态内部类 *"></a>9、静态内部类 *</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type7;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type7</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/27 17:11</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:静态内部类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;使用静态内部类完成单例模式&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 静态内部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singlenton instance;<br><br>    <span class="hljs-comment">// 构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 写一个静态内部类，该类中有一个静态属性 Singlenton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singlenton INSTANCE = <span class="hljs-keyword">new</span> Singlenton();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1、SinglentonInstance在Singlenton类装载的时候不会立刻执行保证不会进行这个SinglentonInstance静态内部类的装载</span><br><span class="hljs-comment">    从而保证懒加载可用</span><br><span class="hljs-comment">    2、当我们调用getInstance的时候会去去SinglentonInstance静态内部类的INSTANCE属性导致静态内部类装载保证装载的时候的线程安全</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 提供一个静态的公有方法,直接返回SinglentonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> SinglentonInstance.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">使用静态内部类完成单例模式<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p></li><li><p>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p></li><li><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p></li><li><p>优点：避免了<strong>线程不安全</strong>，利用<strong>静态内部类特点实现延迟加载，效率高</strong></p></li><li><p>结论：<strong>推荐使用.</strong></p></li></ol><h2 id="10、枚举"><a href="#10、枚举" class="headerlink" title="10、枚举 *"></a>10、枚举 *</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type8;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type8</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SingletonTest08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/27 17:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:枚举</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance = Singleton.INSTANCE;<br>        Singleton instance2 = Singleton.INSTANCE;<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br><br>        instance.sayOk();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用枚举可以实现单例。</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    INSTANCE; <span class="hljs-comment">// 属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOk</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 方法</span><br>        System.out.println(<span class="hljs-string">&quot;OK~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br>OK~<br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p></li><li><p>这种方式是<strong>Effective Java作者Josh Bloch 提倡的方式</strong></p></li><li><p>结论：<strong>推荐使用</strong></p></li></ol><h2 id="单例模式注意事项和细节说明"><a href="#单例模式注意事项和细节说明" class="headerlink" title="单例模式注意事项和细节说明"></a>单例模式注意事项和细节说明</h2><p><strong>推荐使用：</strong></p><p><strong>饿汉式，双重检查，静态内部类，枚举</strong></p><p><strong>单例模式注意事项和细节说明</strong></p><ol><li><p>单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</p></li><li><p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</p></li><li><p>单例模式<strong>使用的场景</strong>：需要<strong>频繁的进行创建和销毁的对象</strong>、创建对象时耗时过多或耗费资源过多(即：<strong>重量级对象</strong>)，但又经常用到的对象、<strong>工具类对象</strong>、频繁访问数据库或文件的对象(比如<strong>数据源、session工厂</strong>等)</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类的六种关系</title>
    <link href="/2022/03/10/%E7%B1%BB%E7%9A%84%E5%85%AD%E7%A7%8D%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/03/10/%E7%B1%BB%E7%9A%84%E5%85%AD%E7%A7%8D%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、依赖关系（Dependence）"><a href="#一、依赖关系（Dependence）" class="headerlink" title="一、依赖关系（Dependence）"></a>一、依赖关系（Dependence）</h1><p>只要是在<strong>类中用到了对方</strong>，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。</p><p><strong>小结:</strong></p><p>1、类中用到了对方</p><p>2、如果是类的成员属性</p><p>3、如果是方法的返回类</p><p>4、是方法接收的参数类</p><p>5、方法中使用到</p><h1 id="二、泛化关系-generalization）"><a href="#二、泛化关系-generalization）" class="headerlink" title="二、泛化关系(generalization）"></a>二、泛化关系(generalization）</h1><p>泛化关系实际上就是继承关系，他是<strong>依赖关系的特例</strong></p><p><strong>小结:</strong></p><p>1、泛化关系实际上就是继承关系</p><p>2、如果A类继承了B类，我们就说A和B存在泛化关系</p><h1 id="三、实现关系（Implementation）"><a href="#三、实现关系（Implementation）" class="headerlink" title="三、实现关系（Implementation）"></a>三、实现关系（Implementation）</h1><p>实现关系实际上就是A类实现B接口，他是<strong>依赖关系的特例</strong></p><h1 id="四、关联关系（Association）"><a href="#四、关联关系（Association）" class="headerlink" title="四、关联关系（Association）"></a>四、关联关系（Association）</h1><p>关联关系实际上就是<strong>类与类之间的联系，他是依赖关系的特例</strong></p><p>关联具有<strong>导航性</strong>：即双向关系或单向关系</p><p>关系具有多重性：如“1”（表示有且仅有一个），“0…”（表示0个或者多个），“0，1”（表示0个或者一个），“n…m”(表示n到 m个都可以),“m…*”（表示至少m个）。</p><h1 id="五、聚合关系（Aggregation）"><a href="#五、聚合关系（Aggregation）" class="headerlink" title="五、聚合关系（Aggregation）"></a>五、聚合关系（Aggregation）</h1><p>聚合关系（Aggregation）表示的是<strong>整体和部分</strong>的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。</p><p>如：一台电脑由键盘(keyboard)、显示器(monitor)，鼠标等组成；组成电脑的各个配件是可以从电脑上分离出来的，</p><h1 id="六、组合关系（Composition）"><a href="#六、组合关系（Composition）" class="headerlink" title="六、组合关系（Composition）"></a>六、组合关系（Composition）</h1><p>组合关系：也是整体与部分的关系，但是整体与部分不可以分开</p><p><strong>案例</strong>：在程序中我们定义实体：Person与IDCard、Head, 那么 Head 和Person 就是 组合，IDCard 和 Person 就是聚合。</p><p>但是如果在程序中Person实体中定义了对IDCard进行<strong>级联删除</strong>，即删除Person时连同IDCard一起删除，那么IDCard 和 Person 就是组合了</p><h1 id="七、聚合组合的区别"><a href="#七、聚合组合的区别" class="headerlink" title="七、聚合组合的区别"></a>七、聚合组合的区别</h1><p><strong>聚合</strong>有参构造的时候将类的对象放进去<br><strong>组合</strong>就是无参构造的时候将对象new进去</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式七大原则</title>
    <link href="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><p><strong>单一职责原则：</strong>一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险。</p><p><strong>接口隔离原则：</strong>将不同功能定义在不同接口中实现接口隔离。</p><p><strong>依赖倒置原则：</strong>针对接口编程，依赖于抽象类或接口而不依赖于具体实现类。</p><p><strong>里氏替换原则：</strong>任何基类可以出现的地方，子类一定可以出现。</p><p><strong>开放封闭原则：</strong>对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p><p><strong>迪米特原则：</strong>每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度。</p><p><strong>合成复用原则：</strong>尽量使用组合(has-a)/聚合(contains-a)而不是继承(is-a)达到软件复用的目的。</p><h2 id="1、单一职责原则-各行其责"><a href="#1、单一职责原则-各行其责" class="headerlink" title="1、单一职责原则(各行其责)"></a>1、单一职责原则(各行其责)</h2><h3 id="1-1、基本介绍"><a href="#1-1、基本介绍" class="headerlink" title="1.1、基本介绍"></a>1.1、基本介绍</h3><p>​        对类来说的，<strong>即一个类应该只负责一项职责</strong>。如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2。</p><h3 id="1-2、单一职责原则注意事项和细节"><a href="#1-2、单一职责原则注意事项和细节" class="headerlink" title="1.2、单一职责原则注意事项和细节"></a>1.2、单一职责原则注意事项和细节</h3><p>1、降低类的复杂度，一个类只负责一项职责。</p><p>2、提高类的可读性，可维护性</p><p>3、降低变更引起的风险</p><p>4、通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则;只有类中方法数量足够少，可以在方法级别保持单一职责原则</p><h2 id="2、接口隔离原则"><a href="#2、接口隔离原则" class="headerlink" title="2、接口隔离原则"></a>2、接口隔离原则</h2><h3 id="2-1、基本介绍"><a href="#2-1、基本介绍" class="headerlink" title="2.1、基本介绍"></a>2.1、基本介绍</h3><p>​        1.客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</p><p>​        2.<img src="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/image-20220228171705912.png" alt="image-20220228171705912"></p><p>​        3.类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法。</p><p>​        4.按隔离原则应当这样处理：</p><p>将<strong>接口Interface1</strong>拆分为<strong>独立的几个接口</strong>，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p><p><strong>所以改进之后的图形为</strong></p><p><img src="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/image-20220301170816017.png" alt="image-20220301170816017"></p><h2 id="3、依赖倒转-倒置-原则"><a href="#3、依赖倒转-倒置-原则" class="headerlink" title="3、依赖倒转(倒置)原则"></a>3、依赖倒转(倒置)原则</h2><h3 id="3-1、基本介绍"><a href="#3-1、基本介绍" class="headerlink" title="3.1、基本介绍"></a>3.1、基本介绍</h3><p>依赖倒转原则(<strong>Dependence Inversion Principle</strong>)是指：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象</li><li>依赖倒转(倒置)的中心思想是面向接口编程</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li></ol><p><strong>其实就是多多使用接口</strong></p><h3 id="3-2、依赖关系传递的三种方式"><a href="#3-2、依赖关系传递的三种方式" class="headerlink" title="3.2、依赖关系传递的三种方式"></a>3.2、依赖关系传递的三种方式</h3><ol><li><p>接口传递</p></li><li><p>构造方法传递</p></li><li><p>setter方式传递</p></li></ol><h3 id="3-3、依赖倒转原则的注意事项和细节"><a href="#3-3、依赖倒转原则的注意事项和细节" class="headerlink" title="3.3、依赖倒转原则的注意事项和细节"></a>3.3、依赖倒转原则的注意事项和细节</h3><ol><li><p>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好. </p></li><li><p>变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</p></li><li><p>继承时遵循里氏替换原则</p></li></ol><h2 id="4、里氏替换原则"><a href="#4、里氏替换原则" class="headerlink" title="4、里氏替换原则"></a>4、里氏替换原则</h2><h3 id="4-1、基本介绍"><a href="#4-1、基本介绍" class="headerlink" title="4.1、基本介绍"></a>4.1、基本介绍</h3><ol><li><p>里氏替换原则(<strong>Liskov Substitution Principle</strong>)在1988年，由麻省理工学院的以为姓里的女士提出的。</p></li><li><p>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</p></li><li><p>在使用继承时，遵循里氏替换原则，在子类中<strong>尽量</strong>不要重写父类的方法。</p></li><li><p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，<strong>在适当的情况下，可以通过聚合，组合，依赖 来解决问题。</strong></p></li></ol><h2 id="5、开闭原则"><a href="#5、开闭原则" class="headerlink" title="5、开闭原则"></a>5、开闭原则</h2><h3 id="5-1、基本介绍"><a href="#5-1、基本介绍" class="headerlink" title="5.1、基本介绍"></a>5.1、基本介绍</h3><ol><li><p>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</p></li><li><p>一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。</p></li><li><p>当软件需要变化时，尽量<strong>通过扩展</strong>软件实体的行为来实现变化，而<strong>不是通过修改</strong>已有的代码来实现变化。</p></li><li><p>编程中遵循其它原则，以及使用设计模式的目的就是遵循<strong>开闭原则</strong>。</p></li></ol><h2 id="6、迪米特法则"><a href="#6、迪米特法则" class="headerlink" title="6、迪米特法则"></a>6、迪米特法则</h2><h3 id="6-1、基本介绍"><a href="#6-1、基本介绍" class="headerlink" title="6.1、基本介绍"></a>6.1、基本介绍</h3><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则(<strong>Demeter Principle</strong>)又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public 方法，不对外泄露任何信息</p></li><li><p>迪米特法则还有个更简单的定义：只与直接的朋友通信</p></li><li><p><strong>直接的朋友</strong>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol><h3 id="6-2、迪米特法则注意事项和细节"><a href="#6-2、迪米特法则注意事项和细节" class="headerlink" title="6.2、迪米特法则注意事项和细节"></a>6.2、<strong>迪米特法则注意事项和细节</strong></h3><ol><li><p>迪米特法则的核心是<strong>降低类之间的耦合</strong></p></li><li><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系</p></li></ol><h2 id="7、合成复用原则"><a href="#7、合成复用原则" class="headerlink" title="7、合成复用原则"></a>7、合成复用原则</h2><h3 id="7-1、基本介绍"><a href="#7-1、基本介绍" class="headerlink" title="7.1、基本介绍"></a>7.1、基本介绍</h3><p><img src="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/image-20220310200341954.png" alt="image-20220310200341954"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2022/02/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/02/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/image-20220222173325718.png" alt="题目"></p><p>解法：</p><p><strong>迭代法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode cur = head, pre = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>            ListNode tmp = cur.next; <span class="hljs-comment">// 暂存后继节点 cur.next</span><br>            cur.next = pre;          <span class="hljs-comment">// 修改 next 引用指向</span><br>            pre = cur;               <span class="hljs-comment">// pre 暂存 cur</span><br>            cur = tmp;               <span class="hljs-comment">// cur 访问下一节点</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视频解析：</p><p><a href="https://www.bilibili.com/video/BV1KZ4y157Up/?spm_id_from=333.788">https://www.bilibili.com/video/BV1KZ4y157Up/?spm_id_from=333.788</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/image-20220218173604940.png" alt="题目"></p><p><strong>解题思路一：</strong></p><p>看见<code>从尾到头反过来返回每个节点的值</code>可以反应到要使用==栈==进行解题</p><p><strong>题解一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        <span class="hljs-comment">// 构建一个栈，用来存储链表中每个结点的值</span><br>        Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;ListNode&gt;();<br>        <span class="hljs-comment">// 让指针指向链表的头节点然后依次往后遍历</span><br>        ListNode temp = head;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 把节点的值放到栈内</span><br>            stack.push(temp);<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 获取栈的长度</span><br>        <span class="hljs-keyword">int</span> size = stack.size();<br>        <span class="hljs-comment">// 定义一个与栈同样长度的数组</span><br>        <span class="hljs-keyword">int</span>[] print = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>        <span class="hljs-comment">// 遍历栈，将栈内的元素依次加入到数组中 最后返回数组即可</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            print[i] = stack.pop().val;<br>        &#125;<br>        <span class="hljs-keyword">return</span> print;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/image-20220218175224990.png" alt="执行结果"></p><p>———————————————————————————手动分割线————————————————————————————</p><p><strong>解题思路二：</strong></p><p>递归法：先走到链表末端，回溯时依次将节点值加入列表 ，这样就可以实现链表值的倒序输出。</p><p><strong>题解二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    ArrayList&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        recur(head);<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[tmp.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.length; i++)<br>            res[i] = tmp.get(i);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recur</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>        recur(head.next);<br>        <span class="hljs-comment">// </span><br>        tmp.add(head.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包含main函数的栈</title>
    <link href="/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <url>/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/image-20220218162324175.png" alt="题目"></p><p><strong>解题思路</strong></p><blockquote><p>普通栈的 <code>push()</code> 和 <code>pop()</code> 函数的复杂度为 O(1)<em>O</em>(1) ；而获取栈最小值 <code>min()</code> 函数需要遍历整个栈，复杂度为 O(N)<em>O</em>(<em>N</em>) 。</p></blockquote><p>所以需要使用辅助栈将获取最小值时间复杂度变成O(1)</p><p>使用辅助栈B，保证栈B的元素是栈A中的最小值（在栈A加入数据之前与栈B的顶部数据进行对比，如果栈A数据小则压入栈B，反之不压入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    <span class="hljs-comment">// 定义两个栈，一个A数据栈负责将数据存入，一个栈B负责存入最小值</span><br>    Stack&lt;Integer&gt; A, B;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MinStack</span><span class="hljs-params">()</span> </span>&#123;<br>        A = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        B = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;    <br>        A.add(x);<br>        <span class="hljs-comment">// 如果栈B为空或者栈B的顶部数据大于等于存入的数据，就意味着新加入的数据小于栈B，就将这个数据压入栈B</span><br>        <span class="hljs-keyword">if</span>(B.empty() || B.peek() &gt;= x)<br>            B.add(x);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//当栈A弹出的时候，如果栈B的顶部数据等于栈A要弹出的数据，就将栈B顶也弹出，保证元素一致，也避免了重复数据造成的影响。</span><br>        <span class="hljs-keyword">if</span>(A.pop().equals(B.peek()))<br>            B.pop();<br>    &#125;<br>    <br>    <span class="hljs-comment">//栈A的栈顶就是顶部数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> A.peek();<br>    &#125;<br>    <br>    <span class="hljs-comment">//栈B的栈顶就是最小数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> B.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/image-20220218165841704.png" alt="执行结果"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传博客发现的问题</title>
    <link href="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>上传博客之后在控制台发现成功，但是访问网址却发现什么也没有，于是前往博客所在的public文件夹下发现里面并没有上传博客的详细信息</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217233726151.png" alt="控制台输出成功"></p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217233915883.png" alt="public下什么都没有"></p><p>创建一个新的笔记之后直接上传发现上传成功</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/XQH$RAL53Z%5BD%7DXAVK$C5SF5.png" alt="发现123上传成功"></p><p>于是创建了一个没有标签和分类的同样的笔记进行上传发现上传成功</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217234138730.png" alt="没有标签和分类的笔记上传成功"></p><p>自此 发现问题所在：</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217234237986.png" alt="标签和分类的：后没有加空格"></p><p>于是添加空格之后发现上传成功，自此问题完美解决。</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217234326636.png" alt="上传成功"></p>]]></content>
    
    
    <categories>
      
      <category>error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个栈实现队列</title>
    <link href="/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/image-20220217232828591.png" alt="题目"></p><p>这个题目可能比较难以理解题意，下面先分析一下题目的意思：</p><blockquote><p>题意</p></blockquote><p>输入： [“CQueue”,”appendTail”,”deleteHead”,”deleteHead”] 这里是要执行的方法，从左到右执行</p><p>[[],[3],[],[]]对应上面的方法，是上面方法的参数。CQueue和deleteHead方法不需要指定数字，只有添加才需要指定数字</p><p>1、创建队列，返回值为null</p><p>2、将3压入栈，返回值为null</p><p>3、将栈底的元素删除，也就是消息队列中先进来的元素，所以是deleteHead，返回该元素的数值，所以为3</p><p>4、继续删除栈底的元素，但是没有元素了，所以返回-1</p><p>​    输出：[null,null,3,-1]</p><blockquote><p>题解</p></blockquote><p>为什么不用Stack的方式而使用LinkedList？</p><p><img src="/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/image-20220217232841417.png" alt="image-20220217232841417"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;<br><br>        <span class="hljs-comment">//两个栈，一个执行添加,一个执行删除</span><br>        LinkedList&lt;Integer&gt; stack1;<br>        LinkedList&lt;Integer&gt; stack2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        stack1 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-comment">// 栈1只负责添加数据</span><br>        stack1.add(value);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 如果栈2是空</span><br>        <span class="hljs-keyword">if</span>(stack2.isEmpty()) &#123;<br>            <span class="hljs-comment">// 由于栈2和栈1是空,由于栈内没数据所以返回值为-1</span><br>            <span class="hljs-keyword">if</span>(stack1.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果栈1不是空，那么将栈1的值从顶部弹出放入栈2中,并且返回栈2的顶部的值（也就是将栈1底部的值删除）</span><br>            <span class="hljs-keyword">while</span>(!stack1.isEmpty()) &#123;<br>                stack2.add(stack1.pop());<br>            &#125;<br>            <span class="hljs-keyword">return</span> stack2.pop();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> stack2.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上就是队列的先进先出，栈的先进后出，两个栈互相交互就可以实现像是队列的先进先出的功能。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建自己的博客</title>
    <link href="/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>1、下载nodejs</p><p>2、下载git</p><p>查看自己的node与git是否安装成功：</p><p><code>node -v</code></p><p><code>npm -v</code></p><p><code>git --version</code></p><p>3、下载hexo  ： <code>npm install hexo-cli -g </code>          查看自己的安装是否成功 <code>hexo -v</code></p><h1 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h1><p>1、注册github <a href="https://www.bilibili.com/read/cv5107169">https://www.bilibili.com/read/cv5107169</a></p><p>2、项目的名字必须是自己的github名字+github.io</p><p>3、生成ssh：<code>ssh-keygen -t rsa -C</code> “邮箱地址”</p><p>测试 ssh是否绑定成功：ssh -T <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;</a></p><h1 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h1><p><strong><code>hexo init</code> # 初始化hexo博客</strong></p><p><img src="/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20211201154906091.png" alt="image-20211201154906091"></p><p><strong><code>hexo s</code> # 启动服务</strong></p><h1 id="发布博客到网上"><a href="#发布博客到网上" class="headerlink" title="发布博客到网上"></a>发布博客到网上</h1><p>在_config.yml最后面加上</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">自己博客的地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20211201160004913.png" alt="image-20211201160004913"></p><p>安装hexo-deployer-git 自动部署发布工具：<code>npm install hexo-deployer-git --save</code></p><p><strong>生成页面</strong> : <code>hexo g</code></p><p><strong>将文件上传到github：</strong><code>hexo d</code></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot连接canal出现timeout</title>
    <link href="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/"/>
    <url>/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/</url>
    
    <content type="html"><![CDATA[<h2 id="发现问题："><a href="#发现问题：" class="headerlink" title="发现问题："></a>发现问题：</h2><p>当你使用springboot连接linux实现canal数据同步的时候，控制台输出了</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/%7B%25Y0IH%60EVY%25VJV%5B3B5$AA2-16421386665471.png" alt="img"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1、首先在xshell上运行<code>systemctl start firewalld.service</code>开启防火墙</p><p>2、然后输入<code>firewall-cmd --list-port</code>查看11111端口号是否开启</p><p>3、如果出现了<br><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/TW@%7BN%5B%5BIORPX8@Y9AAAZ3K.png" alt="img"><br>证明开启了11111端口号</p><p>4、如果没有开启输入 <code>firewall-cmd --zone=public --add-port=11111/tcp --permanent</code>  开启端口号</p><p>5、然后输入<code>firewall-cmd --reload</code>重启防火墙更新配置</p><p>6、然后在阿里云上新增安全组开放11111端口</p><h2 id="进行测试："><a href="#进行测试：" class="headerlink" title="进行测试："></a>进行测试：</h2><p>在xshell上进行数据的增删改操作</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/image-20220114134009800.png" alt="image-20220114134009800"></p><p>本地控制台输出有关信息</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/image-20220114134047446.png" alt="image-20220114134047446"></p><p>查看本地mysql数据库发现有数据的增加</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/image-20220114134122429.png" alt="image-20220114134122429"></p><p>canal连接以及测试成功！！！</p>]]></content>
    
    
    <categories>
      
      <category>error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何上传博客</title>
    <link href="/2021/12/23/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/12/23/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>1、先找到你的blog的文件夹</p><p>2、在文件夹中右键 git bash</p><p>3、利用 <code>hexo new post XXX</code> xxx是你的博客中文章的名字</p><p>4、在博客文件夹下的source的_posts中找到你的.md后缀的文章名字</p><p>5、在md文件中写入你的博客</p><p>6、利用命令 <code>hexo g</code>生成你文章的静态文件</p><p>7、利用命令<code>hexo d</code>上传到GitHub中</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/01/hello-world/"/>
    <url>/2021/12/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
