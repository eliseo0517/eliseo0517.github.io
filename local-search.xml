<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1、什么是单例模式？"><a href="#1、什么是单例模式？" class="headerlink" title="1、什么是单例模式？"></a>1、什么是单例模式？</h2><p>所谓类的单例设计模式，就是<strong>采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法(静态方法)。</p><h2 id="2、单例模式的八种方式"><a href="#2、单例模式的八种方式" class="headerlink" title="2、单例模式的八种方式"></a>2、单例模式的八种方式</h2><p>单例模式有八种方式：</p><p><strong>1、饿汉式（静态常量）</strong></p><p><strong>2、饿汉式（静态代码块）</strong></p><p>3、 懒汉式（线程不安全）</p><p>4、 懒汉式（线程安全，同步方法）</p><p>5、 懒汉式（线程安全，同步代码块）</p><p><strong>3、4、5为单null检查</strong></p><p><strong>6、双重检查（双null检查）</strong></p><p><strong>7、静态内部类</strong></p><p><strong>8、枚举</strong></p><h2 id="3、饿汉式（静态常量）（可用）"><a href="#3、饿汉式（静态常量）（可用）" class="headerlink" title="3、饿汉式（静态常量）（可用）"></a>3、<strong>饿汉式（静态常量）（可用）</strong></h2><p>饿汉式（静态常量）应用实例</p><p><strong>步骤如下</strong>：</p><ol><li><p>构造器私有化 (防止 通过new得到对象实例 )</p></li><li><p>类的内部创建对象</p></li><li><p>向外暴露一个静态的公共方法。getInstance</p></li><li><p>代码实现</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: type1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/19 11:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">type1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        Singleton instance = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 饿汉式（静态常量）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-comment">// 1、构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 2、本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();<br><br>    <span class="hljs-comment">// 3、提供一个共有的静态方法，返回对象实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>证明两个对象实例是同一个对象实例</p><p><strong>优缺点说明</strong>：</p><ol><li><p><strong>优点：</strong>这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p></li><li><p><strong>缺点：</strong>在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费</p></li><li><p>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法， 但是导致类装载的原因有很多种，因此不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</p></li><li><p>结论：这种单例模式<strong>可用</strong>，<strong>可能</strong>造成内存浪费</p></li></ol><h2 id="4、饿汉式（静态代码块）（可用）"><a href="#4、饿汉式（静态代码块）（可用）" class="headerlink" title="4、饿汉式（静态代码块）（可用）"></a>4、饿汉式（静态代码块）（可用）</h2><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: type2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/19 17:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 单例模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">type2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        Singleton instance = Singleton.getInstance();<br>        Singleton instance2 = Singleton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 饿汉式（静态代码块）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><br>    <span class="hljs-comment">// 1、构造器私有化 外部能new</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 2、本类内部创建对象实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">// 在静态代码块中，创建单例对象</span><br>        instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    <span class="hljs-comment">// 3、提供一个共有的静态方法，返回对象实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>证明两个对象实例是同一个对象实例</p><p><strong>优缺点说明</strong>：</p><ol><li><p>这种方式和<strong>饿汉式的静态常量</strong>其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p></li><li><p>结论：这种单例模式可用，但是可能造成内存浪费</p></li></ol><h2 id="5、懒汉式（线程不安全）（不推荐）"><a href="#5、懒汉式（线程不安全）（不推荐）" class="headerlink" title="5、懒汉式（线程不安全）（不推荐）"></a>5、懒汉式（线程不安全）（不推荐）</h2><p> 代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type3;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.tyoe3</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/19 18:05</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 单例模式单null检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;懒汉式1，线程不安全&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singlenton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 提供一个静态的公有方法，当使用到该方法时，才会去创建instance</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 说明还没有创建instance</span><br>            instance = <span class="hljs-keyword">new</span> Singlenton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">懒汉式<span class="hljs-number">1</span>，线程不安全<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>起到了Lazy Loading的效果，但是只能在单线程下使用。</p></li><li><p>如果在多线程下，一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便<strong>会产生多个实例。</strong>所以在多线程环境下不可使用这种方式</p></li><li><p>结论：<strong>在实际开发中，不要使用这种方式.</strong></p></li></ol><h2 id="6、懒汉式（线程安全，同步方法）（不推荐）"><a href="#6、懒汉式（线程安全，同步方法）（不推荐）" class="headerlink" title="6、懒汉式（线程安全，同步方法）（不推荐）"></a>6、懒汉式（线程安全，同步方法）（不推荐）</h2><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type4;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type4</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest04</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/20 17:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:懒汉式（线程安全，同步方法）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest04</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;懒汉式2，线程安全&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 懒汉式（线程安全，同步方法）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singlenton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span><br>    <span class="hljs-comment">// 懒汉式</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 说明还没有创建instance</span><br>            instance = <span class="hljs-keyword">new</span> Singlenton();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">懒汉式<span class="hljs-number">2</span>，线程安全<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>解决了线程不安全问题</p></li><li><p>效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行<strong>同步效率太低</strong></p></li><li><p>结论：<strong>在实际开发中，不推荐使用这种方式</strong></p></li></ol><h2 id="7、懒汉式-线程安全，同步代码块-（不能使用）"><a href="#7、懒汉式-线程安全，同步代码块-（不能使用）" class="headerlink" title="7、懒汉式(线程安全，同步代码块)（不能使用）"></a>7、懒汉式(线程安全，同步代码块)（不能使用）</h2><p>​    <img src="/2022/03/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20220326182601250.png" alt="image-20220326182601250"></p><p><strong>优缺点说明</strong>：</p><ol><li>这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，</li></ol><p>改为同步产生实例化的的代码块</p><ol start="2"><li><p><strong>但是这种同步并不能起到线程同步的作用</strong>。跟第3种实现方式遇到的情形一致，假如一个线程进入了if (singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例</p></li><li><p>结论：在<strong>实际开发中，不能使用这种方</strong>式</p></li></ol><h2 id="8、双重检查（推荐使用）"><a href="#8、双重检查（推荐使用）" class="headerlink" title="8、双重检查（推荐使用）"></a>8、双重检查（推荐使用）</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type6;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type6</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest06</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/26 18:50</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:双重检查</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;双重检查&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 双重检查</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singlenton instance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 提供一个静态的公有方法，加入双重检查的代码，解决线程安全问题，同时解决懒加载的问题</span><br>    <span class="hljs-comment">// 两个线程同时进入到34行 假设a先进去那么b就进不去</span><br>    <span class="hljs-comment">// b进入的时候a已经完成了对Singlenton的实例化 也就是说b进入不了36行 所以退出代码块</span><br>    <span class="hljs-comment">// 第三个第四个线程进入的时候当到了34行发现 instance ！= null 于是直接退出</span><br>    <span class="hljs-comment">// 实现单例化 保证了效率 推荐使用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 说明还没有创建instance</span><br>            <span class="hljs-keyword">synchronized</span> (Singlenton.class) &#123;<br>                <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> Singlenton();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">双重检查<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if (singleton == null)检查，这样就可以保证线程安全了。</p></li><li><p>这样，实例化代码只用执行一次，后面再次访问时，判断if (singleton == null)，直接return实例化对象，也避免的反复进行方法同步.</p></li><li><p><strong>线程安全；延迟加载；效率较高</strong></p></li><li><p>结论：在实际开发中，<strong>推荐使用这种单例设计模式</strong></p></li></ol><h2 id="9、静态内部类（推荐使用）"><a href="#9、静态内部类（推荐使用）" class="headerlink" title="9、静态内部类（推荐使用）"></a>9、静态内部类（推荐使用）</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type7;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type7</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SinglentonTest07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/27 17:11</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:静态内部类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonTest07</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 测试</span><br>        System.out.println(<span class="hljs-string">&quot;使用静态内部类完成单例模式&quot;</span>);<br>        Singlenton instance = Singlenton.getInstance();<br>        Singlenton instance2 = Singlenton.getInstance();<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 静态内部类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singlenton</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singlenton instance;<br><br>    <span class="hljs-comment">// 构造器私有化</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singlenton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">// 写一个静态内部类，该类中有一个静态属性 Singlenton</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SinglentonInstance</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singlenton INSTANCE = <span class="hljs-keyword">new</span> Singlenton();<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    1、SinglentonInstance在Singlenton类装载的时候不会立刻执行保证不会进行这个SinglentonInstance静态内部类的装载</span><br><span class="hljs-comment">    从而保证懒加载可用</span><br><span class="hljs-comment">    2、当我们调用getInstance的时候会去去SinglentonInstance静态内部类的INSTANCE属性导致静态内部类装载保证装载的时候的线程安全</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 提供一个静态的公有方法,直接返回SinglentonInstance.INSTANCE</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singlenton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> SinglentonInstance.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">使用静态内部类完成单例模式<br><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p></li><li><p>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化。</p></li><li><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p></li><li><p>优点：避免了<strong>线程不安全</strong>，利用<strong>静态内部类特点实现延迟加载，效率高</strong></p></li><li><p>结论：<strong>推荐使用.</strong></p></li></ol><h2 id="10、枚举（推荐使用）"><a href="#10、枚举（推荐使用）" class="headerlink" title="10、枚举（推荐使用）"></a>10、枚举（推荐使用）</h2><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wang.singleton.type8;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Package</span>: com.wang.singleton.type8</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>: SingletonTest08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: Mr.Wang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@CreateTime</span>: 2022/3/27 17:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:枚举</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonTest08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance = Singleton.INSTANCE;<br>        Singleton instance2 = Singleton.INSTANCE;<br>        System.out.println(instance==instance2); <span class="hljs-comment">// true 证明两个instance实例是同一个对象实例</span><br>        System.out.println(<span class="hljs-string">&quot;instance.hashCode=&quot;</span> + instance.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;instance2.hashCode=&quot;</span> + instance2.hashCode());<br><br>        instance.sayOk();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用枚举可以实现单例。</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span></span>&#123;<br>    INSTANCE; <span class="hljs-comment">// 属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOk</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">// 方法</span><br>        System.out.println(<span class="hljs-string">&quot;OK~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>控制台输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br>instance.hashCode=<span class="hljs-number">460141958</span><br>instance2.hashCode=<span class="hljs-number">460141958</span><br>OK~<br></code></pre></td></tr></table></figure><p><strong>优缺点说明</strong>：</p><ol><li><p>这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p></li><li><p>这种方式是<strong>Effective Java作者Josh Bloch 提倡的方式</strong></p></li><li><p>结论：<strong>推荐使用</strong></p></li></ol><h2 id="单例模式注意事项和细节说明"><a href="#单例模式注意事项和细节说明" class="headerlink" title="单例模式注意事项和细节说明"></a>单例模式注意事项和细节说明</h2><p><strong>单例模式注意事项和细节说明</strong></p><ol><li><p>单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</p></li><li><p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</p></li><li><p>单例模式使用的场景：需要频繁的进行创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session工厂等)</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类的六种关系</title>
    <link href="/2022/03/10/%E7%B1%BB%E7%9A%84%E5%85%AD%E7%A7%8D%E5%85%B3%E7%B3%BB/"/>
    <url>/2022/03/10/%E7%B1%BB%E7%9A%84%E5%85%AD%E7%A7%8D%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、依赖关系（Dependence）"><a href="#一、依赖关系（Dependence）" class="headerlink" title="一、依赖关系（Dependence）"></a>一、依赖关系（Dependence）</h1><p>只要是在<strong>类中用到了对方</strong>，那么他们之间就存在依赖关系。如果没有对方，连编绎都通过不了。</p><p><strong>小结:</strong></p><p>1、类中用到了对方</p><p>2、如果是类的成员属性</p><p>3、如果是方法的返回类</p><p>4、是方法接收的参数类</p><p>5、方法中使用到</p><h1 id="二、泛化关系-generalization）"><a href="#二、泛化关系-generalization）" class="headerlink" title="二、泛化关系(generalization）"></a>二、泛化关系(generalization）</h1><p>泛化关系实际上就是继承关系，他是<strong>依赖关系的特例</strong></p><p><strong>小结:</strong></p><p>1、泛化关系实际上就是继承关系</p><p>2、如果A类继承了B类，我们就说A和B存在泛化关系</p><h1 id="三、实现关系（Implementation）"><a href="#三、实现关系（Implementation）" class="headerlink" title="三、实现关系（Implementation）"></a>三、实现关系（Implementation）</h1><p>实现关系实际上就是A类实现B接口，他是<strong>依赖关系的特例</strong></p><h1 id="四、关联关系（Association）"><a href="#四、关联关系（Association）" class="headerlink" title="四、关联关系（Association）"></a>四、关联关系（Association）</h1><p>关联关系实际上就是<strong>类与类之间的联系，他是依赖关系的特例</strong></p><p>关联具有<strong>导航性</strong>：即双向关系或单向关系</p><p>关系具有多重性：如“1”（表示有且仅有一个），“0…”（表示0个或者多个），“0，1”（表示0个或者一个），“n…m”(表示n到 m个都可以),“m…*”（表示至少m个）。</p><h1 id="五、聚合关系（Aggregation）"><a href="#五、聚合关系（Aggregation）" class="headerlink" title="五、聚合关系（Aggregation）"></a>五、聚合关系（Aggregation）</h1><p>聚合关系（Aggregation）表示的是<strong>整体和部分</strong>的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。</p><p>如：一台电脑由键盘(keyboard)、显示器(monitor)，鼠标等组成；组成电脑的各个配件是可以从电脑上分离出来的，</p><h1 id="六、组合关系（Composition）"><a href="#六、组合关系（Composition）" class="headerlink" title="六、组合关系（Composition）"></a>六、组合关系（Composition）</h1><p>组合关系：也是整体与部分的关系，但是整体与部分不可以分开</p><p><strong>案例</strong>：在程序中我们定义实体：Person与IDCard、Head, 那么 Head 和Person 就是 组合，IDCard 和 Person 就是聚合。</p><p>但是如果在程序中Person实体中定义了对IDCard进行<strong>级联删除</strong>，即删除Person时连同IDCard一起删除，那么IDCard 和 Person 就是组合了</p><h1 id="七、聚合组合的区别"><a href="#七、聚合组合的区别" class="headerlink" title="七、聚合组合的区别"></a>七、聚合组合的区别</h1><p><strong>聚合</strong>有参构造的时候将类的对象放进去<br><strong>组合</strong>就是无参构造的时候将对象new进去</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式七大原则</title>
    <link href="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <url>/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><p><strong>单一职责原则：</strong>一个类、接口或方法只负责一个职责，降低代码复杂度以及变更引起的风险。</p><p><strong>接口隔离原则：</strong>将不同功能定义在不同接口中实现接口隔离。</p><p><strong>依赖倒置原则：</strong>针对接口编程，依赖于抽象类或接口而不依赖于具体实现类。</p><p><strong>里氏替换原则：</strong>任何基类可以出现的地方，子类一定可以出现。</p><p><strong>开放封闭原则：</strong>对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。</p><p><strong>迪米特原则：</strong>每个模块对其他模块都要尽可能少地了解和依赖，降低代码耦合度。</p><p><strong>合成复用原则：</strong>尽量使用组合(has-a)/聚合(contains-a)而不是继承(is-a)达到软件复用的目的。</p><h2 id="1、单一职责原则-各行其责"><a href="#1、单一职责原则-各行其责" class="headerlink" title="1、单一职责原则(各行其责)"></a>1、单一职责原则(各行其责)</h2><h3 id="1-1、基本介绍"><a href="#1-1、基本介绍" class="headerlink" title="1.1、基本介绍"></a>1.1、基本介绍</h3><p>​        对类来说的，<strong>即一个类应该只负责一项职责</strong>。如类A负责两个不同职责：职责1，职责2。当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2。</p><h3 id="1-2、单一职责原则注意事项和细节"><a href="#1-2、单一职责原则注意事项和细节" class="headerlink" title="1.2、单一职责原则注意事项和细节"></a>1.2、单一职责原则注意事项和细节</h3><p>1、降低类的复杂度，一个类只负责一项职责。</p><p>2、提高类的可读性，可维护性</p><p>3、降低变更引起的风险</p><p>4、通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则;只有类中方法数量足够少，可以在方法级别保持单一职责原则</p><h2 id="2、接口隔离原则"><a href="#2、接口隔离原则" class="headerlink" title="2、接口隔离原则"></a>2、接口隔离原则</h2><h3 id="2-1、基本介绍"><a href="#2-1、基本介绍" class="headerlink" title="2.1、基本介绍"></a>2.1、基本介绍</h3><p>​        1.客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</p><p>​        2.<img src="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/image-20220228171705912.png" alt="image-20220228171705912"></p><p>​        3.类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法。</p><p>​        4.按隔离原则应当这样处理：</p><p>将<strong>接口Interface1</strong>拆分为<strong>独立的几个接口</strong>，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则</p><p><strong>所以改进之后的图形为</strong></p><p><img src="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/image-20220301170816017.png" alt="image-20220301170816017"></p><h2 id="3、依赖倒转-倒置-原则"><a href="#3、依赖倒转-倒置-原则" class="headerlink" title="3、依赖倒转(倒置)原则"></a>3、依赖倒转(倒置)原则</h2><h3 id="3-1、基本介绍"><a href="#3-1、基本介绍" class="headerlink" title="3.1、基本介绍"></a>3.1、基本介绍</h3><p>依赖倒转原则(<strong>Dependence Inversion Principle</strong>)是指：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象</li><li>依赖倒转(倒置)的中心思想是面向接口编程</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li></ol><p><strong>其实就是多多使用接口</strong></p><h3 id="3-2、依赖关系传递的三种方式"><a href="#3-2、依赖关系传递的三种方式" class="headerlink" title="3.2、依赖关系传递的三种方式"></a>3.2、依赖关系传递的三种方式</h3><ol><li><p>接口传递</p></li><li><p>构造方法传递</p></li><li><p>setter方式传递</p></li></ol><h3 id="3-3、依赖倒转原则的注意事项和细节"><a href="#3-3、依赖倒转原则的注意事项和细节" class="headerlink" title="3.3、依赖倒转原则的注意事项和细节"></a>3.3、依赖倒转原则的注意事项和细节</h3><ol><li><p>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好. </p></li><li><p>变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</p></li><li><p>继承时遵循里氏替换原则</p></li></ol><h2 id="4、里氏替换原则"><a href="#4、里氏替换原则" class="headerlink" title="4、里氏替换原则"></a>4、里氏替换原则</h2><h3 id="4-1、基本介绍"><a href="#4-1、基本介绍" class="headerlink" title="4.1、基本介绍"></a>4.1、基本介绍</h3><ol><li><p>里氏替换原则(<strong>Liskov Substitution Principle</strong>)在1988年，由麻省理工学院的以为姓里的女士提出的。</p></li><li><p>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</p></li><li><p>在使用继承时，遵循里氏替换原则，在子类中<strong>尽量</strong>不要重写父类的方法。</p></li><li><p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，<strong>在适当的情况下，可以通过聚合，组合，依赖 来解决问题。</strong></p></li></ol><h2 id="5、开闭原则"><a href="#5、开闭原则" class="headerlink" title="5、开闭原则"></a>5、开闭原则</h2><h3 id="5-1、基本介绍"><a href="#5-1、基本介绍" class="headerlink" title="5.1、基本介绍"></a>5.1、基本介绍</h3><ol><li><p>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</p></li><li><p>一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。</p></li><li><p>当软件需要变化时，尽量<strong>通过扩展</strong>软件实体的行为来实现变化，而<strong>不是通过修改</strong>已有的代码来实现变化。</p></li><li><p>编程中遵循其它原则，以及使用设计模式的目的就是遵循<strong>开闭原则</strong>。</p></li></ol><h2 id="6、迪米特法则"><a href="#6、迪米特法则" class="headerlink" title="6、迪米特法则"></a>6、迪米特法则</h2><h3 id="6-1、基本介绍"><a href="#6-1、基本介绍" class="headerlink" title="6.1、基本介绍"></a>6.1、基本介绍</h3><ol><li><p>一个对象应该对其他对象保持最少的了解</p></li><li><p>类与类关系越密切，耦合度越大</p></li><li><p>迪米特法则(<strong>Demeter Principle</strong>)又叫<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public 方法，不对外泄露任何信息</p></li><li><p>迪米特法则还有个更简单的定义：只与直接的朋友通信</p></li><li><p><strong>直接的朋友</strong>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></li></ol><h3 id="6-2、迪米特法则注意事项和细节"><a href="#6-2、迪米特法则注意事项和细节" class="headerlink" title="6.2、迪米特法则注意事项和细节"></a>6.2、<strong>迪米特法则注意事项和细节</strong></h3><ol><li><p>迪米特法则的核心是<strong>降低类之间的耦合</strong></p></li><li><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低类间(对象间)耦合关系， 并不是要求完全没有依赖关系</p></li></ol><h2 id="7、合成复用原则"><a href="#7、合成复用原则" class="headerlink" title="7、合成复用原则"></a>7、合成复用原则</h2><h3 id="7-1、基本介绍"><a href="#7-1、基本介绍" class="headerlink" title="7.1、基本介绍"></a>7.1、基本介绍</h3><p><img src="/2022/03/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/image-20220310200341954.png" alt="image-20220310200341954"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2022/02/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/02/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/22/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/image-20220222173325718.png" alt="题目"></p><p>解法：</p><p><strong>迭代法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode cur = head, pre = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-keyword">null</span>) &#123;<br>            ListNode tmp = cur.next; <span class="hljs-comment">// 暂存后继节点 cur.next</span><br>            cur.next = pre;          <span class="hljs-comment">// 修改 next 引用指向</span><br>            pre = cur;               <span class="hljs-comment">// pre 暂存 cur</span><br>            cur = tmp;               <span class="hljs-comment">// cur 访问下一节点</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视频解析：</p><p><a href="https://www.bilibili.com/video/BV1KZ4y157Up/?spm_id_from=333.788">https://www.bilibili.com/video/BV1KZ4y157Up/?spm_id_from=333.788</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/image-20220218173604940.png" alt="题目"></p><p><strong>解题思路一：</strong></p><p>看见<code>从尾到头反过来返回每个节点的值</code>可以反应到要使用==栈==进行解题</p><p><strong>题解一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        <span class="hljs-comment">// 构建一个栈，用来存储链表中每个结点的值</span><br>        Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;ListNode&gt;();<br>        <span class="hljs-comment">// 让指针指向链表的头节点然后依次往后遍历</span><br>        ListNode temp = head;<br>        <span class="hljs-keyword">while</span> (temp != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 把节点的值放到栈内</span><br>            stack.push(temp);<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 获取栈的长度</span><br>        <span class="hljs-keyword">int</span> size = stack.size();<br>        <span class="hljs-comment">// 定义一个与栈同样长度的数组</span><br>        <span class="hljs-keyword">int</span>[] print = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>        <span class="hljs-comment">// 遍历栈，将栈内的元素依次加入到数组中 最后返回数组即可</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            print[i] = stack.pop().val;<br>        &#125;<br>        <span class="hljs-keyword">return</span> print;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/02/18/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/image-20220218175224990.png" alt="执行结果"></p><p>———————————————————————————手动分割线————————————————————————————</p><p><strong>解题思路二：</strong></p><p>递归法：先走到链表末端，回溯时依次将节点值加入列表 ，这样就可以实现链表值的倒序输出。</p><p><strong>题解二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    ArrayList&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        recur(head);<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[tmp.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.length; i++)<br>            res[i] = tmp.get(i);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recur</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>        recur(head.next);<br>        <span class="hljs-comment">// </span><br>        tmp.add(head.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>包含main函数的栈</title>
    <link href="/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <url>/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/image-20220218162324175.png" alt="题目"></p><p><strong>解题思路</strong></p><blockquote><p>普通栈的 <code>push()</code> 和 <code>pop()</code> 函数的复杂度为 O(1)<em>O</em>(1) ；而获取栈最小值 <code>min()</code> 函数需要遍历整个栈，复杂度为 O(N)<em>O</em>(<em>N</em>) 。</p></blockquote><p>所以需要使用辅助栈将获取最小值时间复杂度变成O(1)</p><p>使用辅助栈B，保证栈B的元素是栈A中的最小值（在栈A加入数据之前与栈B的顶部数据进行对比，如果栈A数据小则压入栈B，反之不压入）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    <span class="hljs-comment">// 定义两个栈，一个A数据栈负责将数据存入，一个栈B负责存入最小值</span><br>    Stack&lt;Integer&gt; A, B;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MinStack</span><span class="hljs-params">()</span> </span>&#123;<br>        A = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        B = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;    <br>        A.add(x);<br>        <span class="hljs-comment">// 如果栈B为空或者栈B的顶部数据大于等于存入的数据，就意味着新加入的数据小于栈B，就将这个数据压入栈B</span><br>        <span class="hljs-keyword">if</span>(B.empty() || B.peek() &gt;= x)<br>            B.add(x);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//当栈A弹出的时候，如果栈B的顶部数据等于栈A要弹出的数据，就将栈B顶也弹出，保证元素一致，也避免了重复数据造成的影响。</span><br>        <span class="hljs-keyword">if</span>(A.pop().equals(B.peek()))<br>            B.pop();<br>    &#125;<br>    <br>    <span class="hljs-comment">//栈A的栈顶就是顶部数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> A.peek();<br>    &#125;<br>    <br>    <span class="hljs-comment">//栈B的栈顶就是最小数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> B.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/02/18/%E5%8C%85%E5%90%ABmain%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/image-20220218165841704.png" alt="执行结果"></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传博客发现的问题</title>
    <link href="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>上传博客之后在控制台发现成功，但是访问网址却发现什么也没有，于是前往博客所在的public文件夹下发现里面并没有上传博客的详细信息</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217233726151.png" alt="控制台输出成功"></p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217233915883.png" alt="public下什么都没有"></p><p>创建一个新的笔记之后直接上传发现上传成功</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/XQH$RAL53Z%5BD%7DXAVK$C5SF5.png" alt="发现123上传成功"></p><p>于是创建了一个没有标签和分类的同样的笔记进行上传发现上传成功</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217234138730.png" alt="没有标签和分类的笔记上传成功"></p><p>自此 发现问题所在：</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217234237986.png" alt="标签和分类的：后没有加空格"></p><p>于是添加空格之后发现上传成功，自此问题完美解决。</p><p><img src="/2022/02/17/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220217234326636.png" alt="上传成功"></p>]]></content>
    
    
    <categories>
      
      <category>error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个栈实现队列</title>
    <link href="/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><img src="/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/image-20220217232828591.png" alt="题目"></p><p>这个题目可能比较难以理解题意，下面先分析一下题目的意思：</p><blockquote><p>题意</p></blockquote><p>输入： [“CQueue”,”appendTail”,”deleteHead”,”deleteHead”] 这里是要执行的方法，从左到右执行</p><p>[[],[3],[],[]]对应上面的方法，是上面方法的参数。CQueue和deleteHead方法不需要指定数字，只有添加才需要指定数字</p><p>1、创建队列，返回值为null</p><p>2、将3压入栈，返回值为null</p><p>3、将栈底的元素删除，也就是消息队列中先进来的元素，所以是deleteHead，返回该元素的数值，所以为3</p><p>4、继续删除栈底的元素，但是没有元素了，所以返回-1</p><p>​    输出：[null,null,3,-1]</p><blockquote><p>题解</p></blockquote><p>为什么不用Stack的方式而使用LinkedList？</p><p><img src="/2022/02/17/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/image-20220217232841417.png" alt="image-20220217232841417"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;<br><br>        <span class="hljs-comment">//两个栈，一个执行添加,一个执行删除</span><br>        LinkedList&lt;Integer&gt; stack1;<br>        LinkedList&lt;Integer&gt; stack2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        stack1 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-comment">// 栈1只负责添加数据</span><br>        stack1.add(value);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 如果栈2是空</span><br>        <span class="hljs-keyword">if</span>(stack2.isEmpty()) &#123;<br>            <span class="hljs-comment">// 由于栈2和栈1是空,由于栈内没数据所以返回值为-1</span><br>            <span class="hljs-keyword">if</span>(stack1.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果栈1不是空，那么将栈1的值从顶部弹出放入栈2中,并且返回栈2的顶部的值（也就是将栈1底部的值删除）</span><br>            <span class="hljs-keyword">while</span>(!stack1.isEmpty()) &#123;<br>                stack2.add(stack1.pop());<br>            &#125;<br>            <span class="hljs-keyword">return</span> stack2.pop();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> stack2.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上就是队列的先进先出，栈的先进后出，两个栈互相交互就可以实现像是队列的先进先出的功能。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建自己的博客</title>
    <link href="/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>1、下载nodejs</p><p>2、下载git</p><p>查看自己的node与git是否安装成功：</p><p><code>node -v</code></p><p><code>npm -v</code></p><p><code>git --version</code></p><p>3、下载hexo  ： <code>npm install hexo-cli -g </code>          查看自己的安装是否成功 <code>hexo -v</code></p><h1 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h1><p>1、注册github <a href="https://www.bilibili.com/read/cv5107169">https://www.bilibili.com/read/cv5107169</a></p><p>2、项目的名字必须是自己的github名字+github.io</p><p>3、生成ssh：<code>ssh-keygen -t rsa -C</code> “邮箱地址”</p><p>测试 ssh是否绑定成功：ssh -T <a href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#99;&#x6f;&#109;</a></p><h1 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h1><p><strong><code>hexo init</code> # 初始化hexo博客</strong></p><p><img src="/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20211201154906091.png" alt="image-20211201154906091"></p><p><strong><code>hexo s</code> # 启动服务</strong></p><h1 id="发布博客到网上"><a href="#发布博客到网上" class="headerlink" title="发布博客到网上"></a>发布博客到网上</h1><p>在_config.yml最后面加上</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">自己博客的地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p><img src="/2022/01/14/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/image-20211201160004913.png" alt="image-20211201160004913"></p><p>安装hexo-deployer-git 自动部署发布工具：<code>npm install hexo-deployer-git --save</code></p><p><strong>生成页面</strong> : <code>hexo g</code></p><p><strong>将文件上传到github：</strong><code>hexo d</code></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot连接canal出现timeout</title>
    <link href="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/"/>
    <url>/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/</url>
    
    <content type="html"><![CDATA[<h2 id="发现问题："><a href="#发现问题：" class="headerlink" title="发现问题："></a>发现问题：</h2><p>当你使用springboot连接linux实现canal数据同步的时候，控制台输出了</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/%7B%25Y0IH%60EVY%25VJV%5B3B5$AA2-16421386665471.png" alt="img"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>1、首先在xshell上运行<code>systemctl start firewalld.service</code>开启防火墙</p><p>2、然后输入<code>firewall-cmd --list-port</code>查看11111端口号是否开启</p><p>3、如果出现了<br><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/TW@%7BN%5B%5BIORPX8@Y9AAAZ3K.png" alt="img"><br>证明开启了11111端口号</p><p>4、如果没有开启输入 <code>firewall-cmd --zone=public --add-port=11111/tcp --permanent</code>  开启端口号</p><p>5、然后输入<code>firewall-cmd --reload</code>重启防火墙更新配置</p><p>6、然后在阿里云上新增安全组开放11111端口</p><h2 id="进行测试："><a href="#进行测试：" class="headerlink" title="进行测试："></a>进行测试：</h2><p>在xshell上进行数据的增删改操作</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/image-20220114134009800.png" alt="image-20220114134009800"></p><p>本地控制台输出有关信息</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/image-20220114134047446.png" alt="image-20220114134047446"></p><p>查看本地mysql数据库发现有数据的增加</p><p><img src="/2022/01/14/springboot%E8%BF%9E%E6%8E%A5canal%E5%87%BA%E7%8E%B0timeout/image-20220114134122429.png" alt="image-20220114134122429"></p><p>canal连接以及测试成功！！！</p>]]></content>
    
    
    <categories>
      
      <category>error</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何上传博客</title>
    <link href="/2021/12/23/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/12/23/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>1、先找到你的blog的文件夹</p><p>2、在文件夹中右键 git bash</p><p>3、利用 <code>hexo new post XXX</code> xxx是你的博客中文章的名字</p><p>4、在博客文件夹下的source的_posts中找到你的.md后缀的文章名字</p><p>5、在md文件中写入你的博客</p><p>6、利用命令 <code>hexo g</code>生成你文章的静态文件</p><p>7、利用命令<code>hexo d</code>上传到GitHub中</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/01/hello-world/"/>
    <url>/2021/12/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
